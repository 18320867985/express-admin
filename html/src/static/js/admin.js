(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.umd = {})));
}(this, (function (exports) {

/*自动执行 rollup打包umd格式js模块
	 
	 * <script   data-parent="umd" data-umd="test" src="./js/all.js" type="text/javascript" charset="utf-8"></script>
	 * */

(function () {
	window.onload = function () {
		var el_umds = document.querySelectorAll("script[data-umd]");
		for (var i = 0; i < el_umds.length; i++) {

			var parent = "umd";
			var el_umd = el_umds[i];
			if (el_umd) {

				parent = el_umd.getAttribute("data-parent") || parent;
				var umd_str = el_umd.getAttribute("data-umd") || "";
				var umd_strs = umd_str.split(/,|;|&/);
				for (var i = 0; i < umd_strs.length; i++) {
					var item = umd_strs[i] || "";
					if (item.trim() !== "") {
						setUmd(parent, item.trim());
					}
				}
			}
		}
	};

	function setUmd(parent, umd_str) {

		var arrs = umd_str.split(".");
		var prop1 = "";
		var prop2 = "";
		if (arrs.length >= 0) {
			prop1 = arrs[0] || "";
			prop1 = prop1.trim();
		}

		if (arrs.length === 1) {
			prop2 = "init";
		} else if (arrs.length === 2) {
			prop2 = arrs[1].trim();
		}

		var obj = window[parent];
		if (!obj) {
			return;
		}
		if (!obj[prop1]) {
			return;
		}
		var fn = obj[prop1][prop2];

		if (typeof fn === "function") {
			fn();
		}
	}
})();

/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if ("development" !== 'production' && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ("development" !== 'production' && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if ("development" !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if ("development" !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    "development" !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ("development" !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ("development" !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  var haveExpectedTypes = expectedTypes.some(function (t) { return t; });
  if (!valid && haveExpectedTypes) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;

function assertType (value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

var functionTypeCheckRE = /^\s*function (\w+)/;

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  // check if we need to specify expected value
  if (
    expectedTypes.length === 1 &&
    isExplicable(expectedType) &&
    isExplicable(typeof value) &&
    !isBoolean(expectedType, receivedType)
  ) {
    message += " with value " + (styleValue(value, expectedType));
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + (styleValue(value, receivedType)) + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

var EXPLICABLE_TYPES = ['string', 'number', 'boolean'];
function isExplicable (value) {
  return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      "development" !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (
      !vnode ||
      (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) // #9658, #10391
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallbackRender,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      if ("development" !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes =
      scopedSlotFn(props) ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  } else {
    nodes =
      this.$slots[name] ||
      (typeof fallbackRender === 'function' ? fallbackRender() : fallbackRender);
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
  return eventKeyCode === undefined
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ("development" !== 'production' && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  // we know it's MountedComponentVNode but flow doesn't
  vnode,
  // activeInstance in lifecycle state
  parent
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    "development" !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ("development" !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ("development" !== 'production' && isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ("development" !== 'production' && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      "development" !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) ||
    (!newScopedSlots && vm.$scopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if ("development" !== 'production' && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      "development" !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        var info = "callback for watcher \"" + (this.expression) + "\"";
        invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ("development" !== 'production' && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn(("The computed property \"" + key + "\" is already defined as a method."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if ("development" !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = "callback for immediate watcher \"" + (watcher.expression) + "\"";
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if ("development" !== 'production' &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if ("development" !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if ("development" !== 'production' && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */





function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  methods: {
    cacheVNode: function cacheVNode() {
      var ref = this;
      var cache = ref.cache;
      var keys = ref.keys;
      var vnodeToCache = ref.vnodeToCache;
      var keyToCache = ref.keyToCache;
      if (vnodeToCache) {
        var tag = vnodeToCache.tag;
        var componentInstance = vnodeToCache.componentInstance;
        var componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: getComponentName(componentOptions),
          tag: tag,
          componentInstance: componentInstance,
        };
        keys.push(keyToCache);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.cacheVNode();
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  updated: function updated () {
    this.cacheVNode();
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        // delay setting the cache until update
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.14';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      "development" !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.asyncFactory === b.asyncFactory && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ("development" !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ("development" !== 'production' &&
                typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

/*  */

/*  */

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if ("development" !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if ("development" !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if ("development" !== 'production' &&
      "development" !== 'test' &&
      config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/**
  * vee-validate v2.2.15
  * (c) 2019 Abdelrahman Awad
  * @license MIT
  */
// 

var isTextInput = function (el) {
  return includes(['text', 'password', 'search', 'email', 'tel', 'url', 'textarea', 'number'], el.type);
};

var isCheckboxOrRadioInput = function (el) {
  return includes(['radio', 'checkbox'], el.type);
};

var isDateInput = function (el) {
  return includes(['date', 'week', 'month', 'datetime-local', 'time'], el.type);
};

/**
 * Gets the data attribute. the name must be kebab-case.
 */
var getDataAttribute = function (el, name) { return el.getAttribute(("data-vv-" + name)); };

var isNaN$1 = function (value) {
  if ('isNaN' in Number) {
    return Number.isNaN(value);
  }

  // eslint-disable-next-line
  return typeof(value) === 'number' && value !== value;
};

/**
 * Checks if the values are either null or undefined.
 */
var isNullOrUndefined = function () {
  var values = [], len = arguments.length;
  while ( len-- ) values[ len ] = arguments[ len ];

  return values.every(function (value) {
    return value === null || value === undefined;
  });
};

/**
 * Creates the default flags object.
 */
var createFlags = function () { return ({
  untouched: true,
  touched: false,
  dirty: false,
  pristine: true,
  valid: null,
  invalid: null,
  validated: false,
  pending: false,
  required: false,
  changed: false
}); };

/**
 * Shallow object comparison.
 */
var isEqual = function (lhs, rhs) {
  if (lhs instanceof RegExp && rhs instanceof RegExp) {
    return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);
  }

  if (Array.isArray(lhs) && Array.isArray(rhs)) {
    if (lhs.length !== rhs.length) { return false; }

    for (var i = 0; i < lhs.length; i++) {
      if (!isEqual(lhs[i], rhs[i])) {
        return false;
      }
    }

    return true;
  }

  // if both are objects, compare each key recursively.
  if (isObject$1(lhs) && isObject$1(rhs)) {
    return Object.keys(lhs).every(function (key) {
      return isEqual(lhs[key], rhs[key]);
    }) && Object.keys(rhs).every(function (key) {
      return isEqual(lhs[key], rhs[key]);
    });
  }

  if (isNaN$1(lhs) && isNaN$1(rhs)) {
    return true;
  }

  return lhs === rhs;
};

/**
 * Determines the input field scope.
 */
var getScope = function (el) {
  var scope = getDataAttribute(el, 'scope');
  if (isNullOrUndefined(scope)) {
    var form = getForm(el);

    if (form) {
      scope = getDataAttribute(form, 'scope');
    }
  }

  return !isNullOrUndefined(scope) ? scope : null;
};

/**
 * Get the closest form element.
 */
var getForm = function (el) {
  if (isNullOrUndefined(el)) { return null; }

  if (el.tagName === 'FORM') { return el; }

  if (!isNullOrUndefined(el.form)) { return el.form; }

  return !isNullOrUndefined(el.parentNode) ? getForm(el.parentNode) : null;
};

/**
 * Gets the value in an object safely.
 */
var getPath = function (path, target, def) {
  if ( def === void 0 ) def = undefined;

  if (!path || !target) { return def; }

  var value = target;
  path.split('.').every(function (prop) {
    if (prop in value) {
      value = value[prop];

      return true;
    }

    value = def;

    return false;
  });

  return value;
};

/**
 * Checks if path exists within an object.
 */
var hasPath = function (path, target) {
  var obj = target;
  var previousPath = null;
  var isNullOrNonObject = false;
  var isValidPath = path.split('.').reduce(function (reducer, prop) {
    if (obj == null || typeof obj !== 'object') {
      isNullOrNonObject = true;
      return reducer && false;
    }

    if (prop in obj) {
      obj = obj[prop];
      previousPath = previousPath === null ? prop : previousPath + '.' + prop;

      return reducer && true;
    }

    return reducer && false;
  }, true);

  {
    if (isNullOrNonObject) {
      throw new Error(previousPath + ' is not an object');
    }
  }

  return isValidPath;
};

/**
 * Parses a rule string expression.
 */
var parseRule = function (rule) {
  var params = [];
  var name = rule.split(':')[0];

  if (includes(rule, ':')) {
    params = rule.split(':').slice(1).join(':').split(',');
  }

  return { name: name, params: params };
};

/**
 * Debounces a function.
 */
var debounce = function (fn, wait, token) {
  if ( wait === void 0 ) wait = 0;
  if ( token === void 0 ) token = { cancelled: false };

  if (wait === 0) {
    return fn;
  }

  var timeout;

  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var later = function () {
      timeout = null;

      // check if the fn call was cancelled.
      if (!token.cancelled) { fn.apply(void 0, args); }
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (!timeout) { fn.apply(void 0, args); }
  };
};

/**
 * Appends a rule definition to a list of rules.
 */
var appendRule = function (rule, rules) {
  if (!rules) {
    return normalizeRules(rule);
  }

  if (!rule) {
    return normalizeRules(rules);
  }

  if (typeof rules === 'string') {
    rules = normalizeRules(rules);
  }

  return assign({}, rules, normalizeRules(rule));
};

/**
 * Normalizes the given rules expression.
 */
var normalizeRules = function (rules) {
  // if falsy value return an empty object.
  if (!rules) {
    return {};
  }

  if (isObject$1(rules)) {
    // $FlowFixMe
    return Object.keys(rules).reduce(function (prev, curr) {
      var params = [];
      // $FlowFixMe
      if (rules[curr] === true) {
        params = [];
      } else if (Array.isArray(rules[curr])) {
        params = rules[curr];
      } else if (isObject$1(rules[curr])) {
        params = rules[curr];
      } else {
        params = [rules[curr]];
      }

      // $FlowFixMe
      if (rules[curr] !== false) {
        prev[curr] = params;
      }

      return prev;
    }, {});
  }

  if (typeof rules !== 'string') {
    warn$1('rules must be either a string or an object.');
    return {};
  }

  return rules.split('|').reduce(function (prev, rule) {
    var parsedRule = parseRule(rule);
    if (!parsedRule.name) {
      return prev;
    }

    prev[parsedRule.name] = parsedRule.params;
    return prev;
  }, {});
};

/**
 * Emits a warning to the console.
 */
var warn$1 = function (message) {
  console.warn(("[vee-validate] " + message)); // eslint-disable-line
};

/**
 * Creates a branded error object.
 */
var createError = function (message) { return new Error(("[vee-validate] " + message)); };

/**
 * Checks if the value is an object.
 */
var isObject$1 = function (obj) { return obj !== null && obj && typeof obj === 'object' && ! Array.isArray(obj); };

/**
 * Checks if a function is callable.
 */
var isCallable = function (func) { return typeof func === 'function'; };

/**
 * Check if element has the css class on it.
 */
var hasClass = function (el, className) {
  if (el.classList) {
    return el.classList.contains(className);
  }

  return !!el.className.match(new RegExp(("(\\s|^)" + className + "(\\s|$)")));
};

/**
 * Adds the provided css className to the element.
 */
var addClass$1 = function (el, className) {
  if (el.classList) {
    el.classList.add(className);
    return;
  }

  if (!hasClass(el, className)) {
    el.className += " " + className;
  }
};

/**
 * Remove the provided css className from the element.
 */
var removeClass$1 = function (el, className) {
  if (el.classList) {
    el.classList.remove(className);
    return;
  }

  if (hasClass(el, className)) {
    var reg = new RegExp(("(\\s|^)" + className + "(\\s|$)"));
    el.className = el.className.replace(reg, ' ');
  }
};

/**
 * Adds or removes a class name on the input depending on the status flag.
 */
var toggleClass = function (el, className, status) {
  if (!el || !className) { return; }

  if (Array.isArray(className)) {
    className.forEach(function (item) { return toggleClass(el, item, status); });
    return;
  }

  if (status) {
    return addClass$1(el, className);
  }

  removeClass$1(el, className);
};

/**
 * Converts an array-like object to array, provides a simple polyfill for Array.from
 */
var toArray$1 = function (arrayLike) {
  if (isCallable(Array.from)) {
    return Array.from(arrayLike);
  }

  var array = [];
  var length = arrayLike.length;
  /* istanbul ignore next */
  for (var i = 0; i < length; i++) {
    array.push(arrayLike[i]);
  }

  /* istanbul ignore next */
  return array;
};

/**
 * Converts an array-like object to array and place other elements in an array
 */
var ensureArray = function (arrayLike) {
  if (Array.isArray(arrayLike)) {
    return [].concat( arrayLike );
  }
  var array = toArray$1(arrayLike);
  return isEmptyArray(array) ? [arrayLike] : array;
};

/**
 * Assign polyfill from the mdn.
 */
var assign = function (target) {
  var others = [], len = arguments.length - 1;
  while ( len-- > 0 ) others[ len ] = arguments[ len + 1 ];

  /* istanbul ignore else */
  if (isCallable(Object.assign)) {
    return Object.assign.apply(Object, [ target ].concat( others ));
  }

  /* istanbul ignore next */
  if (target == null) {
    throw new TypeError('Cannot convert undefined or null to object');
  }

  /* istanbul ignore next */
  var to = Object(target);
  /* istanbul ignore next */
  others.forEach(function (arg) {
    // Skip over if undefined or null
    if (arg != null) {
      Object.keys(arg).forEach(function (key) {
        to[key] = arg[key];
      });
    }
  });
  /* istanbul ignore next */
  return to;
};

var id = 0;
var idTemplate = '{id}';

/**
 * Generates a unique id.
 */
var uniqId = function () {
  // handle too many uses of uniqId, although unlikely.
  if (id >= 9999) {
    id = 0;
    // shift the template.
    idTemplate = idTemplate.replace('{id}', '_{id}');
  }

  id++;
  var newId = idTemplate.replace('{id}', String(id));

  return newId;
};

var findIndex = function (arrayLike, predicate) {
  var array = Array.isArray(arrayLike) ? arrayLike : toArray$1(arrayLike);
  for (var i = 0; i < array.length; i++) {
    if (predicate(array[i])) {
      return i;
    }
  }

  return -1;
};

/**
 * finds the first element that satisfies the predicate callback, polyfills array.find
 */
var find = function (arrayLike, predicate) {
  var array = Array.isArray(arrayLike) ? arrayLike : toArray$1(arrayLike);
  var idx = findIndex(array, predicate);

  return idx === -1 ? undefined : array[idx];
};

var isBuiltInComponent = function (vnode) {
  if (!vnode) {
    return false;
  }

  var tag = vnode.componentOptions.tag;

  return /^(keep-alive|transition|transition-group)$/.test(tag);
};

var makeDelayObject = function (events, delay, delayConfig) {
  if (typeof delay === 'number') {
    return events.reduce(function (prev, e) {
      prev[e] = delay;
      return prev;
    }, {});
  }

  return events.reduce(function (prev, e) {
    if (typeof delay === 'object' && e in delay) {
      prev[e] = delay[e];
      return prev;
    }

    if (typeof delayConfig === 'number') {
      prev[e] = delayConfig;
      return prev;
    }

    prev[e] = (delayConfig && delayConfig[e]) || 0;

    return prev;
  }, {});
};

var deepParseInt = function (input) {
  if (typeof input === 'number') { return input; }

  if (typeof input === 'string') { return parseInt(input); }

  var map = {};
  for (var element in input) {
    map[element] = parseInt(input[element]);
  }

  return map;
};

var merge = function (target, source) {
  if (! (isObject$1(target) && isObject$1(source))) {
    return target;
  }

  Object.keys(source).forEach(function (key) {
    var obj, obj$1;

    if (isObject$1(source[key])) {
      if (! target[key]) {
        assign(target, ( obj = {}, obj[key] = {}, obj));
      }

      merge(target[key], source[key]);
      return;
    }

    assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1));
  });

  return target;
};

var fillRulesFromElement = function (el, rules) {
  if (el.required) {
    rules = appendRule('required', rules);
  }

  if (isTextInput(el)) {
    if (el.type === 'email') {
      rules = appendRule(("email" + (el.multiple ? ':multiple' : '')), rules);
    }

    if (el.pattern) {
      rules = appendRule({ regex: el.pattern }, rules);
    }

    // 524288 is the max on some browsers and test environments.
    if (el.maxLength >= 0 && el.maxLength < 524288) {
      rules = appendRule(("max:" + (el.maxLength)), rules);
    }

    if (el.minLength > 0) {
      rules = appendRule(("min:" + (el.minLength)), rules);
    }

    if (el.type === 'number') {
      rules = appendRule('decimal', rules);
      if (el.min !== '') {
        rules = appendRule(("min_value:" + (el.min)), rules);
      }

      if (el.max !== '') {
        rules = appendRule(("max_value:" + (el.max)), rules);
      }
    }

    return rules;
  }

  if (isDateInput(el)) {
    var timeFormat = el.step && Number(el.step) < 60 ? 'HH:mm:ss' : 'HH:mm';

    if (el.type === 'date') {
      return appendRule('date_format:yyyy-MM-dd', rules);
    }

    if (el.type === 'datetime-local') {
      return appendRule(("date_format:yyyy-MM-ddT" + timeFormat), rules);
    }

    if (el.type === 'month') {
      return appendRule('date_format:yyyy-MM', rules);
    }

    if (el.type === 'week') {
      return appendRule('date_format:yyyy-[W]WW', rules);
    }

    if (el.type === 'time') {
      return appendRule(("date_format:" + timeFormat), rules);
    }
  }

  return rules;
};

var values = function (obj) {
  if (isCallable(Object.values)) {
    return Object.values(obj);
  }

  // fallback to keys()
  /* istanbul ignore next */
  return Object.keys(obj).map(function (k) { return obj[k]; });
};

var parseSelector = function (selector) {
  var rule = null;
  if (includes(selector, ':')) {
    rule = selector.split(':').pop();
    selector = selector.replace((":" + rule), '');
  }

  if (selector[0] === '#') {
    return {
      id: selector.slice(1),
      rule: rule,
      name: null,
      scope: null
    };
  }

  var scope = null;
  var name = selector;
  if (includes(selector, '.')) {
    var parts = selector.split('.');
    scope = parts[0];
    name = parts.slice(1).join('.');
  }

  return {
    id: null,
    scope: scope,
    name: name,
    rule: rule
  };
};

var includes = function (collection, item) {
  return collection.indexOf(item) !== -1;
};

var isEmptyArray = function (arr) {
  return Array.isArray(arr) && arr.length === 0;
};

var defineNonReactive = function (obj, prop, value) {
  Object.defineProperty(obj, prop, {
    configurable: false,
    writable: true,
    value: value
  });
};

// 

var LOCALE = 'en';

var Dictionary = function Dictionary (dictionary) {
  if ( dictionary === void 0 ) dictionary = {};

  this.container = {};
  this.merge(dictionary);
};

var prototypeAccessors$1 = { locale: { configurable: true } };

prototypeAccessors$1.locale.get = function () {
  return LOCALE;
};

prototypeAccessors$1.locale.set = function (value) {
  LOCALE = value || 'en';
};

Dictionary.prototype.hasLocale = function hasLocale (locale) {
  return !!this.container[locale];
};

Dictionary.prototype.setDateFormat = function setDateFormat (locale, format) {
  if (!this.container[locale]) {
    this.container[locale] = {};
  }

  this.container[locale].dateFormat = format;
};

Dictionary.prototype.getDateFormat = function getDateFormat (locale) {
  if (!this.container[locale] || !this.container[locale].dateFormat) {
    return null;
  }

  return this.container[locale].dateFormat;
};

Dictionary.prototype.getMessage = function getMessage (locale, key, data) {
  var message = null;
  if (!this.hasMessage(locale, key)) {
    message = this._getDefaultMessage(locale);
  } else {
    message = this.container[locale].messages[key];
  }

  return isCallable(message) ? message.apply(void 0, data) : message;
};

/**
 * Gets a specific message for field. falls back to the rule message.
 */
Dictionary.prototype.getFieldMessage = function getFieldMessage (locale, field, key, data) {
  if (!this.hasLocale(locale)) {
    return this.getMessage(locale, key, data);
  }

  var dict = this.container[locale].custom && this.container[locale].custom[field];
  if (!dict || !dict[key]) {
    return this.getMessage(locale, key, data);
  }

  var message = dict[key];
  return isCallable(message) ? message.apply(void 0, data) : message;
};

Dictionary.prototype._getDefaultMessage = function _getDefaultMessage (locale) {
  if (this.hasMessage(locale, '_default')) {
    return this.container[locale].messages._default;
  }

  return this.container.en.messages._default;
};

Dictionary.prototype.getAttribute = function getAttribute (locale, key, fallback) {
    if ( fallback === void 0 ) fallback = '';

  if (!this.hasAttribute(locale, key)) {
    return fallback;
  }

  return this.container[locale].attributes[key];
};

Dictionary.prototype.hasMessage = function hasMessage (locale, key) {
  return !! (
    this.hasLocale(locale) &&
          this.container[locale].messages &&
          this.container[locale].messages[key]
  );
};

Dictionary.prototype.hasAttribute = function hasAttribute (locale, key) {
  return !! (
    this.hasLocale(locale) &&
          this.container[locale].attributes &&
          this.container[locale].attributes[key]
  );
};

Dictionary.prototype.merge = function merge$1 (dictionary) {
  merge(this.container, dictionary);
};

Dictionary.prototype.setMessage = function setMessage (locale, key, message) {
  if (! this.hasLocale(locale)) {
    this.container[locale] = {
      messages: {},
      attributes: {}
    };
  }
    
  if (!this.container[locale].messages) {
    this.container[locale].messages = {};
  }

  this.container[locale].messages[key] = message;
};

Dictionary.prototype.setAttribute = function setAttribute (locale, key, attribute) {
  if (! this.hasLocale(locale)) {
    this.container[locale] = {
      messages: {},
      attributes: {}
    };
  }

  this.container[locale].attributes[key] = attribute;
};

Object.defineProperties( Dictionary.prototype, prototypeAccessors$1 );

var drivers = {
  default: new Dictionary({
    en: {
      messages: {},
      attributes: {},
      custom: {}
    }
  })
};

var currentDriver = 'default';

var DictionaryResolver = function DictionaryResolver () {};

DictionaryResolver._checkDriverName = function _checkDriverName (driver) {
  if (!driver) {
    throw createError('you must provide a name to the dictionary driver');
  }
};

DictionaryResolver.setDriver = function setDriver (driver, implementation) {
    if ( implementation === void 0 ) implementation = null;

  this._checkDriverName(driver);
  if (implementation) {
    drivers[driver] = implementation;
  }

  currentDriver = driver;
};

DictionaryResolver.getDriver = function getDriver () {
  return drivers[currentDriver];
};

// 

var ErrorBag = function ErrorBag (errorBag, id) {
  if ( errorBag === void 0 ) errorBag = null;
  if ( id === void 0 ) id = null;

  this.vmId = id || null;
  // make this bag a mirror of the provided one, sharing the same items reference.
  if (errorBag && errorBag instanceof ErrorBag) {
    this.items = errorBag.items;
  } else {
    this.items = [];
  }
};

ErrorBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
    var this$1 = this;

  var index = 0;
  return {
    next: function () {
      return { value: this$1.items[index++], done: index > this$1.items.length };
    }
  };
};

/**
 * Adds an error to the internal array.
 */
ErrorBag.prototype.add = function add (error) {
    var ref;

  (ref = this.items).push.apply(
    ref, this._normalizeError(error)
  );
};

/**
 * Normalizes passed errors to an error array.
 */
ErrorBag.prototype._normalizeError = function _normalizeError (error) {
    var this$1 = this;

  if (Array.isArray(error)) {
    return error.map(function (e) {
      e.scope = !isNullOrUndefined(e.scope) ? e.scope : null;
      e.vmId = !isNullOrUndefined(e.vmId) ? e.vmId : (this$1.vmId || null);

      return e;
    });
  }

  error.scope = !isNullOrUndefined(error.scope) ? error.scope : null;
  error.vmId = !isNullOrUndefined(error.vmId) ? error.vmId : (this.vmId || null);

  return [error];
};

/**
 * Regenrates error messages if they have a generator function.
 */
ErrorBag.prototype.regenerate = function regenerate () {
  this.items.forEach(function (i) {
    i.msg = isCallable(i.regenerate) ? i.regenerate() : i.msg;
  });
};

/**
 * Updates a field error with the new field scope.
 */
ErrorBag.prototype.update = function update (id, error) {
  var item = find(this.items, function (i) { return i.id === id; });
  if (!item) {
    return;
  }

  var idx = this.items.indexOf(item);
  this.items.splice(idx, 1);
  item.scope = error.scope;
  this.items.push(item);
};

/**
 * Gets all error messages from the internal array.
 */
ErrorBag.prototype.all = function all (scope) {
    var this$1 = this;

  var filterFn = function (item) {
    var matchesScope = true;
    var matchesVM = true;
    if (!isNullOrUndefined(scope)) {
      matchesScope = item.scope === scope;
    }

    if (!isNullOrUndefined(this$1.vmId)) {
      matchesVM = item.vmId === this$1.vmId;
    }

    return matchesVM && matchesScope;
  };

  return this.items.filter(filterFn).map(function (e) { return e.msg; });
};

/**
 * Checks if there are any errors in the internal array.
 */
ErrorBag.prototype.any = function any (scope) {
    var this$1 = this;

  var filterFn = function (item) {
    var matchesScope = true;
    var matchesVM = true;
    if (!isNullOrUndefined(scope)) {
      matchesScope = item.scope === scope;
    }

    if (!isNullOrUndefined(this$1.vmId)) {
      matchesVM = item.vmId === this$1.vmId;
    }

    return matchesVM && matchesScope;
  };

  return !!this.items.filter(filterFn).length;
};

/**
 * Removes all items from the internal array.
 */
ErrorBag.prototype.clear = function clear (scope) {
    var this$1 = this;

  var matchesVM = isNullOrUndefined(this.vmId) ? function () { return true; } : function (i) { return i.vmId === this$1.vmId; };
  var matchesScope = function (i) { return i.scope === scope; };
  if (arguments.length === 0) {
    matchesScope = function () { return true; };
  } else if (isNullOrUndefined(scope)) {
    scope = null;
  }

  for (var i = 0; i < this.items.length; ++i) {
    if (matchesVM(this.items[i]) && matchesScope(this.items[i])) {
      this.items.splice(i, 1);
      --i;
    }
  }
};

/**
 * Collects errors into groups or for a specific field.
 */
ErrorBag.prototype.collect = function collect (field, scope, map) {
    var this$1 = this;
    if ( map === void 0 ) map = true;

  var isSingleField = !isNullOrUndefined(field) && !field.includes('*');
  var groupErrors = function (items) {
    var errors = items.reduce(function (collection, error) {
      if (!isNullOrUndefined(this$1.vmId) && error.vmId !== this$1.vmId) {
        return collection;
      }

      if (!collection[error.field]) {
        collection[error.field] = [];
      }

      collection[error.field].push(map ? error.msg : error);

      return collection;
    }, {});

    // reduce the collection to be a single array.
    if (isSingleField) {
      return values(errors)[0] || [];
    }

    return errors;
  };

  if (isNullOrUndefined(field)) {
    return groupErrors(this.items);
  }

  var selector = isNullOrUndefined(scope) ? String(field) : (scope + "." + field);
  var ref = this._makeCandidateFilters(selector);
    var isPrimary = ref.isPrimary;
    var isAlt = ref.isAlt;

  var collected = this.items.reduce(function (prev, curr) {
    if (isPrimary(curr)) {
      prev.primary.push(curr);
    }

    if (isAlt(curr)) {
      prev.alt.push(curr);
    }

    return prev;
  }, { primary: [], alt: [] });

  collected = collected.primary.length ? collected.primary : collected.alt;

  return groupErrors(collected);
};

/**
 * Gets the internal array length.
 */
ErrorBag.prototype.count = function count () {
    var this$1 = this;

  if (this.vmId) {
    return this.items.filter(function (e) { return e.vmId === this$1.vmId; }).length;
  }

  return this.items.length;
};

/**
 * Finds and fetches the first error message for the specified field id.
 */
ErrorBag.prototype.firstById = function firstById (id) {
  var error = find(this.items, function (i) { return i.id === id; });

  return error ? error.msg : undefined;
};

/**
 * Gets the first error message for a specific field.
 */
ErrorBag.prototype.first = function first (field, scope) {
    if ( scope === void 0 ) scope = null;

  var selector = isNullOrUndefined(scope) ? field : (scope + "." + field);
  var match = this._match(selector);

  return match && match.msg;
};

/**
 * Returns the first error rule for the specified field
 */
ErrorBag.prototype.firstRule = function firstRule (field, scope) {
  var errors = this.collect(field, scope, false);

  return (errors.length && errors[0].rule) || undefined;
};

/**
 * Checks if the internal array has at least one error for the specified field.
 */
ErrorBag.prototype.has = function has (field, scope) {
    if ( scope === void 0 ) scope = null;

  return !!this.first(field, scope);
};

/**
 * Gets the first error message for a specific field and a rule.
 */
ErrorBag.prototype.firstByRule = function firstByRule (name, rule, scope) {
    if ( scope === void 0 ) scope = null;

  var error = this.collect(name, scope, false).filter(function (e) { return e.rule === rule; })[0];

  return (error && error.msg) || undefined;
};

/**
 * Gets the first error message for a specific field that not match the rule.
 */
ErrorBag.prototype.firstNot = function firstNot (name, rule, scope) {
    if ( rule === void 0 ) rule = 'required';
    if ( scope === void 0 ) scope = null;

  var error = this.collect(name, scope, false).filter(function (e) { return e.rule !== rule; })[0];

  return (error && error.msg) || undefined;
};

/**
 * Removes errors by matching against the id or ids.
 */
ErrorBag.prototype.removeById = function removeById (id) {
  var condition = function (item) { return item.id === id; };
  if (Array.isArray(id)) {
    condition = function (item) { return id.indexOf(item.id) !== -1; };
  }

  for (var i = 0; i < this.items.length; ++i) {
    if (condition(this.items[i])) {
      this.items.splice(i, 1);
      --i;
    }
  }
};

/**
 * Removes all error messages associated with a specific field.
 */
ErrorBag.prototype.remove = function remove (field, scope, vmId) {
  if (isNullOrUndefined(field)) {
    return;
  }

  var selector = isNullOrUndefined(scope) ? String(field) : (scope + "." + field);
  var ref = this._makeCandidateFilters(selector);
    var isPrimary = ref.isPrimary;
    var isAlt = ref.isAlt;
  var matches = function (item) { return isPrimary(item) || isAlt(item); };
  var shouldRemove = function (item) {
    if (isNullOrUndefined(vmId)) { return matches(item); }

    return matches(item) && item.vmId === vmId;
  };

  for (var i = 0; i < this.items.length; ++i) {
    if (shouldRemove(this.items[i])) {
      this.items.splice(i, 1);
      --i;
    }
  }
};

ErrorBag.prototype._makeCandidateFilters = function _makeCandidateFilters (selector) {
    var this$1 = this;

  var matchesRule = function () { return true; };
  var matchesScope = function () { return true; };
  var matchesName = function () { return true; };
  var matchesVM = function () { return true; };

  var ref = parseSelector(selector);
    var id = ref.id;
    var rule = ref.rule;
    var scope = ref.scope;
    var name = ref.name;

  if (rule) {
    matchesRule = function (item) { return item.rule === rule; };
  }

  // match by id, can be combined with rule selection.
  if (id) {
    return {
      isPrimary: function (item) { return matchesRule(item) && (function (item) { return id === item.id; }); },
      isAlt: function () { return false; }
    };
  }

  if (isNullOrUndefined(scope)) {
    // if no scope specified, make sure the found error has no scope.
    matchesScope = function (item) { return isNullOrUndefined(item.scope); };
  } else {
    matchesScope = function (item) { return item.scope === scope; };
  }

  if (!isNullOrUndefined(name) && name !== '*') {
    matchesName = function (item) { return item.field === name; };
  }

  if (!isNullOrUndefined(this.vmId)) {
    matchesVM = function (item) { return item.vmId === this$1.vmId; };
  }

  // matches the first candidate.
  var isPrimary = function (item) {
    return matchesVM(item) && matchesName(item) && matchesRule(item) && matchesScope(item);
  };

  // matches a second candidate, which is a field with a name containing the '.' character.
  var isAlt = function (item) {
    return matchesVM(item) && matchesRule(item) && item.field === (scope + "." + name);
  };

  return {
    isPrimary: isPrimary,
    isAlt: isAlt
  };
};

ErrorBag.prototype._match = function _match (selector) {
  if (isNullOrUndefined(selector)) {
    return undefined;
  }

  var ref = this._makeCandidateFilters(selector);
    var isPrimary = ref.isPrimary;
    var isAlt = ref.isAlt;

  return this.items.reduce(function (prev, item, idx, arr) {
    var isLast = idx === arr.length - 1;
    if (prev.primary) {
      return isLast ? prev.primary : prev;
    }

    if (isPrimary(item)) {
      prev.primary = item;
    }

    if (isAlt(item)) {
      prev.alt = item;
    }

    // keep going.
    if (!isLast) {
      return prev;
    }

    return prev.primary || prev.alt;
  }, {});
};

var DEFAULT_CONFIG = {
  locale: 'en',
  delay: 0,
  errorBagName: 'errors',
  dictionary: null,
  fieldsBagName: 'fields',
  classes: false,
  classNames: null,
  events: 'input',
  inject: true,
  fastExit: true,
  aria: true,
  validity: false,
  mode: 'aggressive',
  useConstraintAttrs: true,
  i18n: null,
  i18nRootKey: 'validation'
};

var currentConfig = assign({}, DEFAULT_CONFIG);

var resolveConfig = function (ctx) {
  var selfConfig = getPath('$options.$_veeValidate', ctx, {});

  return assign({}, currentConfig, selfConfig);
};

var getConfig = function () { return currentConfig; };

var setConfig = function (newConf) {
  currentConfig = assign({}, currentConfig, newConf);
};

// VNode Utils

// Gets the model object on the vnode.
function findModel (vnode) {
  if (!vnode.data) {
    return null;
  }

  // Component Model
  if (vnode.data.model) {
    return vnode.data.model;
  }

  return !!(vnode.data.directives) && find(vnode.data.directives, function (d) { return d.name === 'model'; });
}

function extractChildren (vnode) {
  if (Array.isArray(vnode)) {
    return vnode;
  }

  if (Array.isArray(vnode.children)) {
    return vnode.children;
  }

  if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {
    return vnode.componentOptions.children;
  }

  return [];
}

function extractVNodes (vnode) {
  if (findModel(vnode)) {
    return [vnode];
  }

  var children = extractChildren(vnode);

  return children.reduce(function (nodes, node) {
    var candidates = extractVNodes(node);
    if (candidates.length) {
      nodes.push.apply(nodes, candidates);
    }

    return nodes;
  }, []);
}

// Resolves v-model config if exists.
function findModelConfig (vnode) {
  if (!vnode.componentOptions) { return null; }

  return vnode.componentOptions.Ctor.options.model;
}
// Adds a listener to vnode listener object.
function mergeVNodeListeners (obj, eventName, handler) {
  // Has a single listener, convert to array.
  if (isCallable(obj[eventName])) {
    var prevHandler = obj[eventName];
    obj[eventName] = [prevHandler];
  }

  // no listeners, create the array.
  if (isNullOrUndefined(obj[eventName])) {
    obj[eventName] = [];
  }

  obj[eventName].push(handler);
}

// Adds a listener to a native HTML vnode.
function addNativeNodeListener (node, eventName, handler) {
  if (isNullOrUndefined(node.data.on)) {
    node.data.on = {};
  }

  mergeVNodeListeners(node.data.on, eventName, handler);
}

// Adds a listener to a Vue component vnode.
function addComponentNodeListener (node, eventName, handler) {
  /* istanbul ignore next */
  if (!node.componentOptions.listeners) {
    node.componentOptions.listeners = {};
  }

  mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);
}
function addVNodeListener (vnode, eventName, handler) {
  if (vnode.componentOptions) {
    addComponentNodeListener(vnode, eventName, handler);
    return;
  }

  addNativeNodeListener(vnode, eventName, handler);
}
// Determines if `change` should be used over `input` for listeners.
function getInputEventName (vnode, model) {
  // Is a component.
  if (vnode.componentOptions) {
    var ref = findModelConfig(vnode) || { event: 'input' };
    var event = ref.event;

    return event;
  }

  // Lazy Models and select tag typically use change event
  if ((model && model.modifiers && model.modifiers.lazy) || vnode.tag === 'select') {
    return 'change';
  }

  // is a textual-type input.
  if (vnode.data.attrs && isTextInput({ type: vnode.data.attrs.type || 'text' })) {
    return 'input';
  }

  return 'change';
}

function normalizeSlots (slots, ctx) {
  return Object.keys(slots).reduce(function (arr, key) {
    slots[key].forEach(function (vnode) {
      if (!vnode.context) {
        slots[key].context = ctx;
        if (!vnode.data) {
          vnode.data = {};
        }
        vnode.data.slot = key;
      }
    });

    return arr.concat(slots[key]);
  }, []);
}
function createRenderless (h, children) {
  // Only render the first item of the node.
  if (Array.isArray(children) && children[0]) {
    return children[0];
  }

  // a single node.
  if (children) {
    return children;
  }

  // No slots, render nothing.
  return h();
}

/**
 * Generates the options required to construct a field.
 */
var Resolver = function Resolver () {};

Resolver.generate = function generate (el, binding, vnode) {
  var model = Resolver.resolveModel(binding, vnode);
  var options = resolveConfig(vnode.context);

  return {
    name: Resolver.resolveName(el, vnode),
    el: el,
    listen: !binding.modifiers.disable,
    bails: binding.modifiers.bails ? true : (binding.modifiers.continues === true ? false : undefined),
    scope: Resolver.resolveScope(el, binding, vnode),
    vm: vnode.context,
    expression: binding.value,
    component: vnode.componentInstance,
    classes: options.classes,
    classNames: options.classNames,
    getter: Resolver.resolveGetter(el, vnode, model),
    events: Resolver.resolveEvents(el, vnode) || options.events,
    model: model,
    delay: Resolver.resolveDelay(el, vnode, options),
    rules: Resolver.resolveRules(el, binding, vnode),
    immediate: !!binding.modifiers.initial || !!binding.modifiers.immediate,
    persist: !!binding.modifiers.persist,
    validity: options.validity && !vnode.componentInstance,
    aria: options.aria && !vnode.componentInstance,
    initialValue: Resolver.resolveInitialValue(vnode)
  };
};

Resolver.getCtorConfig = function getCtorConfig (vnode) {
  if (!vnode.componentInstance) { return null; }

  var config = getPath('componentInstance.$options.$_veeValidate', vnode);

  return config;
};

/**
 * Resolves the rules defined on an element.
 */
Resolver.resolveRules = function resolveRules (el, binding, vnode) {
  var rules = '';
  if (!binding.value && (!binding || !binding.expression)) {
    rules = getDataAttribute(el, 'rules');
  }

  if (binding.value && includes(['string', 'object'], typeof binding.value.rules)) {
    rules = binding.value.rules;
  } else if (binding.value) {
    rules = binding.value;
  }

  if (vnode.componentInstance) {
    return rules;
  }

  // If validity is disabled, ignore field rules.
  var normalized = normalizeRules(rules);
  if (!getConfig().useConstraintAttrs) {
    return normalized;
  }

  return assign({}, fillRulesFromElement(el, {}), normalized);
};

/**
 * @param {*} vnode
 */
Resolver.resolveInitialValue = function resolveInitialValue (vnode) {
  var model = vnode.data.model || find(vnode.data.directives, function (d) { return d.name === 'model'; });

  return model && model.value;
};

/**
 * Resolves the delay value.
 * @param {*} el
 * @param {*} vnode
 * @param {Object} options
 */
Resolver.resolveDelay = function resolveDelay (el, vnode, options) {
  var delay = getDataAttribute(el, 'delay');
  var globalDelay = (options && 'delay' in options) ? options.delay : 0;

  if (!delay && vnode.componentInstance && vnode.componentInstance.$attrs) {
    delay = vnode.componentInstance.$attrs['data-vv-delay'];
  }

  if (!isObject$1(globalDelay)) {
    return deepParseInt(delay || globalDelay);
  }

  if (!isNullOrUndefined(delay)) {
    globalDelay.input = delay;
  }

  return deepParseInt(globalDelay);
};

/**
 * Resolves the events to validate in response to.
 * @param {*} el
 * @param {*} vnode
 */
Resolver.resolveEvents = function resolveEvents (el, vnode) {
  // resolve it from the root element.
  var events = getDataAttribute(el, 'validate-on');

  // resolve from data-vv-validate-on if its a vue component.
  if (!events && vnode.componentInstance && vnode.componentInstance.$attrs) {
    events = vnode.componentInstance.$attrs['data-vv-validate-on'];
  }

  // resolve it from $_veeValidate options.
  if (!events && vnode.componentInstance) {
    var config = Resolver.getCtorConfig(vnode);
    events = config && config.events;
  }

  if (!events && getConfig().events) {
    events = getConfig().events;
  }

  // resolve the model event if its configured for custom components.
  if (events && vnode.componentInstance && includes(events, 'input')) {
    var ref = vnode.componentInstance.$options.model || { event: 'input' };
      var event = ref.event;
    // if the prop was configured but not the model.
    if (!event) {
      return events;
    }

    events = events.replace('input', event);
  }

  return events;
};

/**
 * Resolves the scope for the field.
 * @param {*} el
 * @param {*} binding
 */
Resolver.resolveScope = function resolveScope (el, binding, vnode) {
    if ( vnode === void 0 ) vnode = {};

  var scope = null;
  if (vnode.componentInstance && isNullOrUndefined(scope)) {
    scope = vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-scope'];
  }

  return !isNullOrUndefined(scope) ? scope : getScope(el);
};

/**
 * Checks if the node directives contains a v-model or a specified arg.
 * Args take priority over models.
 *
 * @return {Object}
 */
Resolver.resolveModel = function resolveModel (binding, vnode) {
  if (binding.arg) {
    return { expression: binding.arg };
  }

  var model = findModel(vnode);
  if (!model) {
    return null;
  }

  // https://github.com/vuejs/vue/blob/dev/src/core/util/lang.js#L26
  var watchable = !/[^\w.$]/.test(model.expression) && hasPath(model.expression, vnode.context);
  var lazy = !!(model.modifiers && model.modifiers.lazy);

  if (!watchable) {
    return { expression: null, lazy: lazy };
  }

  return { expression: model.expression, lazy: lazy };
};

/**
 * Resolves the field name to trigger validations.
 * @return {String} The field name.
 */
Resolver.resolveName = function resolveName (el, vnode) {
  var name = getDataAttribute(el, 'name');

  if (!name && !vnode.componentInstance) {
    return el.name;
  }

  if (!name && vnode.componentInstance && vnode.componentInstance.$attrs) {
    name = vnode.componentInstance.$attrs['data-vv-name'] || vnode.componentInstance.$attrs['name'];
  }

  if (!name && vnode.componentInstance) {
    var config = Resolver.getCtorConfig(vnode);
    if (config && isCallable(config.name)) {
      var boundGetter = config.name.bind(vnode.componentInstance);

      return boundGetter();
    }

    return vnode.componentInstance.name;
  }

  return name;
};

/**
 * Returns a value getter input type.
 */
Resolver.resolveGetter = function resolveGetter (el, vnode, model) {
  if (model && model.expression) {
    return function () {
      return getPath(model.expression, vnode.context);
    };
  }

  if (vnode.componentInstance) {
    var path = getDataAttribute(el, 'value-path') || (vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-value-path']);
    if (path) {
      return function () {
        return getPath(path, vnode.componentInstance);
      };
    }

    var config = Resolver.getCtorConfig(vnode);
    if (config && isCallable(config.value)) {
      var boundGetter = config.value.bind(vnode.componentInstance);

      return function () {
        return boundGetter();
      };
    }

    var ref = vnode.componentInstance.$options.model || { prop: 'value' };
      var prop = ref.prop;

    return function () {
      return vnode.componentInstance[prop];
    };
  }

  switch (el.type) {
  case 'checkbox': return function () {
    var els = document.querySelectorAll(("input[name=\"" + (el.name) + "\"]"));

    els = toArray$1(els).filter(function (el) { return el.checked; });
    if (!els.length) { return undefined; }

    return els.map(function (checkbox) { return checkbox.value; });
  };
  case 'radio': return function () {
    var els = document.querySelectorAll(("input[name=\"" + (el.name) + "\"]"));
    var elm = find(els, function (el) { return el.checked; });

    return elm && elm.value;
  };
  case 'file': return function (context) {
    return toArray$1(el.files);
  };
  case 'select-multiple': return function () {
    return toArray$1(el.options).filter(function (opt) { return opt.selected; }).map(function (opt) { return opt.value; });
  };
  default: return function () {
    return el && el.value;
  };
  }
};

var RULES = {};

var RuleContainer = function RuleContainer () {};

var staticAccessors = { rules: { configurable: true } };

RuleContainer.add = function add (name, ref) {
    var validate = ref.validate;
    var options = ref.options;
    var paramNames = ref.paramNames;

  RULES[name] = {
    validate: validate,
    options: options,
    paramNames: paramNames
  };
};

staticAccessors.rules.get = function () {
  return RULES;
};

RuleContainer.has = function has (name) {
  return !!RULES[name];
};

RuleContainer.isImmediate = function isImmediate (name) {
  return !!(RULES[name] && RULES[name].options.immediate);
};

RuleContainer.isRequireRule = function isRequireRule (name) {
  return !!(RULES[name] && RULES[name].options.computesRequired);
};

RuleContainer.isTargetRule = function isTargetRule (name) {
  return !!(RULES[name] && RULES[name].options.hasTarget);
};

RuleContainer.remove = function remove (ruleName) {
  delete RULES[ruleName];
};

RuleContainer.getParamNames = function getParamNames (ruleName) {
  return RULES[ruleName] && RULES[ruleName].paramNames;
};

RuleContainer.getOptions = function getOptions (ruleName) {
  return RULES[ruleName] && RULES[ruleName].options;
};

RuleContainer.getValidatorMethod = function getValidatorMethod (ruleName) {
  return RULES[ruleName] ? RULES[ruleName].validate : null;
};

Object.defineProperties( RuleContainer, staticAccessors );

// 

var isEvent = function (evt) {
  return (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) || (evt && evt.srcElement);
};

var normalizeEvents$1 = function (evts) {
  if (!evts) { return []; }

  return (typeof evts === 'string' ? evts.split('|') : evts);
};

var supportsPassive$1 = true;

var detectPassiveSupport = function () {
  try {
    var opts = Object.defineProperty({}, 'passive', {
      get: function get () {
        supportsPassive$1 = true;
      }
    });
    window.addEventListener('testPassive', null, opts);
    window.removeEventListener('testPassive', null, opts);
  } catch (e) {
    supportsPassive$1 = false;
  }
  return supportsPassive$1;
};

var addEventListener = function (el, eventName, cb) {
  el.addEventListener(eventName, cb, supportsPassive$1 ? { passive: true } : false);
};

// 

var DEFAULT_OPTIONS = {
  targetOf: null,
  immediate: false,
  persist: false,
  scope: null,
  listen: true,
  name: null,
  rules: {},
  vm: null,
  classes: false,
  validity: true,
  aria: true,
  events: 'input|blur',
  delay: 0,
  classNames: {
    touched: 'touched', // the control has been blurred
    untouched: 'untouched', // the control hasn't been blurred
    valid: 'valid', // model is valid
    invalid: 'invalid', // model is invalid
    pristine: 'pristine', // control has not been interacted with
    dirty: 'dirty' // control has been interacted with
  }
};

var Field = function Field (options) {
  if ( options === void 0 ) options = {};

  this.id = uniqId();
  this.el = options.el;
  this.updated = false;
  this.vmId = options.vmId;
  defineNonReactive(this, 'dependencies', []);
  defineNonReactive(this, 'watchers', []);
  defineNonReactive(this, 'events', []);
  this.delay = 0;
  this.rules = {};
  this.forceRequired = false;
  this._cacheId(options);
  this.classNames = assign({}, DEFAULT_OPTIONS.classNames);
  options = assign({}, DEFAULT_OPTIONS, options);
  this._delay = !isNullOrUndefined(options.delay) ? options.delay : 0; // cache initial delay
  this.validity = options.validity;
  this.aria = options.aria;
  this.flags = options.flags || createFlags();
  defineNonReactive(this, 'vm', options.vm);
  defineNonReactive(this, 'componentInstance', options.component);
  this.ctorConfig = this.componentInstance ? getPath('$options.$_veeValidate', this.componentInstance) : undefined;
  this.update(options);
  // set initial value.
  this.initialValue = this.value;
  this.updated = false;
};

var prototypeAccessors$1$1 = { validator: { configurable: true },isRequired: { configurable: true },isDisabled: { configurable: true },alias: { configurable: true },value: { configurable: true },bails: { configurable: true },rejectsFalse: { configurable: true } };

prototypeAccessors$1$1.validator.get = function () {
  if (!this.vm || !this.vm.$validator) {
    return { validate: function () { return Promise.resolve(true); } };
  }

  return this.vm.$validator;
};

prototypeAccessors$1$1.isRequired.get = function () {
  return !!this.rules.required || this.forceRequired;
};

prototypeAccessors$1$1.isDisabled.get = function () {
  return !!(this.el && this.el.disabled);
};

/**
 * Gets the display name (user-friendly name).
 */
prototypeAccessors$1$1.alias.get = function () {
  if (this._alias) {
    return this._alias;
  }

  var alias = null;
  if (this.ctorConfig && this.ctorConfig.alias) {
    alias = isCallable(this.ctorConfig.alias) ? this.ctorConfig.alias.call(this.componentInstance) : this.ctorConfig.alias;
  }

  if (!alias && this.el) {
    alias = getDataAttribute(this.el, 'as');
  }

  if (!alias && this.componentInstance) {
    return this.componentInstance.$attrs && this.componentInstance.$attrs['data-vv-as'];
  }

  return alias;
};

/**
 * Gets the input value.
 */

prototypeAccessors$1$1.value.get = function () {
  if (!isCallable(this.getter)) {
    return undefined;
  }

  return this.getter();
};

prototypeAccessors$1$1.bails.get = function () {
  return this._bails;
};

/**
 * If the field rejects false as a valid value for the required rule.
 */

prototypeAccessors$1$1.rejectsFalse.get = function () {
  if (this.componentInstance && this.ctorConfig) {
    return !!this.ctorConfig.rejectsFalse;
  }

  if (!this.el) {
    return false;
  }

  return this.el.type === 'checkbox';
};

/**
 * Determines if the instance matches the options provided.
 */
Field.prototype.matches = function matches (options) {
    var this$1 = this;

  if (!options) {
    return true;
  }

  if (options.id) {
    return this.id === options.id;
  }

  var matchesComponentId = isNullOrUndefined(options.vmId) ? function () { return true; } : function (id) { return id === this$1.vmId; };
  if (!matchesComponentId(options.vmId)) {
    return false;
  }

  if (options.name === undefined && options.scope === undefined) {
    return true;
  }

  if (options.scope === undefined) {
    return this.name === options.name;
  }

  if (options.name === undefined) {
    return this.scope === options.scope;
  }

  return options.name === this.name && options.scope === this.scope;
};

/**
 * Caches the field id.
 */
Field.prototype._cacheId = function _cacheId (options) {
  if (this.el && !options.targetOf) {
    this.el._veeValidateId = this.id;
  }
};

/**
 * Keeps a reference of the most current validation run.
 */
Field.prototype.waitFor = function waitFor (pendingPromise) {
  this._waitingFor = pendingPromise;
};

Field.prototype.isWaitingFor = function isWaitingFor (promise) {
  return this._waitingFor === promise;
};

/**
 * Updates the field with changed data.
 */
Field.prototype.update = function update (options) {
    var this$1 = this;

  this.targetOf = options.targetOf || null;
  this.immediate = options.immediate || this.immediate || false;
  this.persist = options.persist || this.persist || false;

  // update errors scope if the field scope was changed.
  if (!isNullOrUndefined(options.scope) && options.scope !== this.scope && isCallable(this.validator.update)) {
    this.validator.update(this.id, { scope: options.scope });
  }
  this.scope = !isNullOrUndefined(options.scope) ? options.scope
    : !isNullOrUndefined(this.scope) ? this.scope : null;
  this.name = (!isNullOrUndefined(options.name) ? String(options.name) : options.name) || this.name || null;
  this.rules = options.rules !== undefined ? normalizeRules(options.rules) : this.rules;
  this._bails = options.bails !== undefined ? options.bails : this._bails;
  this.model = options.model || this.model;
  this.listen = options.listen !== undefined ? options.listen : this.listen;
  this.classes = (options.classes || this.classes || false) && !this.componentInstance;
  this.classNames = isObject$1(options.classNames) ? merge(this.classNames, options.classNames) : this.classNames;
  this.getter = isCallable(options.getter) ? options.getter : this.getter;
  this._alias = options.alias || this._alias;
  this.events = (options.events) ? normalizeEvents$1(options.events) : this.events;
  this.delay = makeDelayObject(this.events, options.delay || this.delay, this._delay);
  this.updateDependencies();
  this.addActionListeners();

  if ("development" !== 'production' && !this.name && !this.targetOf) {
    warn$1('A field is missing a "name" or "data-vv-name" attribute');
  }

  // update required flag flags
  if (options.rules !== undefined) {
    this.flags.required = this.isRequired;
  }

  if (Object.keys(options.rules || {}).length === 0 && this.updated) {
    var resetFlag = this.flags.validated;
    this.validator.validate(("#" + (this.id))).then(function () {
      this$1.flags.validated = resetFlag;
    });
  }

  // validate if it was validated before and field was updated and there was a rules mutation.
  if (this.flags.validated && options.rules !== undefined && this.updated) {
    this.validator.validate(("#" + (this.id)));
  }

  this.updated = true;
  this.addValueListeners();

  // no need to continue.
  if (!this.el) {
    return;
  }
  this.updateClasses();
  this.updateAriaAttrs();
};

/**
 * Resets field flags and errors.
 */
Field.prototype.reset = function reset () {
    var this$1 = this;

  if (this._cancellationToken) {
    this._cancellationToken.cancelled = true;
    delete this._cancellationToken;
  }

  var defaults = createFlags();
  Object.keys(this.flags).filter(function (flag) { return flag !== 'required'; }).forEach(function (flag) {
    this$1.flags[flag] = defaults[flag];
  });

  // update initial value
  this.initialValue = this.value;
  this.flags.changed = false;

  this.addValueListeners();
  this.addActionListeners();
  this.updateClasses(true);
  this.updateAriaAttrs();
  this.updateCustomValidity();
};

/**
 * Sets the flags and their negated counterparts, and updates the classes and re-adds action listeners.
 */
Field.prototype.setFlags = function setFlags (flags) {
    var this$1 = this;

  var negated = {
    pristine: 'dirty',
    dirty: 'pristine',
    valid: 'invalid',
    invalid: 'valid',
    touched: 'untouched',
    untouched: 'touched'
  };

  Object.keys(flags).forEach(function (flag) {
    this$1.flags[flag] = flags[flag];
    // if it has a negation and was not specified, set it as well.
    if (negated[flag] && flags[negated[flag]] === undefined) {
      this$1.flags[negated[flag]] = !flags[flag];
    }
  });

  if (
    flags.untouched !== undefined ||
    flags.touched !== undefined ||
    flags.dirty !== undefined ||
    flags.pristine !== undefined
  ) {
    this.addActionListeners();
  }
  this.updateClasses();
  this.updateAriaAttrs();
  this.updateCustomValidity();
};

/**
 * Determines if the field requires references to target fields.
*/
Field.prototype.updateDependencies = function updateDependencies () {
    var this$1 = this;

  // reset dependencies.
  this.dependencies.forEach(function (d) { return d.field.destroy(); });
  this.dependencies = [];

  // we get the selectors for each field.
  var fields = Object.keys(this.rules).reduce(function (prev, r) {
    if (RuleContainer.isTargetRule(r)) {
      prev.push({ selector: this$1.rules[r][0], name: r });
    }

    return prev;
  }, []);

  if (!fields.length || !this.vm || !this.vm.$el) { return; }

  // must be contained within the same component, so we use the vm root element constrain our dom search.
  fields.forEach(function (ref$1) {
      var selector = ref$1.selector;
      var name = ref$1.name;

    var ref = this$1.vm.$refs[selector];
    var el = Array.isArray(ref) ? ref[0] : ref;
    if (!el) {
      return;
    }

    var options = {
      vm: this$1.vm,
      classes: this$1.classes,
      classNames: this$1.classNames,
      delay: this$1.delay,
      scope: this$1.scope,
      events: this$1.events.join('|'),
      immediate: this$1.immediate,
      targetOf: this$1.id
    };

    // probably a component.
    if (isCallable(el.$watch)) {
      options.component = el;
      options.el = el.$el;
      options.getter = Resolver.resolveGetter(el.$el, el.$vnode);
    } else {
      options.el = el;
      options.getter = Resolver.resolveGetter(el, {});
    }

    this$1.dependencies.push({ name: name, field: new Field(options) });
  });
};

/**
 * Removes listeners.
 */
Field.prototype.unwatch = function unwatch (tag) {
    if ( tag === void 0 ) tag = null;

  if (!tag) {
    this.watchers.forEach(function (w) { return w.unwatch(); });
    this.watchers = [];
    return;
  }

  this.watchers.filter(function (w) { return tag.test(w.tag); }).forEach(function (w) { return w.unwatch(); });
  this.watchers = this.watchers.filter(function (w) { return !tag.test(w.tag); });
};

/**
 * Updates the element classes depending on each field flag status.
 */
Field.prototype.updateClasses = function updateClasses (isReset) {
    var this$1 = this;
    if ( isReset === void 0 ) isReset = false;

  if (!this.classes || this.isDisabled) { return; }
  var applyClasses = function (el) {
    toggleClass(el, this$1.classNames.dirty, this$1.flags.dirty);
    toggleClass(el, this$1.classNames.pristine, this$1.flags.pristine);
    toggleClass(el, this$1.classNames.touched, this$1.flags.touched);
    toggleClass(el, this$1.classNames.untouched, this$1.flags.untouched);

    // remove valid/invalid classes on reset.
    if (isReset) {
      toggleClass(el, this$1.classNames.valid, false);
      toggleClass(el, this$1.classNames.invalid, false);
    }

    // make sure we don't set any classes if the state is undetermined.
    if (!isNullOrUndefined(this$1.flags.valid) && this$1.flags.validated) {
      toggleClass(el, this$1.classNames.valid, this$1.flags.valid);
    }

    if (!isNullOrUndefined(this$1.flags.invalid) && this$1.flags.validated) {
      toggleClass(el, this$1.classNames.invalid, this$1.flags.invalid);
    }
  };

  if (!isCheckboxOrRadioInput(this.el)) {
    applyClasses(this.el);
    return;
  }

  var els = document.querySelectorAll(("input[name=\"" + (this.el.name) + "\"]"));
  toArray$1(els).forEach(applyClasses);
};

/**
 * Adds the listeners required for automatic classes and some flags.
 */
Field.prototype.addActionListeners = function addActionListeners () {
    var this$1 = this;

  // remove previous listeners.
  this.unwatch(/class/);

  if (!this.el) { return; }

  var onBlur = function () {
    this$1.flags.touched = true;
    this$1.flags.untouched = false;
    if (this$1.classes) {
      toggleClass(this$1.el, this$1.classNames.touched, true);
      toggleClass(this$1.el, this$1.classNames.untouched, false);
    }

    // only needed once.
    this$1.unwatch(/^class_blur$/);
  };

  var inputEvent = isTextInput(this.el) ? 'input' : 'change';
  var onInput = function () {
    this$1.flags.dirty = true;
    this$1.flags.pristine = false;
    if (this$1.classes) {
      toggleClass(this$1.el, this$1.classNames.pristine, false);
      toggleClass(this$1.el, this$1.classNames.dirty, true);
    }

    // only needed once.
    this$1.unwatch(/^class_input$/);
  };

  if (this.componentInstance && isCallable(this.componentInstance.$once)) {
    this.componentInstance.$once('input', onInput);
    this.componentInstance.$once('blur', onBlur);
    this.watchers.push({
      tag: 'class_input',
      unwatch: function () {
        this$1.componentInstance.$off('input', onInput);
      }
    });
    this.watchers.push({
      tag: 'class_blur',
      unwatch: function () {
        this$1.componentInstance.$off('blur', onBlur);
      }
    });
    return;
  }

  if (!this.el) { return; }

  addEventListener(this.el, inputEvent, onInput);
  // Checkboxes and radio buttons on Mac don't emit blur naturally, so we listen on click instead.
  var blurEvent = isCheckboxOrRadioInput(this.el) ? 'change' : 'blur';
  addEventListener(this.el, blurEvent, onBlur);
  this.watchers.push({
    tag: 'class_input',
    unwatch: function () {
      this$1.el.removeEventListener(inputEvent, onInput);
    }
  });

  this.watchers.push({
    tag: 'class_blur',
    unwatch: function () {
      this$1.el.removeEventListener(blurEvent, onBlur);
    }
  });
};

Field.prototype.checkValueChanged = function checkValueChanged () {
  // handle some people initialize the value to null, since text inputs have empty string value.
  if (this.initialValue === null && this.value === '' && isTextInput(this.el)) {
    return false;
  }

  return this.value !== this.initialValue;
};

/**
 * Determines the suitable primary event to listen for.
 */
Field.prototype._determineInputEvent = function _determineInputEvent () {
  // if its a custom component, use the customized model event or the input event.
  if (this.componentInstance) {
    return (this.componentInstance.$options.model && this.componentInstance.$options.model.event) || 'input';
  }

  if (this.model && this.model.lazy) {
    return 'change';
  }

  if (isTextInput(this.el)) {
    return 'input';
  }

  return 'change';
};

/**
 * Determines the list of events to listen to.
 */
Field.prototype._determineEventList = function _determineEventList (defaultInputEvent) {
    var this$1 = this;

  // if no event is configured, or it is a component or a text input then respect the user choice.
  if (!this.events.length || this.componentInstance || isTextInput(this.el)) {
    return [].concat( this.events ).map(function (evt) {
      if (evt === 'input' && this$1.model && this$1.model.lazy) {
        return 'change';
      }

      return evt;
    });
  }

  // force suitable event for non-text type fields.
  return this.events.map(function (e) {
    if (e === 'input') {
      return defaultInputEvent;
    }

    return e;
  });
};

/**
 * Adds the listeners required for validation.
 */
Field.prototype.addValueListeners = function addValueListeners () {
    var this$1 = this;

  this.unwatch(/^input_.+/);
  if (!this.listen || !this.el) { return; }

  var token = { cancelled: false };
  var fn = this.targetOf ? function () {
    var target = this$1.validator._resolveField(("#" + (this$1.targetOf)));
    if (target && target.flags.validated) {
      this$1.validator.validate(("#" + (this$1.targetOf)));
    }
  } : function () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

    // if its a DOM event, resolve the value, otherwise use the first parameter as the value.
    if (args.length === 0 || isEvent(args[0])) {
      args[0] = this$1.value;
    }

    this$1.flags.pending = true;
    this$1._cancellationToken = token;
    this$1.validator.validate(("#" + (this$1.id)), args[0]);
  };

  var inputEvent = this._determineInputEvent();
  var events = this._determineEventList(inputEvent);

  // if on input validation is requested.
  if (includes(events, inputEvent)) {
    var ctx = null;
    var expression = null;
    var watchCtxVm = false;
    // if its watchable from the context vm.
    if (this.model && this.model.expression) {
      ctx = this.vm;
      expression = this.model.expression;
      watchCtxVm = true;
    }

    // watch it from the custom component vm instead.
    if (!expression && this.componentInstance && this.componentInstance.$options.model) {
      ctx = this.componentInstance;
      expression = this.componentInstance.$options.model.prop || 'value';
    }

    if (ctx && expression) {
      var debouncedFn = debounce(fn, this.delay[inputEvent], token);
      var unwatch = ctx.$watch(expression, debouncedFn);
      this.watchers.push({
        tag: 'input_model',
        unwatch: function () {
          this$1.vm.$nextTick(function () {
            unwatch();
          });
        }
      });

      // filter out input event when we are watching from the context vm.
      if (watchCtxVm) {
        events = events.filter(function (e) { return e !== inputEvent; });
      }
    }
  }

  // Add events.
  events.forEach(function (e) {
    var debouncedFn = debounce(fn, this$1.delay[e], token);

    this$1._addComponentEventListener(e, debouncedFn);
    this$1._addHTMLEventListener(e, debouncedFn);
  });
};

Field.prototype._addComponentEventListener = function _addComponentEventListener (evt, validate) {
    var this$1 = this;

  if (!this.componentInstance) { return; }

  this.componentInstance.$on(evt, validate);
  this.watchers.push({
    tag: 'input_vue',
    unwatch: function () {
      this$1.componentInstance.$off(evt, validate);
    }
  });
};

Field.prototype._addHTMLEventListener = function _addHTMLEventListener (evt, validate) {
    var this$1 = this;

  if (!this.el || this.componentInstance) { return; }

  // listen for the current element.
  var addListener = function (el) {
    addEventListener(el, evt, validate);
    this$1.watchers.push({
      tag: 'input_native',
      unwatch: function () {
        el.removeEventListener(evt, validate);
      }
    });
  };

  addListener(this.el);
  if (!isCheckboxOrRadioInput(this.el)) {
    return;
  }

  var els = document.querySelectorAll(("input[name=\"" + (this.el.name) + "\"]"));
  toArray$1(els).forEach(function (el) {
    // skip if it is added by v-validate and is not the current element.
    if (el._veeValidateId && el !== this$1.el) {
      return;
    }

    addListener(el);
  });
};

/**
 * Updates aria attributes on the element.
 */
Field.prototype.updateAriaAttrs = function updateAriaAttrs () {
    var this$1 = this;

  if (!this.aria || !this.el || !isCallable(this.el.setAttribute)) { return; }

  var applyAriaAttrs = function (el) {
    el.setAttribute('aria-required', this$1.isRequired ? 'true' : 'false');
    el.setAttribute('aria-invalid', this$1.flags.invalid ? 'true' : 'false');
  };

  if (!isCheckboxOrRadioInput(this.el)) {
    applyAriaAttrs(this.el);
    return;
  }

  var els = document.querySelectorAll(("input[name=\"" + (this.el.name) + "\"]"));
  toArray$1(els).forEach(applyAriaAttrs);
};

/**
 * Updates the custom validity for the field.
 */
Field.prototype.updateCustomValidity = function updateCustomValidity () {
  if (!this.validity || !this.el || !isCallable(this.el.setCustomValidity) || !this.validator.errors) { return; }

  this.el.setCustomValidity(this.flags.valid ? '' : (this.validator.errors.firstById(this.id) || ''));
};

/**
 * Removes all listeners.
 */
Field.prototype.destroy = function destroy () {
  // ignore the result of any ongoing validation.
  if (this._cancellationToken) {
    this._cancellationToken.cancelled = true;
  }

  this.unwatch();
  this.dependencies.forEach(function (d) { return d.field.destroy(); });
  this.dependencies = [];
};

Object.defineProperties( Field.prototype, prototypeAccessors$1$1 );

// 

var FieldBag = function FieldBag (items) {
  if ( items === void 0 ) items = [];

  this.items = items || [];
  this.itemsById = this.items.reduce(function (itemsById, item) {
    itemsById[item.id] = item;
    return itemsById;
  }, {});
};

var prototypeAccessors$2 = { length: { configurable: true } };

FieldBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
    var this$1 = this;

  var index = 0;
  return {
    next: function () {
      return { value: this$1.items[index++], done: index > this$1.items.length };
    }
  };
};

/**
 * Gets the current items length.
 */

prototypeAccessors$2.length.get = function () {
  return this.items.length;
};

/**
 * Finds the first field that matches the provided matcher object.
 */
FieldBag.prototype.find = function find$1 (matcher) {
  return find(this.items, function (item) { return item.matches(matcher); });
};

/**
 * Finds the field with the given id, using a plain object as a map to link
 * ids to items faster than by looping over the array and matching.
 */
FieldBag.prototype.findById = function findById (id) {
  return this.itemsById[id] || null;
};

/**
 * Filters the items down to the matched fields.
 */
FieldBag.prototype.filter = function filter (matcher) {
  // multiple matchers to be tried.
  if (Array.isArray(matcher)) {
    return this.items.filter(function (item) { return matcher.some(function (m) { return item.matches(m); }); });
  }

  return this.items.filter(function (item) { return item.matches(matcher); });
};

/**
 * Maps the field items using the mapping function.
 */
FieldBag.prototype.map = function map (mapper) {
  return this.items.map(mapper);
};

/**
 * Finds and removes the first field that matches the provided matcher object, returns the removed item.
 */
FieldBag.prototype.remove = function remove (matcher) {
  var item = null;
  if (matcher instanceof Field) {
    item = matcher;
  } else {
    item = this.find(matcher);
  }

  if (!item) { return null; }

  var index = this.items.indexOf(item);
  this.items.splice(index, 1);
  delete this.itemsById[item.id];

  return item;
};

/**
 * Adds a field item to the list.
 */
FieldBag.prototype.push = function push (item) {
  if (! (item instanceof Field)) {
    throw createError('FieldBag only accepts instances of Field that has an id defined.');
  }

  if (!item.id) {
    throw createError('Field id must be defined.');
  }

  if (this.findById(item.id)) {
    throw createError(("Field with id " + (item.id) + " is already added."));
  }

  this.items.push(item);
  this.itemsById[item.id] = item;
};

Object.defineProperties( FieldBag.prototype, prototypeAccessors$2 );

var ScopedValidator = function ScopedValidator (base, vm) {
  this.id = vm._uid;
  this._base = base;
  this._paused = false;

  // create a mirror bag with limited component scope.
  this.errors = new ErrorBag(base.errors, this.id);
};

var prototypeAccessors$3 = { flags: { configurable: true },rules: { configurable: true },fields: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };

prototypeAccessors$3.flags.get = function () {
    var this$1 = this;

  return this._base.fields.items.filter(function (f) { return f.vmId === this$1.id; }).reduce(function (acc, field) {
    if (field.scope) {
      if (!acc[("$" + (field.scope))]) {
        acc[("$" + (field.scope))] = {};
      }

      acc[("$" + (field.scope))][field.name] = field.flags;
    }

    acc[field.name] = field.flags;

    return acc;
  }, {});
};

prototypeAccessors$3.rules.get = function () {
  return this._base.rules;
};

prototypeAccessors$3.fields.get = function () {
  return new FieldBag(this._base.fields.filter({ vmId: this.id }));
};

prototypeAccessors$3.dictionary.get = function () {
  return this._base.dictionary;
};

prototypeAccessors$3.locale.get = function () {
  return this._base.locale;
};

prototypeAccessors$3.locale.set = function (val) {
  this._base.locale = val;
};

ScopedValidator.prototype.localize = function localize () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base).localize.apply(ref, args);
};

ScopedValidator.prototype.update = function update () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base).update.apply(ref, args);
};

ScopedValidator.prototype.attach = function attach (opts) {
  var attachOpts = assign({}, opts, { vmId: this.id });

  return this._base.attach(attachOpts);
};

ScopedValidator.prototype.pause = function pause () {
  this._paused = true;
};

ScopedValidator.prototype.resume = function resume () {
  this._paused = false;
};

ScopedValidator.prototype.remove = function remove (ruleName) {
  return this._base.remove(ruleName);
};

ScopedValidator.prototype.detach = function detach (name, scope) {
  return this._base.detach(name, scope, this.id);
};

ScopedValidator.prototype.extend = function extend () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base).extend.apply(ref, args);
};

ScopedValidator.prototype.validate = function validate (descriptor, value, opts) {
    if ( opts === void 0 ) opts = {};

  if (this._paused) { return Promise.resolve(true); }

  return this._base.validate(descriptor, value, assign({}, { vmId: this.id }, opts || {}));
};

ScopedValidator.prototype.verify = function verify () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base).verify.apply(ref, args);
};

ScopedValidator.prototype.validateAll = function validateAll (values, opts) {
    if ( opts === void 0 ) opts = {};

  if (this._paused) { return Promise.resolve(true); }

  return this._base.validateAll(values, assign({}, { vmId: this.id }, opts || {}));
};

ScopedValidator.prototype.validateScopes = function validateScopes (opts) {
    if ( opts === void 0 ) opts = {};

  if (this._paused) { return Promise.resolve(true); }

  return this._base.validateScopes(assign({}, { vmId: this.id }, opts || {}));
};

ScopedValidator.prototype.destroy = function destroy () {
  delete this.id;
  delete this._base;
};

ScopedValidator.prototype.reset = function reset (matcher) {
  return this._base.reset(Object.assign({}, matcher || {}, { vmId: this.id }));
};

ScopedValidator.prototype.flag = function flag () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base).flag.apply(ref, args.concat( [this.id] ));
};

ScopedValidator.prototype._resolveField = function _resolveField () {
    var ref;

    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];
  return (ref = this._base)._resolveField.apply(ref, args);
};

Object.defineProperties( ScopedValidator.prototype, prototypeAccessors$3 );

var VALIDATOR = null;

var getValidator = function () {
  return VALIDATOR;
};

var setValidator = function (value) {
  VALIDATOR = value;

  return value;
};

// 

/**
 * Checks if a parent validator instance was requested.
 */
var requestsValidator = function (injections) {
  if (isObject$1(injections) && injections.$validator) {
    return true;
  }

  return false;
};

var mixin = {
  provide: function provide () {
    if (this.$validator && !isBuiltInComponent(this.$vnode)) {
      return {
        $validator: this.$validator
      };
    }

    return {};
  },
  beforeCreate: function beforeCreate () {
    // if built in do nothing.
    if (isBuiltInComponent(this.$vnode) || this.$options.$__veeInject === false) {
      return;
    }

    // if its a root instance set the config if it exists.
    if (!this.$parent) {
      setConfig(this.$options.$_veeValidate || {});
    }

    var options = resolveConfig(this);

    // if its a root instance, inject anyways, or if it requested a new instance.
    if (!this.$parent || (this.$options.$_veeValidate && /new/.test(this.$options.$_veeValidate.validator))) {
      this.$validator = new ScopedValidator(getValidator(), this);
    }

    var requested = requestsValidator(this.$options.inject);

    // if automatic injection is enabled and no instance was requested.
    if (! this.$validator && options.inject && !requested) {
      this.$validator = new ScopedValidator(getValidator(), this);
    }

    // don't inject errors or fieldBag as no validator was resolved.
    if (!requested && !this.$validator) {
      return;
    }

    // There is a validator but it isn't injected, mark as reactive.
    if (!requested && this.$validator) {
      var Vue = this.$options._base; // the vue constructor.
      Vue.util.defineReactive(this.$validator, 'errors', this.$validator.errors);
    }

    if (!this.$options.computed) {
      this.$options.computed = {};
    }

    this.$options.computed[options.errorBagName || 'errors'] = function errorBagGetter () {
      return this.$validator.errors;
    };
    this.$options.computed[options.fieldsBagName || 'fields'] = function fieldBagGetter () {
      return this.$validator.fields.items.reduce(function (acc, field) {
        if (field.scope) {
          if (!acc[("$" + (field.scope))]) {
            acc[("$" + (field.scope))] = {};
          }

          acc[("$" + (field.scope))][field.name] = field.flags;

          return acc;
        }

        acc[field.name] = field.flags;

        return acc;
      }, {});
    };
  },
  beforeDestroy: function beforeDestroy () {
    if (this.$validator && this._uid === this.$validator.id) {
      this.$validator.errors.clear(); // remove errors generated by this component.
    }
  }
};

// 

/**
 * Finds the requested field by id from the context object.
 */
function findField (el, context) {
  if (!context || !context.$validator) {
    return null;
  }

  return context.$validator.fields.findById(el._veeValidateId);
}
var directive$1 = {
  bind: function bind (el, binding, vnode) {
    var validator = vnode.context.$validator;
    if (!validator) {
      {
        warn$1("No validator instance is present on vm, did you forget to inject '$validator'?");
      }

      return;
    }

    var fieldOptions = Resolver.generate(el, binding, vnode);
    validator.attach(fieldOptions);
  },
  inserted: function inserted (el, binding, vnode) {
    var field = findField(el, vnode.context);
    var scope = Resolver.resolveScope(el, binding, vnode);

    // skip if scope hasn't changed.
    if (!field || scope === field.scope) { return; }

    // only update scope.
    field.update({ scope: scope });

    // allows the field to re-evaluated once more in the update hook.
    field.updated = false;
  },
  update: function update (el, binding, vnode) {
    var field = findField(el, vnode.context);

    // make sure we don't do unneccasary work if no important change was done.
    if (!field || (field.updated && isEqual(binding.value, binding.oldValue))) { return; }
    var scope = Resolver.resolveScope(el, binding, vnode);
    var rules = Resolver.resolveRules(el, binding, vnode);

    field.update({
      scope: scope,
      rules: rules
    });
  },
  unbind: function unbind (el, binding, ref) {
    var context = ref.context;

    var field = findField(el, context);
    if (!field) { return; }

    context.$validator.detach(field);
  }
};

// 

var Validator = function Validator (validations, options, pluginContainer) {
  if ( options === void 0 ) options = { fastExit: true };
  if ( pluginContainer === void 0 ) pluginContainer = null;

  this.errors = new ErrorBag();
  this.fields = new FieldBag();
  this._createFields(validations);
  this.paused = false;
  this.fastExit = !isNullOrUndefined(options && options.fastExit) ? options.fastExit : true;
  this.$vee = pluginContainer || {
    _vm: {
      $nextTick: function (cb) { return isCallable(cb) ? cb() : Promise.resolve(); },
      $emit: function () {},
      $off: function () {}
    }
  };
};

var prototypeAccessors$4 = { rules: { configurable: true },dictionary: { configurable: true },flags: { configurable: true },locale: { configurable: true } };
var staticAccessors$1 = { rules: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };

/**
 * @deprecated
 */
staticAccessors$1.rules.get = function () {
  {
    warn$1('this accessor will be deprecated, use `import { rules } from "vee-validate"` instead.');
  }

  return RuleContainer.rules;
};

/**
 * @deprecated
 */
prototypeAccessors$4.rules.get = function () {
  {
    warn$1('this accessor will be deprecated, use `import { rules } from "vee-validate"` instead.');
  }

  return RuleContainer.rules;
};

prototypeAccessors$4.dictionary.get = function () {
  return DictionaryResolver.getDriver();
};

staticAccessors$1.dictionary.get = function () {
  return DictionaryResolver.getDriver();
};

prototypeAccessors$4.flags.get = function () {
  return this.fields.items.reduce(function (acc, field) {
      var obj;

    if (field.scope) {
      acc[("$" + (field.scope))] = ( obj = {}, obj[field.name] = field.flags, obj);

      return acc;
    }

    acc[field.name] = field.flags;

    return acc;
  }, {});
};

/**
 * Getter for the current locale.
 */
prototypeAccessors$4.locale.get = function () {
  return Validator.locale;
};

/**
 * Setter for the validator locale.
 */
prototypeAccessors$4.locale.set = function (value) {
  Validator.locale = value;
};

staticAccessors$1.locale.get = function () {
  return DictionaryResolver.getDriver().locale;
};

/**
 * Setter for the validator locale.
 */
staticAccessors$1.locale.set = function (value) {
  var hasChanged = value !== DictionaryResolver.getDriver().locale;
  DictionaryResolver.getDriver().locale = value;
  if (hasChanged && Validator.$vee && Validator.$vee._vm) {
    Validator.$vee._vm.$emit('localeChanged');
  }
};

/**
 * Static constructor.
 * @deprecated
 */
Validator.create = function create (validations, options) {
  {
    warn$1('Please use `new` to create new validator instances.');
  }

  return new Validator(validations, options);
};

/**
 * Adds a custom validator to the list of validation rules.
 */
Validator.extend = function extend (name, validator, options) {
    if ( options === void 0 ) options = {};

  Validator._guardExtend(name, validator);
  // rules imported from the minimal bundle
  // will have the options embedded in them
  var mergedOpts = validator.options || {};
  Validator._merge(name, {
    validator: validator,
    paramNames: (options && options.paramNames) || validator.paramNames,
    options: assign({ hasTarget: false, immediate: true }, mergedOpts, options || {})
  });
};

/**
 * Removes a rule from the list of validators.
 * @deprecated
 */
Validator.remove = function remove (name) {
  {
    warn$1('this method will be deprecated, you can still override your rules with `extend`');
  }

  RuleContainer.remove(name);
};

/**
 * Adds and sets the current locale for the validator.
*/
Validator.prototype.localize = function localize (lang, dictionary) {
  Validator.localize(lang, dictionary);
};

/**
 * Adds and sets the current locale for the validator.
 */
Validator.localize = function localize (lang, dictionary) {
    var obj;

  if (isObject$1(lang)) {
    DictionaryResolver.getDriver().merge(lang);
    return;
  }

  // merge the dictionary.
  if (dictionary) {
    var locale = lang || dictionary.name;
    dictionary = assign({}, dictionary);
    DictionaryResolver.getDriver().merge(( obj = {}, obj[locale] = dictionary, obj));
  }

  if (lang) {
    // set the locale.
    Validator.locale = lang;
  }
};

/**
 * Registers a field to be validated.
 */
Validator.prototype.attach = function attach (fieldOpts) {
    var this$1 = this;

  // We search for a field with the same name & scope, having persist enabled
  var oldFieldMatcher = { name: fieldOpts.name, scope: fieldOpts.scope, persist: true };
  var oldField = fieldOpts.persist ? this.fields.find(oldFieldMatcher) : null;

  if (oldField) {
    // We keep the flags of the old field, then we remove its instance
    fieldOpts.flags = oldField.flags;
    oldField.destroy();
    this.fields.remove(oldField);
  }

  // fixes initial value detection with v-model and select elements.
  var value = fieldOpts.initialValue;
  var field = new Field(fieldOpts);
  this.fields.push(field);

  // validate the field initially
  if (field.immediate) {
    this.$vee._vm.$nextTick(function () { return this$1.validate(("#" + (field.id)), value || field.value, { vmId: fieldOpts.vmId }); });
  } else {
    this._validate(field, value || field.value, { initial: true }).then(function (result) {
      field.flags.valid = result.valid;
      field.flags.invalid = !result.valid;
    });
  }

  return field;
};

/**
 * Sets the flags on a field.
 */
Validator.prototype.flag = function flag (name, flags, uid) {
    if ( uid === void 0 ) uid = null;

  var field = this._resolveField(name, undefined, uid);
  if (!field || !flags) {
    return;
  }

  field.setFlags(flags);
};

/**
 * Removes a field from the validator.
 */
Validator.prototype.detach = function detach (name, scope, uid) {
  var field = isCallable(name.destroy) ? name : this._resolveField(name, scope, uid);
  if (!field) { return; }

  // We destroy/remove the field & error instances if it's not a `persist` one
  if (!field.persist) {
    field.destroy();
    this.errors.remove(field.name, field.scope, field.vmId);
    this.fields.remove(field);
  }
};

/**
 * Adds a custom validator to the list of validation rules.
 */
Validator.prototype.extend = function extend (name, validator, options) {
    if ( options === void 0 ) options = {};

  Validator.extend(name, validator, options);
};

Validator.prototype.reset = function reset (matcher) {
    var this$1 = this;

  // two ticks
  return this.$vee._vm.$nextTick().then(function () {
    return this$1.$vee._vm.$nextTick();
  }).then(function () {
    this$1.fields.filter(matcher).forEach(function (field) {
      field.waitFor(null);
      field.reset(); // reset field flags.
      this$1.errors.remove(field.name, field.scope, matcher && matcher.vmId);
    });
  });
};

/**
 * Updates a field, updating both errors and flags.
 */
Validator.prototype.update = function update (id, ref) {
    var scope = ref.scope;

  var field = this._resolveField(("#" + id));
  if (!field) { return; }

  // remove old scope.
  this.errors.update(id, { scope: scope });
};

/**
 * Removes a rule from the list of validators.
 * @deprecated
 */
Validator.prototype.remove = function remove (name) {
  Validator.remove(name);
};

/**
 * Validates a value against a registered field validations.
 */
Validator.prototype.validate = function validate (fieldDescriptor, value, ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var silent = ref.silent;
    var vmId = ref.vmId;

  if (this.paused) { return Promise.resolve(true); }

  // overload to validate all.
  if (isNullOrUndefined(fieldDescriptor)) {
    return this.validateScopes({ silent: silent, vmId: vmId });
  }

  // overload to validate scope-less fields.
  if (fieldDescriptor === '*') {
    return this.validateAll(undefined, { silent: silent, vmId: vmId });
  }

  // if scope validation was requested.
  if (/^(.+)\.\*$/.test(fieldDescriptor)) {
    var matched = fieldDescriptor.match(/^(.+)\.\*$/)[1];
    return this.validateAll(matched);
  }

  var field = this._resolveField(fieldDescriptor);
  if (!field) {
    return this._handleFieldNotFound(fieldDescriptor);
  }

  if (!silent) { field.flags.pending = true; }
  if (value === undefined) {
    value = field.value;
  }

  var validationPromise = this._validate(field, value);
  field.waitFor(validationPromise);

  return validationPromise.then(function (result) {
    if (!silent && field.isWaitingFor(validationPromise)) {
      // allow next validation to mutate the state.
      field.waitFor(null);
      this$1._handleValidationResults([result], vmId);
    }

    return result.valid;
  });
};

/**
 * Pauses the validator.
 */
Validator.prototype.pause = function pause () {
  this.paused = true;

  return this;
};

/**
 * Resumes the validator.
 */
Validator.prototype.resume = function resume () {
  this.paused = false;

  return this;
};

/**
 * Validates each value against the corresponding field validations.
 */
Validator.prototype.validateAll = function validateAll (values, ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var silent = ref.silent;
    var vmId = ref.vmId;

  if (this.paused) { return Promise.resolve(true); }

  var matcher = null;
  var providedValues = false;

  if (typeof values === 'string') {
    matcher = { scope: values, vmId: vmId };
  } else if (isObject$1(values)) {
    matcher = Object.keys(values).map(function (key) {
      return { name: key, vmId: vmId, scope: null };
    });
    providedValues = true;
  } else if (Array.isArray(values)) {
    matcher = values.map(function (key) {
      return typeof key === 'object' ? Object.assign({ vmId: vmId }, key) : { name: key, vmId: vmId };
    });
  } else {
    matcher = { scope: null, vmId: vmId };
  }

  return Promise.all(
    this.fields.filter(matcher).map(function (field) { return this$1._validate(field, providedValues ? values[field.name] : field.value); })
  ).then(function (results) {
    if (!silent) {
      this$1._handleValidationResults(results, vmId);
    }

    return results.every(function (t) { return t.valid; });
  });
};

/**
 * Validates all scopes.
 */
Validator.prototype.validateScopes = function validateScopes (ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var silent = ref.silent;
    var vmId = ref.vmId;

  if (this.paused) { return Promise.resolve(true); }

  return Promise.all(
    this.fields.filter({ vmId: vmId }).map(function (field) { return this$1._validate(field, field.value); })
  ).then(function (results) {
    if (!silent) {
      this$1._handleValidationResults(results, vmId);
    }

    return results.every(function (t) { return t.valid; });
  });
};

/**
 * Validates a value against the rules.
 */
Validator.prototype.verify = function verify (value, rules, options) {
    if ( options === void 0 ) options = {};

  var field = {
    name: (options && options.name) || '{field}',
    rules: normalizeRules(rules),
    bails: getPath('bails', options, true),
    forceRequired: false,
    get isRequired () {
      return !!this.rules.required || this.forceRequired;
    }
  };

  var targetRules = Object.keys(field.rules).filter(RuleContainer.isTargetRule);
  if (targetRules.length && options && isObject$1(options.values)) {
    field.dependencies = targetRules.map(function (rule) {
      var ref = field.rules[rule];
        var targetKey = ref[0];

      return {
        name: rule,
        field: { value: options.values[targetKey] }
      };
    });
  }

  return this._validate(field, value).then(function (result) {
    var errors = [];
    var ruleMap = {};
    result.errors.forEach(function (e) {
      errors.push(e.msg);
      ruleMap[e.rule] = e.msg;
    });

    return {
      valid: result.valid,
      errors: errors,
      failedRules: ruleMap
    };
  });
};

/**
 * Perform cleanup.
 */
Validator.prototype.destroy = function destroy () {
  this.$vee._vm.$off('localeChanged');
};

/**
 * Creates the fields to be validated.
 */
Validator.prototype._createFields = function _createFields (validations) {
    var this$1 = this;

  if (!validations) { return; }

  Object.keys(validations).forEach(function (field) {
    var options = assign({}, { name: field, rules: validations[field] });
    this$1.attach(options);
  });
};

/**
 * Date rules need the existence of a format, so date_format must be supplied.
 */
Validator.prototype._getDateFormat = function _getDateFormat (validations) {
  var format = null;
  if (validations.date_format && Array.isArray(validations.date_format)) {
    format = validations.date_format[0];
  }

  return format || DictionaryResolver.getDriver().getDateFormat(this.locale);
};

/**
 * Formats an error message for field and a rule.
 */
Validator.prototype._formatErrorMessage = function _formatErrorMessage (field, rule, data, targetName) {
    if ( data === void 0 ) data = {};
    if ( targetName === void 0 ) targetName = null;

  var name = this._getFieldDisplayName(field);
  var params = this._getLocalizedParams(rule, targetName);

  return DictionaryResolver.getDriver().getFieldMessage(this.locale, field.name, rule.name, [name, params, data]);
};

/**
 * We need to convert any object param to an array format since the locales do not handle params as objects yet.
 */
Validator.prototype._convertParamObjectToArray = function _convertParamObjectToArray (obj, ruleName) {
  if (Array.isArray(obj)) {
    return obj;
  }

  var paramNames = RuleContainer.getParamNames(ruleName);
  if (!paramNames || !isObject$1(obj)) {
    return obj;
  }

  return paramNames.reduce(function (prev, paramName) {
    if (paramName in obj) {
      prev.push(obj[paramName]);
    }

    return prev;
  }, []);
};

/**
 * Translates the parameters passed to the rule (mainly for target fields).
 */
Validator.prototype._getLocalizedParams = function _getLocalizedParams (rule, targetName) {
    if ( targetName === void 0 ) targetName = null;

  var params = this._convertParamObjectToArray(rule.params, rule.name);
  if (rule.options.hasTarget && params && params[0]) {
    var localizedName = targetName || DictionaryResolver.getDriver().getAttribute(this.locale, params[0], params[0]);
    return [localizedName].concat(params.slice(1));
  }

  return params;
};

/**
 * Resolves an appropriate display name, first checking 'data-as' or the registered 'prettyName'
 */
Validator.prototype._getFieldDisplayName = function _getFieldDisplayName (field) {
  return field.alias || DictionaryResolver.getDriver().getAttribute(this.locale, field.name, field.name);
};

/**
 * Converts an array of params to an object with named properties.
 * Only works if the rule is configured with a paramNames array.
 * Returns the same params if it cannot convert it.
 */
Validator.prototype._convertParamArrayToObj = function _convertParamArrayToObj (params, ruleName) {
  var paramNames = RuleContainer.getParamNames(ruleName);
  if (!paramNames) {
    return params;
  }

  if (isObject$1(params)) {
    // check if the object is either a config object or a single parameter that is an object.
    var hasKeys = paramNames.some(function (name) { return Object.keys(params).indexOf(name) !== -1; });
    // if it has some of the keys, return it as is.
    if (hasKeys) {
      return params;
    }
    // otherwise wrap the object in an array.
    params = [params];
  }

  // Reduce the paramsNames to a param object.
  return params.reduce(function (prev, value, idx) {
    prev[paramNames[idx]] = value;

    return prev;
  }, {});
};

/**
 * Tests a single input value against a rule.
 */
Validator.prototype._test = function _test (field, value, rule) {
    var this$1 = this;

  var validator = RuleContainer.getValidatorMethod(rule.name);
  var params = Array.isArray(rule.params) ? toArray$1(rule.params) : rule.params;
  if (!params) {
    params = [];
  }

  var targetName = null;
  if (!validator || typeof validator !== 'function') {
    return Promise.reject(createError(("No such validator '" + (rule.name) + "' exists.")));
  }

  // has field dependencies.
  if (rule.options.hasTarget && field.dependencies) {
    var target = find(field.dependencies, function (d) { return d.name === rule.name; });
    if (target) {
      targetName = target.field.alias;
      params = [target.field.value].concat(params.slice(1));
    }
  } else if (rule.name === 'required' && field.rejectsFalse) {
    // invalidate false if no args were specified and the field rejects false by default.
    params = params.length ? params : [true];
  }

  if (rule.options.isDate) {
    var dateFormat = this._getDateFormat(field.rules);
    if (rule.name !== 'date_format') {
      params.push(dateFormat);
    }
  }

  var result = validator(value, this._convertParamArrayToObj(params, rule.name));

  // If it is a promise.
  if (isCallable(result.then)) {
    return result.then(function (values) {
      var allValid = true;
      var data = {};
      if (Array.isArray(values)) {
        allValid = values.every(function (t) { return (isObject$1(t) ? t.valid : t); });
      } else { // Is a single object/boolean.
        allValid = isObject$1(values) ? values.valid : values;
        data = values.data;
      }

      return {
        valid: allValid,
        data: result.data,
        errors: allValid ? [] : [this$1._createFieldError(field, rule, data, targetName)]
      };
    });
  }

  if (!isObject$1(result)) {
    result = { valid: result, data: {} };
  }

  return {
    valid: result.valid,
    data: result.data,
    errors: result.valid ? [] : [this._createFieldError(field, rule, result.data, targetName)]
  };
};

/**
 * Merges a validator object into the RULES and Messages.
 */
Validator._merge = function _merge (name, ref) {
    var validator = ref.validator;
    var options = ref.options;
    var paramNames = ref.paramNames;

  var validate = isCallable(validator) ? validator : validator.validate;
  if (validator.getMessage) {
    DictionaryResolver.getDriver().setMessage(Validator.locale, name, validator.getMessage);
  }

  RuleContainer.add(name, {
    validate: validate,
    options: options,
    paramNames: paramNames
  });
};

/**
 * Guards from extension violations.
 */
Validator._guardExtend = function _guardExtend (name, validator) {
  if (isCallable(validator)) {
    return;
  }

  if (!isCallable(validator.validate)) {
    throw createError(
      ("Extension Error: The validator '" + name + "' must be a function or have a 'validate' method.")
    );
  }
};

/**
 * Creates a Field Error Object.
 */
Validator.prototype._createFieldError = function _createFieldError (field, rule, data, targetName) {
    var this$1 = this;

  return {
    id: field.id,
    vmId: field.vmId,
    field: field.name,
    msg: this._formatErrorMessage(field, rule, data, targetName),
    rule: rule.name,
    scope: field.scope,
    regenerate: function () {
      return this$1._formatErrorMessage(field, rule, data, targetName);
    }
  };
};

/**
 * Tries different strategies to find a field.
 */
Validator.prototype._resolveField = function _resolveField (name, scope, uid) {
  if (name[0] === '#') {
    return this.fields.findById(name.slice(1));
  }

  if (!isNullOrUndefined(scope)) {
    return this.fields.find({ name: name, scope: scope, vmId: uid });
  }

  if (includes(name, '.')) {
    var ref = name.split('.');
      var fieldScope = ref[0];
      var fieldName = ref.slice(1);
    var field = this.fields.find({ name: fieldName.join('.'), scope: fieldScope, vmId: uid });
    if (field) {
      return field;
    }
  }

  return this.fields.find({ name: name, scope: null, vmId: uid });
};

/**
 * Handles when a field is not found.
 */
Validator.prototype._handleFieldNotFound = function _handleFieldNotFound (name, scope) {
  var fullName = isNullOrUndefined(scope) ? name : ("" + (!isNullOrUndefined(scope) ? scope + '.' : '') + name);

  return Promise.reject(createError(
    ("Validating a non-existent field: \"" + fullName + "\". Use \"attach()\" first.")
  ));
};

/**
 * Handles validation results.
 */
Validator.prototype._handleValidationResults = function _handleValidationResults (results, vmId) {
    var this$1 = this;

  var matchers = results.map(function (result) { return ({ id: result.id }); });
  this.errors.removeById(matchers.map(function (m) { return m.id; }));
  // remove by name and scope to remove any custom errors added.
  results.forEach(function (result) {
    this$1.errors.remove(result.field, result.scope, vmId);
  });
  var allErrors = results.reduce(function (prev, curr) {
    prev.push.apply(prev, curr.errors);

    return prev;
  }, []);

  this.errors.add(allErrors);

  // handle flags.
  this.fields.filter(matchers).forEach(function (field) {
    var result = find(results, function (r) { return r.id === field.id; });
    field.setFlags({
      pending: false,
      valid: result.valid,
      validated: true
    });
  });
};

Validator.prototype._shouldSkip = function _shouldSkip (field, value) {
  // field is configured to run through the pipeline regardless
  if (field.bails === false) {
    return false;
  }

  // disabled fields are skipped if useConstraintAttrs is enabled in config
  if (field.isDisabled && getConfig().useConstraintAttrs) {
    return true;
  }

  // skip if the field is not required and has an empty value.
  return !field.isRequired && (isNullOrUndefined(value) || value === '' || isEmptyArray(value));
};

Validator.prototype._shouldBail = function _shouldBail (field) {
  // if the field was configured explicitly.
  if (field.bails !== undefined) {
    return field.bails;
  }

  return this.fastExit;
};

/**
 * Starts the validation process.
 */
Validator.prototype._validate = function _validate (field, value, ref) {
    var this$1 = this;
    if ( ref === void 0 ) ref = {};
    var initial = ref.initial;

  var requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);

  field.forceRequired = false;
  requireRules.forEach(function (rule) {
    var ruleOptions = RuleContainer.getOptions(rule);
    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });

    if (isCallable(result.then)) { throw createError('Require rules cannot be async'); }
    if (!isObject$1(result)) { throw createError('Require rules has to return an object (see docs)'); }

    if (result.data.required === true) {
      field.forceRequired = true;
    }
  });

  if (this._shouldSkip(field, value)) {
    return Promise.resolve({ valid: true, id: field.id, field: field.name, scope: field.scope, errors: [] });
  }

  var promises = [];
  var errors = [];
  var isExitEarly = false;
  if (isCallable(field.checkValueChanged)) {
    field.flags.changed = field.checkValueChanged();
  }

  // use of '.some()' is to break iteration in middle by returning true
  Object.keys(field.rules).filter(function (rule) {
    if (!initial || !RuleContainer.has(rule)) { return true; }

    return RuleContainer.isImmediate(rule);
  }).some(function (rule) {
    var ruleOptions = RuleContainer.getOptions(rule);
    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });
    if (isCallable(result.then)) {
      promises.push(result);
    } else if (!result.valid && this$1._shouldBail(field)) {
      errors.push.apply(errors, result.errors);
      isExitEarly = true;
    } else {
      // promisify the result.
      promises.push(new Promise(function (resolve) { return resolve(result); }));
    }

    return isExitEarly;
  });

  if (isExitEarly) {
    return Promise.resolve({ valid: false, errors: errors, id: field.id, field: field.name, scope: field.scope });
  }

  return Promise.all(promises).then(function (results) {
    return results.reduce(function (prev, v) {
        var ref;

      if (!v.valid) {
        (ref = prev.errors).push.apply(ref, v.errors);
      }

      prev.valid = prev.valid && v.valid;

      return prev;
    }, { valid: true, errors: errors, id: field.id, field: field.name, scope: field.scope });
  });
};

Object.defineProperties( Validator.prototype, prototypeAccessors$4 );
Object.defineProperties( Validator, staticAccessors$1 );

// 

var normalizeValue = function (value) {
  if (isObject$1(value)) {
    return Object.keys(value).reduce(function (prev, key) {
      prev[key] = normalizeValue(value[key]);

      return prev;
    }, {});
  }

  if (isCallable(value)) {
    return value('{0}', ['{1}', '{2}', '{3}']);
  }

  return value;
};

var normalizeFormat = function (locale) {
  // normalize messages
  var dictionary = {};
  if (locale.messages) {
    dictionary.messages = normalizeValue(locale.messages);
  }

  if (locale.custom) {
    dictionary.custom = normalizeValue(locale.custom);
  }

  if (locale.attributes) {
    dictionary.attributes = locale.attributes;
  }

  if (!isNullOrUndefined(locale.dateFormat)) {
    dictionary.dateFormat = locale.dateFormat;
  }

  return dictionary;
};

var I18nDictionary = function I18nDictionary (i18n, rootKey) {
  this.i18n = i18n;
  this.rootKey = rootKey;
};

var prototypeAccessors$5 = { locale: { configurable: true } };

prototypeAccessors$5.locale.get = function () {
  return this.i18n.locale;
};

prototypeAccessors$5.locale.set = function (value) {
  warn$1('Cannot set locale from the validator when using vue-i18n, use i18n.locale setter instead');
};

I18nDictionary.prototype.getDateFormat = function getDateFormat (locale) {
  return this.i18n.getDateTimeFormat(locale || this.locale);
};

I18nDictionary.prototype.setDateFormat = function setDateFormat (locale, value) {
  this.i18n.setDateTimeFormat(locale || this.locale, value);
};

I18nDictionary.prototype.getMessage = function getMessage (_, key, data) {
  var path = (this.rootKey) + ".messages." + key;
  var dataOptions = data;

  if (Array.isArray(data)) {
    dataOptions = [].concat.apply([], data);
  }

  if (this.i18n.te(path)) {
    return this.i18n.t(path, dataOptions);
  }

  // fallback to the fallback message
  if (this.i18n.te(path, this.i18n.fallbackLocale)) {
    return this.i18n.t(path, this.i18n.fallbackLocale, dataOptions);
  }

  // fallback to the root message
  return this.i18n.t(((this.rootKey) + ".messages._default"), dataOptions);
};

I18nDictionary.prototype.getAttribute = function getAttribute (_, key, fallback) {
    if ( fallback === void 0 ) fallback = '';

  var path = (this.rootKey) + ".attributes." + key;
  if (this.i18n.te(path)) {
    return this.i18n.t(path);
  }

  return fallback;
};

I18nDictionary.prototype.getFieldMessage = function getFieldMessage (_, field, key, data) {
  var path = (this.rootKey) + ".custom." + field + "." + key;
  if (this.i18n.te(path)) {
    return this.i18n.t(path, data);
  }

  return this.getMessage(_, key, data);
};

I18nDictionary.prototype.merge = function merge$1 (dictionary) {
    var this$1 = this;

  Object.keys(dictionary).forEach(function (localeKey) {
      var obj;

    // i18n doesn't deep merge
    // first clone the existing locale (avoid mutations to locale)
    var clone = merge({}, getPath((localeKey + "." + (this$1.rootKey)), this$1.i18n.messages, {}));
    // Merge cloned locale with new one
    var locale = merge(clone, normalizeFormat(dictionary[localeKey]));
    this$1.i18n.mergeLocaleMessage(localeKey, ( obj = {}, obj[this$1.rootKey] = locale, obj));
    if (locale.dateFormat) {
      this$1.i18n.setDateTimeFormat(localeKey, locale.dateFormat);
    }
  });
};

I18nDictionary.prototype.setMessage = function setMessage (locale, key, value) {
    var obj, obj$1;

  this.merge(( obj$1 = {}, obj$1[locale] = {
      messages: ( obj = {}, obj[key] = value, obj)
    }, obj$1));
};

I18nDictionary.prototype.setAttribute = function setAttribute (locale, key, value) {
    var obj, obj$1;

  this.merge(( obj$1 = {}, obj$1[locale] = {
      attributes: ( obj = {}, obj[key] = value, obj)
    }, obj$1));
};

Object.defineProperties( I18nDictionary.prototype, prototypeAccessors$5 );

var aggressive = function () { return ({
  on: ['input']
}); };

var lazy = function () { return ({
  on: ['change']
}); };

var eager = function (ref) {
  var errors = ref.errors;

  if (errors.length) {
    return {
      on: ['input']
    };
  }

  return {
    on: ['change', 'blur']
  };
};

var passive = function () { return ({
  on: []
}); };

var modes = {
  aggressive: aggressive,
  eager: eager,
  passive: passive,
  lazy: lazy
};

// 

var Vue$2;
var pendingPlugins;
var pluginInstance;

var VeeValidate$1 = function VeeValidate (config, _Vue) {
  this.configure(config);
  pluginInstance = this;
  if (_Vue) {
    Vue$2 = _Vue;
  }
  this._validator = setValidator(
    new Validator(null, { fastExit: config && config.fastExit }, this)
  );
  this._initVM(this.config);
  this._initI18n(this.config);
};

var prototypeAccessors$6 = { i18nDriver: { configurable: true },config: { configurable: true } };
var staticAccessors$2 = { i18nDriver: { configurable: true },config: { configurable: true } };

VeeValidate$1.setI18nDriver = function setI18nDriver (driver, instance) {
  DictionaryResolver.setDriver(driver, instance);
};

VeeValidate$1.configure = function configure (cfg) {
  setConfig(cfg);
};

VeeValidate$1.setMode = function setMode (mode, implementation) {
  setConfig({ mode: mode });
  if (!implementation) {
    return;
  }

  if (!isCallable(implementation)) {
    throw new Error('A mode implementation must be a function');
  }

  modes[mode] = implementation;
};

VeeValidate$1.use = function use (plugin, options) {
    if ( options === void 0 ) options = {};

  if (!isCallable(plugin)) {
    return warn$1('The plugin must be a callable function');
  }

  // Don't install plugins until vee-validate is installed.
  if (!pluginInstance) {
    if (!pendingPlugins) {
      pendingPlugins = [];
    }
    pendingPlugins.push({ plugin: plugin, options: options });
    return;
  }

  plugin({ Validator: Validator, ErrorBag: ErrorBag, Rules: Validator.rules }, options);
};
VeeValidate$1.install = function install (_Vue, opts) {
  if (Vue$2 && _Vue === Vue$2) {
    {
      warn$1('already installed, Vue.use(VeeValidate) should only be called once.');
    }
    return;
  }

  Vue$2 = _Vue;
  pluginInstance = new VeeValidate$1(opts);
  // inject the plugin container statically into the validator class
  Validator.$vee = pluginInstance;

  detectPassiveSupport();

  Vue$2.mixin(mixin);
  Vue$2.directive('validate', directive$1);
  if (pendingPlugins) {
    pendingPlugins.forEach(function (ref) {
        var plugin = ref.plugin;
        var options = ref.options;

      VeeValidate$1.use(plugin, options);
    });
    pendingPlugins = null;
  }
};

prototypeAccessors$6.i18nDriver.get = function () {
  return DictionaryResolver.getDriver();
};

staticAccessors$2.i18nDriver.get = function () {
  return DictionaryResolver.getDriver();
};

prototypeAccessors$6.config.get = function () {
  return getConfig();
};

staticAccessors$2.config.get = function () {
  return getConfig();
};

VeeValidate$1.prototype._initVM = function _initVM (config) {
    var this$1 = this;

  this._vm = new Vue$2({
    data: function () { return ({
      errors: this$1._validator.errors,
      fields: this$1._validator.fields
    }); }
  });
};

VeeValidate$1.prototype._initI18n = function _initI18n (config) {
    var this$1 = this;

  var dictionary = config.dictionary;
    var i18n = config.i18n;
    var i18nRootKey = config.i18nRootKey;
    var locale = config.locale;
  var onLocaleChanged = function () {
    if (dictionary) {
      this$1.i18nDriver.merge(dictionary);
    }

    this$1._validator.errors.regenerate();
  };

  // i18 is being used for localization.
  if (i18n) {
    VeeValidate$1.setI18nDriver('i18n', new I18nDictionary(i18n, i18nRootKey));
    i18n._vm.$watch('locale', onLocaleChanged);
  } else if (typeof window !== 'undefined') {
    this._vm.$on('localeChanged', onLocaleChanged);
  }

  if (dictionary) {
    this.i18nDriver.merge(dictionary);
  }

  if (locale && !i18n) {
    this._validator.localize(locale);
  }
};

VeeValidate$1.prototype.configure = function configure (cfg) {
  setConfig(cfg);
};

Object.defineProperties( VeeValidate$1.prototype, prototypeAccessors$6 );
Object.defineProperties( VeeValidate$1, staticAccessors$2 );

VeeValidate$1.mixin = mixin;
VeeValidate$1.directive = directive$1;
VeeValidate$1.Validator = Validator;
VeeValidate$1.ErrorBag = ErrorBag;

/**
 * Formates file size.
 *
 * @param {Number|String} size
 */
var formatFileSize = function (size) {
  var units = ['Byte', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
  var threshold = 1024;
  size = Number(size) * threshold;
  var i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(threshold));
  return (((size / Math.pow(threshold, i)).toFixed(2) * 1) + " " + (units[i]));
};

/**
 * Checks if vee-validate is defined globally.
 */
var isDefinedGlobally = function () {
  return typeof VeeValidate !== 'undefined';
};

var obj;

var messages = {
  _default: function (field) { return ("The " + field + " value is not valid"); },
  after: function (field, ref) {
    var target = ref[0];
    var inclusion = ref[1];

    return ("The " + field + " must be after " + (inclusion ? 'or equal to ' : '') + target);
},
  alpha: function (field) { return ("The " + field + " field may only contain alphabetic characters"); },
  alpha_dash: function (field) { return ("The " + field + " field may contain alpha-numeric characters as well as dashes and underscores"); },
  alpha_num: function (field) { return ("The " + field + " field may only contain alpha-numeric characters"); },
  alpha_spaces: function (field) { return ("The " + field + " field may only contain alphabetic characters as well as spaces"); },
  before: function (field, ref) {
    var target = ref[0];
    var inclusion = ref[1];

    return ("The " + field + " must be before " + (inclusion ? 'or equal to ' : '') + target);
},
  between: function (field, ref) {
    var min = ref[0];
    var max = ref[1];

    return ("The " + field + " field must be between " + min + " and " + max);
},
  confirmed: function (field) { return ("The " + field + " confirmation does not match"); },
  credit_card: function (field) { return ("The " + field + " field is invalid"); },
  date_between: function (field, ref) {
    var min = ref[0];
    var max = ref[1];

    return ("The " + field + " must be between " + min + " and " + max);
},
  date_format: function (field, ref) {
    var format = ref[0];

    return ("The " + field + " must be in the format " + format);
},
  decimal: function (field, ref) {
    if ( ref === void 0 ) ref = [];
    var decimals = ref[0]; if ( decimals === void 0 ) decimals = '*';

    return ("The " + field + " field must be numeric and may contain" + (!decimals || decimals === '*' ? '' : ' ' + decimals) + " decimal points");
},
  digits: function (field, ref) {
    var length = ref[0];

    return ("The " + field + " field must be numeric and contains exactly " + length + " digits");
},
  dimensions: function (field, ref) {
    var width = ref[0];
    var height = ref[1];

    return ("The " + field + " field must be " + width + " pixels by " + height + " pixels");
},
  email: function (field) { return ("The " + field + " field must be a valid email"); },
  excluded: function (field) { return ("The " + field + " field must be a valid value"); },
  ext: function (field) { return ("The " + field + " field must be a valid file"); },
  image: function (field) { return ("The " + field + " field must be an image"); },
  included: function (field) { return ("The " + field + " field must be a valid value"); },
  integer: function (field) { return ("The " + field + " field must be an integer"); },
  ip: function (field) { return ("The " + field + " field must be a valid ip address"); },
  ip_or_fqdn: function (field) { return ("The " + field + " field must be a valid ip address or FQDN"); },
  length: function (field, ref) {
    var length = ref[0];
    var max = ref[1];

    if (max) {
      return ("The " + field + " length must be between " + length + " and " + max);
    }

    return ("The " + field + " length must be " + length);
  },
  max: function (field, ref) {
    var length = ref[0];

    return ("The " + field + " field may not be greater than " + length + " characters");
},
  max_value: function (field, ref) {
    var max = ref[0];

    return ("The " + field + " field must be " + max + " or less");
},
  mimes: function (field) { return ("The " + field + " field must have a valid file type"); },
  min: function (field, ref) {
    var length = ref[0];

    return ("The " + field + " field must be at least " + length + " characters");
},
  min_value: function (field, ref) {
    var min = ref[0];

    return ("The " + field + " field must be " + min + " or more");
},
  numeric: function (field) { return ("The " + field + " field may only contain numeric characters"); },
  regex: function (field) { return ("The " + field + " field format is invalid"); },
  required: function (field) { return ("The " + field + " field is required"); },
  required_if: function (field, ref) {
    var target = ref[0];

    return ("The " + field + " field is required when the " + target + " field has this value");
},
  size: function (field, ref) {
    var size = ref[0];

    return ("The " + field + " size must be less than " + (formatFileSize(size)));
},
  url: function (field) { return ("The " + field + " field is not a valid URL"); }
};

var locale = {
  name: 'en',
  messages: messages,
  attributes: {}
};

if (isDefinedGlobally()) {
  // eslint-disable-next-line
  VeeValidate.Validator.localize(( obj = {}, obj[locale.name] = locale, obj));
}

function toInteger (dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number)
}

var MILLISECONDS_IN_MINUTE = 60000;

/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */
function getTimezoneOffsetInMilliseconds (dirtyDate) {
  var date = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = date.getTimezoneOffset();
  date.setSeconds(0, 0);
  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;

  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset
}

var MILLISECONDS_IN_HOUR = 3600000;
var MILLISECONDS_IN_MINUTE$1 = 60000;
var DEFAULT_ADDITIONAL_DIGITS = 2;

var patterns = {
  dateTimeDelimeter: /[T ]/,
  plainTime: /:/,
  timeZoneDelimeter: /[Z ]/i,

  // year tokens
  YY: /^(\d{2})$/,
  YYY: [
    /^([+-]\d{2})$/, // 0 additional digits
    /^([+-]\d{3})$/, // 1 additional digit
    /^([+-]\d{4})$/ // 2 additional digits
  ],
  YYYY: /^(\d{4})/,
  YYYYY: [
    /^([+-]\d{4})/, // 0 additional digits
    /^([+-]\d{5})/, // 1 additional digit
    /^([+-]\d{6})/ // 2 additional digits
  ],

  // date tokens
  MM: /^-(\d{2})$/,
  DDD: /^-?(\d{3})$/,
  MMDD: /^-?(\d{2})-?(\d{2})$/,
  Www: /^-?W(\d{2})$/,
  WwwD: /^-?W(\d{2})-?(\d{1})$/,

  HH: /^(\d{2}([.,]\d*)?)$/,
  HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
  HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,

  // timezone tokens
  timezone: /([Z+-].*)$/,
  timezoneZ: /^(Z)$/,
  timezoneHH: /^([+-])(\d{2})$/,
  timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/
};

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If an argument is a string, the function tries to parse it.
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 * If the function cannot parse the string or the values are invalid, it returns Invalid Date.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.
 *
 * @param {Date|String|Number} argument - the value to convert
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * var result = toDate('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * var result = toDate('+02014101', {additionalDigits: 1})
 * //=> Fri Apr 11 2014 00:00:00
 */
function toDate (argument, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  if (argument === null) {
    return new Date(NaN)
  }

  var options = dirtyOptions || {};

  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);
  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
    throw new RangeError('additionalDigits must be 0, 1 or 2')
  }

  // Clone the date
  if (argument instanceof Date ||
    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')
  ) {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime())
  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {
    return new Date(argument)
  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {
    return new Date(NaN)
  }

  var dateStrings = splitDateString(argument);

  var parseYearResult = parseYear(dateStrings.date, additionalDigits);
  var year = parseYearResult.year;
  var restDateString = parseYearResult.restDateString;

  var date = parseDate(restDateString, year);

  if (isNaN(date)) {
    return new Date(NaN)
  }

  if (date) {
    var timestamp = date.getTime();
    var time = 0;
    var offset;

    if (dateStrings.time) {
      time = parseTime(dateStrings.time);

      if (isNaN(time)) {
        return new Date(NaN)
      }
    }

    if (dateStrings.timezone) {
      offset = parseTimezone(dateStrings.timezone);
      if (isNaN(offset)) {
        return new Date(NaN)
      }
    } else {
      // get offset accurate to hour in timezones that change offset
      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));
      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));
    }

    return new Date(timestamp + time + offset)
  } else {
    return new Date(NaN)
  }
}

function splitDateString (dateString) {
  var dateStrings = {};
  var array = dateString.split(patterns.dateTimeDelimeter);
  var timeString;

  if (patterns.plainTime.test(array[0])) {
    dateStrings.date = null;
    timeString = array[0];
  } else {
    dateStrings.date = array[0];
    timeString = array[1];
    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {
      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];
      timeString = dateString.substr(dateStrings.date.length, dateString.length);
    }
  }

  if (timeString) {
    var token = patterns.timezone.exec(timeString);
    if (token) {
      dateStrings.time = timeString.replace(token[1], '');
      dateStrings.timezone = token[1];
    } else {
      dateStrings.time = timeString;
    }
  }

  return dateStrings
}

function parseYear (dateString, additionalDigits) {
  var patternYYY = patterns.YYY[additionalDigits];
  var patternYYYYY = patterns.YYYYY[additionalDigits];

  var token;

  // YYYY or ±YYYYY
  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);
  if (token) {
    var yearString = token[1];
    return {
      year: parseInt(yearString, 10),
      restDateString: dateString.slice(yearString.length)
    }
  }

  // YY or ±YYY
  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);
  if (token) {
    var centuryString = token[1];
    return {
      year: parseInt(centuryString, 10) * 100,
      restDateString: dateString.slice(centuryString.length)
    }
  }

  // Invalid ISO-formatted year
  return {
    year: null
  }
}

function parseDate (dateString, year) {
  // Invalid ISO-formatted year
  if (year === null) {
    return null
  }

  var token;
  var date;
  var month;
  var week;

  // YYYY
  if (dateString.length === 0) {
    date = new Date(0);
    date.setUTCFullYear(year);
    return date
  }

  // YYYY-MM
  token = patterns.MM.exec(dateString);
  if (token) {
    date = new Date(0);
    month = parseInt(token[1], 10) - 1;

    if (!validateDate(year, month)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, month);
    return date
  }

  // YYYY-DDD or YYYYDDD
  token = patterns.DDD.exec(dateString);
  if (token) {
    date = new Date(0);
    var dayOfYear = parseInt(token[1], 10);

    if (!validateDayOfYearDate(year, dayOfYear)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, 0, dayOfYear);
    return date
  }

  // YYYY-MM-DD or YYYYMMDD
  token = patterns.MMDD.exec(dateString);
  if (token) {
    date = new Date(0);
    month = parseInt(token[1], 10) - 1;
    var day = parseInt(token[2], 10);

    if (!validateDate(year, month, day)) {
      return new Date(NaN)
    }

    date.setUTCFullYear(year, month, day);
    return date
  }

  // YYYY-Www or YYYYWww
  token = patterns.Www.exec(dateString);
  if (token) {
    week = parseInt(token[1], 10) - 1;

    if (!validateWeekDate(year, week)) {
      return new Date(NaN)
    }

    return dayOfISOWeekYear(year, week)
  }

  // YYYY-Www-D or YYYYWwwD
  token = patterns.WwwD.exec(dateString);
  if (token) {
    week = parseInt(token[1], 10) - 1;
    var dayOfWeek = parseInt(token[2], 10) - 1;

    if (!validateWeekDate(year, week, dayOfWeek)) {
      return new Date(NaN)
    }

    return dayOfISOWeekYear(year, week, dayOfWeek)
  }

  // Invalid ISO-formatted date
  return null
}

function parseTime (timeString) {
  var token;
  var hours;
  var minutes;

  // hh
  token = patterns.HH.exec(timeString);
  if (token) {
    hours = parseFloat(token[1].replace(',', '.'));

    if (!validateTime(hours)) {
      return NaN
    }

    return (hours % 24) * MILLISECONDS_IN_HOUR
  }

  // hh:mm or hhmm
  token = patterns.HHMM.exec(timeString);
  if (token) {
    hours = parseInt(token[1], 10);
    minutes = parseFloat(token[2].replace(',', '.'));

    if (!validateTime(hours, minutes)) {
      return NaN
    }

    return (hours % 24) * MILLISECONDS_IN_HOUR +
      minutes * MILLISECONDS_IN_MINUTE$1
  }

  // hh:mm:ss or hhmmss
  token = patterns.HHMMSS.exec(timeString);
  if (token) {
    hours = parseInt(token[1], 10);
    minutes = parseInt(token[2], 10);
    var seconds = parseFloat(token[3].replace(',', '.'));

    if (!validateTime(hours, minutes, seconds)) {
      return NaN
    }

    return (hours % 24) * MILLISECONDS_IN_HOUR +
      minutes * MILLISECONDS_IN_MINUTE$1 +
      seconds * 1000
  }

  // Invalid ISO-formatted time
  return null
}

function parseTimezone (timezoneString) {
  var token;
  var absoluteOffset;

  // Z
  token = patterns.timezoneZ.exec(timezoneString);
  if (token) {
    return 0
  }

  var hours;

  // ±hh
  token = patterns.timezoneHH.exec(timezoneString);
  if (token) {
    hours = parseInt(token[2], 10);

    if (!validateTimezone()) {
      return NaN
    }

    absoluteOffset = hours * MILLISECONDS_IN_HOUR;
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  // ±hh:mm or ±hhmm
  token = patterns.timezoneHHMM.exec(timezoneString);
  if (token) {
    hours = parseInt(token[2], 10);
    var minutes = parseInt(token[3], 10);

    if (!validateTimezone(hours, minutes)) {
      return NaN
    }

    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1;
    return (token[1] === '+') ? -absoluteOffset : absoluteOffset
  }

  return 0
}

function dayOfISOWeekYear (isoWeekYear, week, day) {
  week = week || 0;
  day = day || 0;
  var date = new Date(0);
  date.setUTCFullYear(isoWeekYear, 0, 4);
  var fourthOfJanuaryDay = date.getUTCDay() || 7;
  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
  date.setUTCDate(date.getUTCDate() + diff);
  return date
}

// Validation functions

var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

function isLeapYearIndex (year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)
}

function validateDate (year, month, date) {
  if (month < 0 || month > 11) {
    return false
  }

  if (date != null) {
    if (date < 1) {
      return false
    }

    var isLeapYear = isLeapYearIndex(year);
    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {
      return false
    }
    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {
      return false
    }
  }

  return true
}

function validateDayOfYearDate (year, dayOfYear) {
  if (dayOfYear < 1) {
    return false
  }

  var isLeapYear = isLeapYearIndex(year);
  if (isLeapYear && dayOfYear > 366) {
    return false
  }
  if (!isLeapYear && dayOfYear > 365) {
    return false
  }

  return true
}

function validateWeekDate (year, week, day) {
  if (week < 0 || week > 52) {
    return false
  }

  if (day != null && (day < 0 || day > 6)) {
    return false
  }

  return true
}

function validateTime (hours, minutes, seconds) {
  if (hours != null && (hours < 0 || hours >= 25)) {
    return false
  }

  if (minutes != null && (minutes < 0 || minutes >= 60)) {
    return false
  }

  if (seconds != null && (seconds < 0 || seconds >= 60)) {
    return false
  }

  return true
}

function validateTimezone (hours, minutes) {
  if (minutes != null && (minutes < 0 || minutes > 59)) {
    return false
  }

  return true
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */
function addMilliseconds (dirtyDate, dirtyAmount, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var timestamp = toDate(dirtyDate, dirtyOptions).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount)
}

/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {*} date - the date to check
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Boolean} the date is valid
 * @throws {TypeError} 1 argument required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // For the valid date:
 * var result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * var result = isValid('2014-02-31')
 * //=> true
 *
 * @example
 * // For the invalid date:
 * var result = isValid(new Date(''))
 * //=> false
 */
function isValid (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  return !isNaN(date)
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },

  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },

  halfAMinute: 'half a minute',

  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },

  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },

  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },

  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },

  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },

  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },

  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },

  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },

  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },

  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },

  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};

function formatDistance (token, count, options) {
  options = options || {};

  var result;
  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result
    } else {
      return result + ' ago'
    }
  }

  return result
}

function buildFormatLongFn (args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format
  }
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};

var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};

var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};

var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),

  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),

  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};

function formatRelative (token, date, baseDate, options) {
  return formatRelativeLocale[token]
}

function buildLocalizeFn (args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var context = options.context ? String(options.context) : 'standalone';

    var valuesArray;
    if (context === 'formatting' && args.formattingValues) {
      valuesArray = args.formattingValues[width] || args.formattingValues[args.defaultFormattingWidth];
    } else {
      valuesArray = args.values[width] || args.values[args.defaultWidth];
    }
    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index]
  }
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};

var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
};

// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};

var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};

var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber (dirtyNumber, dirtyOptions) {
  var number = Number(dirtyNumber);

  // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st'
      case 2:
        return number + 'nd'
      case 3:
        return number + 'rd'
    }
  }
  return number + 'th'
}

var localize = {
  ordinalNumber: ordinalNumber,

  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),

  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1
    }
  }),

  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),

  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),

  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaulFormattingWidth: 'wide'
  })
};

function buildMatchPatternFn (args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};

    var matchResult = string.match(args.matchPattern);
    if (!matchResult) {
      return null
    }
    var matchedString = matchResult[0];

    var parseResult = string.match(args.parsePattern);
    if (!parseResult) {
      return null
    }
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;

    return {
      value: value,
      rest: string.slice(matchedString.length)
    }
  }
}

function buildMatchFn (args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;

    var matchPattern = (width && args.matchPatterns[width]) || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null
    }
    var matchedString = matchResult[0];

    var parsePatterns = (width && args.parsePatterns[width]) || args.parsePatterns[args.defaultParseWidth];

    var value;
    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = parsePatterns.findIndex(function (pattern) {
        return pattern.test(string)
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(string)
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;

    return {
      value: value,
      rest: string.slice(matchedString.length)
    }
  }
}

function findKey (object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key
    }
  }
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;

var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};

var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};

var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};

var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};

var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};

var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10)
    }
  }),

  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),

  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1
    }
  }),

  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),

  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),

  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */
var locale$1 = {
  formatDistance: formatDistance,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0 /* Sunday */,
    firstWeekContainsDate: 1
  }
};

var MILLISECONDS_IN_DAY = 86400000;

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCDayOfYear (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var timestamp = date.getTime();
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCISOWeek (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var weekStartsOn = 1;

  var date = toDate(dirtyDate, dirtyOptions);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCISOWeekYear (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var year = date.getUTCFullYear();

  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear, dirtyOptions);

  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year
  } else {
    return year - 1
  }
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCISOWeekYear (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var year = getUTCISOWeekYear(dirtyDate, dirtyOptions);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCISOWeek(fourthOfJanuary, dirtyOptions);
  return date
}

var MILLISECONDS_IN_WEEK = 604800000;

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCISOWeek (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var diff = startOfUTCISOWeek(date, dirtyOptions).getTime() - startOfUTCISOWeekYear(date, dirtyOptions).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCWeek (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')
  }

  var date = toDate(dirtyDate, options);
  var day = date.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;

  date.setUTCDate(date.getUTCDate() - diff);
  date.setUTCHours(0, 0, 0, 0);
  return date
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCWeekYear (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var year = date.getUTCFullYear();

  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale &&
    locale.options &&
    locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively')
  }

  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);

  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

  if (date.getTime() >= startOfNextYear.getTime()) {
    return year + 1
  } else if (date.getTime() >= startOfThisYear.getTime()) {
    return year
  } else {
    return year - 1
  }
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function startOfUTCWeekYear (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeFirstWeekContainsDate = locale &&
    locale.options &&
    locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate);

  var year = getUTCWeekYear(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date = startOfUTCWeek(firstWeek, dirtyOptions);
  return date
}

var MILLISECONDS_IN_WEEK$1 = 604800000;

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function getUTCWeek (dirtyDate, dirtyOptions) {
  if (arguments.length < 1) {
    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var diff = startOfUTCWeek(date, dirtyOptions).getTime() - startOfUTCWeekYear(date, dirtyOptions).getTime();

  // Round the number of days to the nearest integer
  // because the number of milliseconds in a week is not constant
  // (e.g. it's different in the week of the daylight saving time clock shift)
  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1
}

var dayPeriodEnum = {
  am: 'am',
  pm: 'pm',
  midnight: 'midnight',
  noon: 'noon',
  morning: 'morning',
  afternoon: 'afternoon',
  evening: 'evening',
  night: 'night'
};

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */

var formatters = {
  // Era
  G: function (date, token, localize) {
    var era = date.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      // AD, BC
      case 'G':
      case 'GG':
      case 'GGG':
        return localize.era(era, {width: 'abbreviated'})
      // A, B
      case 'GGGGG':
        return localize.era(era, {width: 'narrow'})
      // Anno Domini, Before Christ
      case 'GGGG':
      default:
        return localize.era(era, {width: 'wide'})
    }
  },

  // Year
  y: function (date, token, localize, options) {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

    var signedYear = date.getUTCFullYear();

    // Returns 1 for 1 BC (which is year 0 in JavaScript)
    var year = signedYear > 0 ? signedYear : 1 - signedYear;

    // Two digit year
    if (token === 'yy') {
      var twoDigitYear = year % 100;
      return addLeadingZeros(twoDigitYear, 2)
    }

    // Ordinal number
    if (token === 'yo') {
      return localize.ordinalNumber(year, {unit: 'year'})
    }

    // Padding
    return addLeadingZeros(year, token.length)
  },

  // Local week-numbering year
  Y: function (date, token, localize, options) {
    var signedWeekYear = getUTCWeekYear(date, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;

    // Two digit year
    if (token === 'YY') {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2)
    }

    // Ordinal number
    if (token === 'Yo') {
      return localize.ordinalNumber(weekYear, {unit: 'year'})
    }

    // Padding
    return addLeadingZeros(weekYear, token.length)
  },

  // ISO week-numbering year
  R: function (date, token, localize, options) {
    var isoWeekYear = getUTCISOWeekYear(date, options);

    // Padding
    return addLeadingZeros(isoWeekYear, token.length)
  },

  // Extended year. This is a single number designating the year of this calendar system.
  // The main difference between `y` and `u` localizers are B.C. years:
  // | Year | `y` | `u` |
  // |------|-----|-----|
  // | AC 1 |   1 |   1 |
  // | BC 1 |   1 |   0 |
  // | BC 2 |   2 |  -1 |
  // Also `yy` always returns the last two digits of a year,
  // while `uu` pads single digit years to 2 characters and returns other years unchanged.
  u: function (date, token, localize, options) {
    var year = date.getUTCFullYear();
    return addLeadingZeros(year, token.length)
  },

  // Quarter
  Q: function (date, token, localize, options) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case 'Q':
        return String(quarter)
      // 01, 02, 03, 04
      case 'QQ':
        return addLeadingZeros(quarter, 2)
      // 1st, 2nd, 3rd, 4th
      case 'Qo':
        return localize.ordinalNumber(quarter, {unit: 'quarter'})
      // Q1, Q2, Q3, Q4
      case 'QQQ':
        return localize.quarter(quarter, {width: 'abbreviated', context: 'formatting'})
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case 'QQQQQ':
        return localize.quarter(quarter, {width: 'narrow', context: 'formatting'})
      // 1st quarter, 2nd quarter, ...
      case 'QQQQ':
      default:
        return localize.quarter(quarter, {width: 'wide', context: 'formatting'})
    }
  },

  // Stand-alone quarter
  q: function (date, token, localize, options) {
    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);
    switch (token) {
      // 1, 2, 3, 4
      case 'q':
        return String(quarter)
      // 01, 02, 03, 04
      case 'qq':
        return addLeadingZeros(quarter, 2)
      // 1st, 2nd, 3rd, 4th
      case 'qo':
        return localize.ordinalNumber(quarter, {unit: 'quarter'})
      // Q1, Q2, Q3, Q4
      case 'qqq':
        return localize.quarter(quarter, {width: 'abbreviated', context: 'standalone'})
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case 'qqqqq':
        return localize.quarter(quarter, {width: 'narrow', context: 'standalone'})
      // 1st quarter, 2nd quarter, ...
      case 'qqqq':
      default:
        return localize.quarter(quarter, {width: 'wide', context: 'standalone'})
    }
  },

  // Month
  M: function (date, token, localize, options) {
    var month = date.getUTCMonth();
    switch (token) {
      // 1, 2, ..., 12
      case 'M':
        return String(month + 1)
      // 01, 02, ..., 12
      case 'MM':
        return addLeadingZeros(month + 1, 2)
      // 1st, 2nd, ..., 12th
      case 'Mo':
        return localize.ordinalNumber(month + 1, {unit: 'month'})
      // Jan, Feb, ..., Dec
      case 'MMM':
        return localize.month(month, {width: 'abbreviated', context: 'formatting'})
      // J, F, ..., D
      case 'MMMMM':
        return localize.month(month, {width: 'narrow', context: 'formatting'})
      // January, February, ..., December
      case 'MMMM':
      default:
        return localize.month(month, {width: 'wide', context: 'formatting'})
    }
  },

  // Stand-alone month
  L: function (date, token, localize, options) {
    var month = date.getUTCMonth();
    switch (token) {
      // 1, 2, ..., 12
      case 'L':
        return String(month + 1)
      // 01, 02, ..., 12
      case 'LL':
        return addLeadingZeros(month + 1, 2)
      // 1st, 2nd, ..., 12th
      case 'Lo':
        return localize.ordinalNumber(month + 1, {unit: 'month'})
      // Jan, Feb, ..., Dec
      case 'LLL':
        return localize.month(month, {width: 'abbreviated', context: 'standalone'})
      // J, F, ..., D
      case 'LLLLL':
        return localize.month(month, {width: 'narrow', context: 'standalone'})
      // January, February, ..., December
      case 'LLLL':
      default:
        return localize.month(month, {width: 'wide', context: 'standalone'})
    }
  },

  // Local week of year
  w: function (date, token, localize, options) {
    var week = getUTCWeek(date, options);

    if (token === 'wo') {
      return localize.ordinalNumber(week, {unit: 'week'})
    }

    return addLeadingZeros(week, token.length)
  },

  // ISO week of year
  I: function (date, token, localize, options) {
    var isoWeek = getUTCISOWeek(date, options);

    if (token === 'Io') {
      return localize.ordinalNumber(isoWeek, {unit: 'week'})
    }

    return addLeadingZeros(isoWeek, token.length)
  },

  // Day of the month
  d: function (date, token, localize, options) {
    var dayOfMonth = date.getUTCDate();

    if (token === 'do') {
      return localize.ordinalNumber(dayOfMonth, {unit: 'date'})
    }

    return addLeadingZeros(dayOfMonth, token.length)
  },

  // Day of year
  D: function (date, token, localize, options) {
    var dayOfYear = getUTCDayOfYear(date, options);

    if (token === 'Do') {
      return localize.ordinalNumber(dayOfYear, {unit: 'dayOfYear'})
    }

    return addLeadingZeros(dayOfYear, token.length)
  },

  // Day of week
  E: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    switch (token) {
      // Tue
      case 'E':
      case 'EE':
      case 'EEE':
        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})
      // T
      case 'EEEEE':
        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})
      // Tu
      case 'EEEEEE':
        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})
      // Tuesday
      case 'EEEE':
      default:
        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})
    }
  },

  // Local day of week
  e: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = ((dayOfWeek - options.weekStartsOn + 8) % 7) || 7;
    switch (token) {
      // Numerical value (Nth day of week with current locale or weekStartsOn)
      case 'e':
        return String(localDayOfWeek)
      // Padded numerical value
      case 'ee':
        return addLeadingZeros(localDayOfWeek, 2)
      // 1st, 2nd, ..., 7th
      case 'eo':
        return localize.ordinalNumber(localDayOfWeek, {unit: 'day'})
      case 'eee':
        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})
      // T
      case 'eeeee':
        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})
      // Tu
      case 'eeeeee':
        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})
      // Tuesday
      case 'eeee':
      default:
        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})
    }
  },

  // Stand-alone local day of week
  c: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var localDayOfWeek = ((dayOfWeek - options.weekStartsOn + 8) % 7) || 7;
    switch (token) {
      // Numerical value (same as in `e`)
      case 'c':
        return String(localDayOfWeek)
      // Padded numberical value
      case 'cc':
        return addLeadingZeros(localDayOfWeek, token.length)
      // 1st, 2nd, ..., 7th
      case 'co':
        return localize.ordinalNumber(localDayOfWeek, {unit: 'day'})
      case 'ccc':
        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'standalone'})
      // T
      case 'ccccc':
        return localize.day(dayOfWeek, {width: 'narrow', context: 'standalone'})
      // Tu
      case 'cccccc':
        return localize.day(dayOfWeek, {width: 'short', context: 'standalone'})
      // Tuesday
      case 'cccc':
      default:
        return localize.day(dayOfWeek, {width: 'wide', context: 'standalone'})
    }
  },

  // ISO day of week
  i: function (date, token, localize, options) {
    var dayOfWeek = date.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      // 2
      case 'i':
        return String(isoDayOfWeek)
      // 02
      case 'ii':
        return addLeadingZeros(isoDayOfWeek, token.length)
      // 2nd
      case 'io':
        return localize.ordinalNumber(isoDayOfWeek, {unit: 'day'})
      // Tue
      case 'iii':
        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})
      // T
      case 'iiiii':
        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})
      // Tu
      case 'iiiiii':
        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})
      // Tuesday
      case 'iiii':
      default:
        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})
    }
  },

  // AM or PM
  a: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue = (hours / 12) >= 1 ? 'pm' : 'am';

    switch (token) {
      case 'a':
      case 'aa':
      case 'aaa':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})
      case 'aaaaa':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})
      case 'aaaa':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})
    }
  },

  // AM, PM, midnight, noon
  b: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = (hours / 12) >= 1 ? 'pm' : 'am';
    }

    switch (token) {
      case 'b':
      case 'bb':
      case 'bbb':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})
      case 'bbbbb':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})
      case 'bbbb':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})
    }
  },

  // in the morning, in the afternoon, in the evening, at night
  B: function (date, token, localize) {
    var hours = date.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }

    switch (token) {
      case 'B':
      case 'BB':
      case 'BBB':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})
      case 'BBBBB':
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})
      case 'BBBB':
      default:
        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})
    }
  },

  // Hour [1-12]
  h: function (date, token, localize, options) {
    var hours = date.getUTCHours() % 12;

    if (hours === 0) {
      hours = 12;
    }

    if (token === 'ho') {
      return localize.ordinalNumber(hours, {unit: 'hour'})
    }

    return addLeadingZeros(hours, token.length)
  },

  // Hour [0-23]
  H: function (date, token, localize, options) {
    var hours = date.getUTCHours();

    if (token === 'Ho') {
      return localize.ordinalNumber(hours, {unit: 'hour'})
    }

    return addLeadingZeros(hours, token.length)
  },

  // Hour [0-11]
  K: function (date, token, localize, options) {
    var hours = date.getUTCHours() % 12;

    if (token === 'Ko') {
      return localize.ordinalNumber(hours, {unit: 'hour'})
    }

    return addLeadingZeros(hours, token.length)
  },

  // Hour [1-24]
  k: function (date, token, localize, options) {
    var hours = date.getUTCHours();

    if (hours === 0) {
      hours = 24;
    }

    if (token === 'ko') {
      return localize.ordinalNumber(hours, {unit: 'hour'})
    }

    return addLeadingZeros(hours, token.length)
  },

  // Minute
  m: function (date, token, localize, options) {
    var minutes = date.getUTCMinutes();

    if (token === 'mo') {
      return localize.ordinalNumber(minutes, {unit: 'minute'})
    }

    return addLeadingZeros(minutes, token.length)
  },

  // Second
  s: function (date, token, localize, options) {
    var seconds = date.getUTCSeconds();

    if (token === 'so') {
      return localize.ordinalNumber(seconds, {unit: 'second'})
    }

    return addLeadingZeros(seconds, token.length)
  },

  // Fraction of second
  S: function (date, token, localize, options) {
    var numberOfDigits = token.length;
    var milliseconds = date.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, numberOfDigits)
  },

  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
  X: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    if (timezoneOffset === 0) {
      return 'Z'
    }

    switch (token) {
      // Hours and optional minutes
      case 'X':
        return formatTimezoneWithOptionalMinutes(timezoneOffset)

      // Hours, minutes and optional seconds without `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XX`
      case 'XXXX':
      case 'XX': // Hours and minutes without `:` delimeter
        return formatTimezone(timezoneOffset)

      // Hours, minutes and optional seconds with `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `XXX`
      case 'XXXXX':
      case 'XXX': // Hours and minutes with `:` delimeter
      default:
        return formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
  x: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Hours and optional minutes
      case 'x':
        return formatTimezoneWithOptionalMinutes(timezoneOffset)

      // Hours, minutes and optional seconds without `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xx`
      case 'xxxx':
      case 'xx': // Hours and minutes without `:` delimeter
        return formatTimezone(timezoneOffset)

      // Hours, minutes and optional seconds with `:` delimeter
      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
      // so this token always has the same output as `xxx`
      case 'xxxxx':
      case 'xxx': // Hours and minutes with `:` delimeter
      default:
        return formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (GMT)
  O: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'O':
      case 'OO':
      case 'OOO':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')
      // Long
      case 'OOOO':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':')
    }
  },

  // Timezone (specific non-location)
  z: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timezoneOffset = originalDate.getTimezoneOffset();

    switch (token) {
      // Short
      case 'z':
      case 'zz':
      case 'zzz':
        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')
      // Long
      case 'zzzz':
      default:
        return 'GMT' + formatTimezone(timezoneOffset, ':')
    }
  },

  // Seconds timestamp
  t: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = Math.floor(originalDate.getTime() / 1000);
    return addLeadingZeros(timestamp, token.length)
  },

  // Milliseconds timestamp
  T: function (date, token, localize, options) {
    var originalDate = options._originalDate || date;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length)
  }
};

function addLeadingZeros (number, targetLength) {
  var sign = number < 0 ? '-' : '';
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = '0' + output;
  }
  return sign + output
}

function formatTimezone (offset, dirtyDelimeter) {
  var delimeter = dirtyDelimeter || '';
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimeter + minutes
}

function formatTimezoneWithOptionalMinutes (offset, dirtyDelimeter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? '-' : '+';
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2)
  }
  return formatTimezone(offset, dirtyDelimeter)
}

function formatTimezoneShort (offset, dirtyDelimeter) {
  var sign = offset > 0 ? '-' : '+';
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours)
  }
  var delimeter = dirtyDelimeter || '';
  return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2)
}

function dateLongFormatter (pattern, formatLong, options) {
  switch (pattern) {
    case 'P':
      return formatLong.date({width: 'short'})
    case 'PP':
      return formatLong.date({width: 'medium'})
    case 'PPP':
      return formatLong.date({width: 'long'})
    case 'PPPP':
    default:
      return formatLong.date({width: 'full'})
  }
}

function timeLongFormatter (pattern, formatLong, options) {
  switch (pattern) {
    case 'p':
      return formatLong.time({width: 'short'})
    case 'pp':
      return formatLong.time({width: 'medium'})
    case 'ppp':
      return formatLong.time({width: 'long'})
    case 'pppp':
    default:
      return formatLong.time({width: 'full'})
  }
}

function dateTimeLongFormatter (pattern, formatLong, options) {
  var matchResult = pattern.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];

  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong)
  }

  var dateTimeFormat;

  switch (datePattern) {
    case 'P':
      dateTimeFormat = formatLong.dateTime({width: 'short'});
      break
    case 'PP':
      dateTimeFormat = formatLong.dateTime({width: 'medium'});
      break
    case 'PPP':
      dateTimeFormat = formatLong.dateTime({width: 'long'});
      break
    case 'PPPP':
    default:
      dateTimeFormat = formatLong.dateTime({width: 'full'});
      break
  }

  return dateTimeFormat
    .replace('{{date}}', dateLongFormatter(datePattern, formatLong))
    .replace('{{time}}', timeLongFormatter(timePattern, formatLong))
}

var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @param {Date|String|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be subtracted
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Date} the new date with the milliseconds subtracted
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */
function subMilliseconds (dirtyDate, dirtyAmount, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, -amount, dirtyOptions)
}

var protectedTokens = ['D', 'DD', 'YY', 'YYYY'];

function isProtectedToken(token) {
  return protectedTokens.indexOf(token) !== -1
}

function throwProtectedError(token) {
  throw new RangeError(
    '`options.awareOfUnicodeTokens` must be set to `true` to use `' +
      token +
      '` token; see: https://git.io/fxCyr'
  )
}

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;

var escapedStringRegExp = /^'(.*?)'?$/;
var doubleQuoteRegExp = /''/g;

/**
 * @name format
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          | a..aaa  | AM, PM                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 0001, ..., 999               |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 05/29/1453                        | 7     |
 * |                                 | PP      | May 29, 1453                      | 7     |
 * |                                 | PPP     | May 29th, 1453                    | 7     |
 * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
 * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
 *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. These tokens are often confused with others. See: https://git.io/fxCyr
 *
 * @param {Date|String|Number} date - the original date
 * @param {String} format - the string of tokens
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:
 *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).
 *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).
 *   See: https://git.io/fxCyr
 * @returns {String} the formatted date string
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 * @throws {RangeError} `options.locale` must contain `localize` property
 * @throws {RangeError} `options.locale` must contain `formatLong` property
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * var result = format(
 *   new Date(2014, 1, 11),
 *   'MM/dd/yyyy'
 * )
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = format(
 *   new Date(2014, 6, 2),
 *   "do 'de' MMMM yyyy",
 *   {locale: eoLocale}
 * )
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * var result = format(
 *   new Date(2014, 6, 2, 15),
 *   "h 'o''clock'"
 * )
 * //=> "3 o'clock"
 */
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError(
      '2 arguments required, but only ' + arguments.length + ' present'
    )
  }

  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};

  var locale = options.locale || locale$1;

  var localeFirstWeekContainsDate =
    locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError(
      'firstWeekContainsDate must be between 1 and 7 inclusively'
    )
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')
  }

  if (!locale.localize) {
    throw new RangeError('locale must contain localize property')
  }

  if (!locale.formatLong) {
    throw new RangeError('locale must contain formatLong property')
  }

  var originalDate = toDate(dirtyDate, options);

  if (!isValid(originalDate, options)) {
    return 'Invalid Date'
  }

  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds(originalDate, timezoneOffset, options);

  var formatterOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale,
    _originalDate: originalDate
  };

  var result = formatStr
    .match(longFormattingTokensRegExp)
    .map(function(substring) {
      var firstCharacter = substring[0];
      if (firstCharacter === 'p' || firstCharacter === 'P') {
        var longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong, formatterOptions)
      }
      return substring
    })
    .join('')
    .match(formattingTokensRegExp)
    .map(function(substring) {
      // Replace two single quote characters with one single quote character
      if (substring === "''") {
        return "'"
      }

      var firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return cleanEscapedString(substring)
      }

      var formatter = formatters[firstCharacter];
      if (formatter) {
        if (!options.awareOfUnicodeTokens && isProtectedToken(substring)) {
          throwProtectedError(substring);
        }
        return formatter(utcDate, substring, locale.localize, formatterOptions)
      }

      return substring
    })
    .join('');

  return result
}

function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'")
}

/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @param {Date|String|Number} date - the date that should be after the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Boolean} the first date is after the second date
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */
function isAfter (dirtyDate, dirtyDateToCompare, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);
  return date.getTime() > dateToCompare.getTime()
}

/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @param {Date|String|Number} date - the date that should be before the other one to return true
 * @param {Date|String|Number} dateToCompare - the date to compare with
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Boolean} the first date is before the second date
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */
function isBefore (dirtyDate, dirtyDateToCompare, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);
  return date.getTime() < dateToCompare.getTime()
}

/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @param {Date|String|Number} dateLeft - the first date to compare
 * @param {Date|String|Number} dateRight - the second date to compare
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @returns {Boolean} the dates are equal
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * var result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0)
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */
function isEqual$1 (dirtyLeftDate, dirtyRightDate, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var dateLeft = toDate(dirtyLeftDate, dirtyOptions);
  var dateRight = toDate(dirtyRightDate, dirtyOptions);
  return dateLeft.getTime() === dateRight.getTime()
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function setUTCDay (dirtyDate, dirtyDay, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var options = dirtyOptions || {};
  var locale = options.locale;
  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var day = toInteger(dirtyDay);

  var currentDay = date.getUTCDay();

  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;

  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;

  date.setUTCDate(date.getUTCDate() + diff);
  return date
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function setUTCWeek (dirtyDate, dirtyWeek, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var week = toInteger(dirtyWeek);
  var diff = getUTCWeek(date, dirtyOptions) - week;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function setUTCISODay (dirtyDate, dirtyDay, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var day = toInteger(dirtyDay);

  if (day % 7 === 0) {
    day = day - 7;
  }

  var weekStartsOn = 1;
  var date = toDate(dirtyDate, dirtyOptions);
  var currentDay = date.getUTCDay();

  var remainder = day % 7;
  var dayIndex = (remainder + 7) % 7;

  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;

  date.setUTCDate(date.getUTCDate() + diff);
  return date
}

// This function will be a part of public API when UTC function will be implemented.
// See issue: https://github.com/date-fns/date-fns/issues/376
function setUTCISOWeek (dirtyDate, dirtyISOWeek, dirtyOptions) {
  if (arguments.length < 2) {
    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')
  }

  var date = toDate(dirtyDate, dirtyOptions);
  var isoWeek = toInteger(dirtyISOWeek);
  var diff = getUTCISOWeek(date, dirtyOptions) - isoWeek;
  date.setUTCDate(date.getUTCDate() - diff * 7);
  return date
}

var MILLISECONDS_IN_HOUR$1 = 3600000;
var MILLISECONDS_IN_MINUTE$2 = 60000;
var MILLISECONDS_IN_SECOND = 1000;

var numericPatterns = {
  month: /^(1[0-2]|0?\d)/, // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/, // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/, // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/, // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/, // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/, // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/, // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/, // 0 to 12
  minute: /^[0-5]?\d/, // 0 to 59
  second: /^[0-5]?\d/, // 0 to 59

  singleDigit: /^\d/, // 0 to 9
  twoDigits: /^\d{1,2}/, // 0 to 99
  threeDigits: /^\d{1,3}/, // 0 to 999
  fourDigits: /^\d{1,4}/, // 0 to 9999

  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/, // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/, // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/, // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/ // 0 to 9999, -0 to -9999
};

var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

function parseNumericPattern (pattern, string, valueCallback) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null
  }

  var value = parseInt(matchResult[0], 10);

  return {
    value: valueCallback ? valueCallback(value) : value,
    rest: string.slice(matchResult[0].length)
  }
}

function parseTimezonePattern (pattern, string) {
  var matchResult = string.match(pattern);

  if (!matchResult) {
    return null
  }

  // Input is 'Z'
  if (matchResult[0] === 'Z') {
    return {
      value: 0,
      rest: string.slice(1)
    }
  }

  var sign = matchResult[1] === '+' ? 1 : -1;
  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;

  return {
    value: sign * (
      hours * MILLISECONDS_IN_HOUR$1 +
        minutes * MILLISECONDS_IN_MINUTE$2 +
        seconds * MILLISECONDS_IN_SECOND
    ),
    rest: string.slice(matchResult[0].length)
  }
}

function parseAnyDigitsSigned (string, valueCallback) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback)
}

function parseNDigits (n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback)
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback)
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback)
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback)
    default:
      return parseNumericPattern(new RegExp('^\\d{1,' + n + '}'), string, valueCallback)
  }
}

function parseNDigitsSigned (n, string, valueCallback) {
  switch (n) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback)
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback)
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback)
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback)
    default:
      return parseNumericPattern(new RegExp('^-?\\d{1,' + n + '}'), string, valueCallback)
  }
}

function dayPeriodEnumToHours (enumValue) {
  switch (enumValue) {
    case 'morning':
      return 4
    case 'evening':
      return 17
    case 'pm':
    case 'noon':
    case 'afternoon':
      return 12
    case 'am':
    case 'midnight':
    case 'night':
    default:
      return 0
  }
}

function normalizeTwoDigitYear (twoDigitYear, currentYear) {
  var isCommonEra = currentYear > 0;
  // Absolute number of the current year:
  // 1 -> 1 AC
  // 0 -> 1 BC
  // -1 -> 2 BC
  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;

  var result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    var rangeEnd = absCurrentYear + 50;
    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;
    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }

  return isCommonEra ? result : 1 - result
}

var DAYS_IN_MONTH$1 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR$1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

// User for validation
function isLeapYearIndex$1 (year) {
  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)
}

/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */
var parsers = {
  // Era
  G: {
    priority: 140,
    parse: function (string, token, match, options) {
      switch (token) {
        // AD, BC
        case 'G':
        case 'GG':
        case 'GGG':
          return match.era(string, {width: 'abbreviated'}) ||
            match.era(string, {width: 'narrow'})
        // A, B
        case 'GGGGG':
          return match.era(string, {width: 'narrow'})
        // Anno Domini, Before Christ
        case 'GGGG':
        default:
          return match.era(string, {width: 'wide'}) ||
            match.era(string, {width: 'abbreviated'}) ||
            match.era(string, {width: 'narrow'})
      }
    },
    set: function (date, value, options) {
      // Sets year 10 BC if BC, or 10 AC if AC
      date.setUTCFullYear(value === 1 ? 10 : -9, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Year
  y: {
    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
    // |----------|-------|----|-------|-------|-------|
    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |

    priority: 130,
    parse: function (string, token, match, options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'yy'
        }
      };

      switch (token) {
        case 'y':
          return parseNDigits(4, string, valueCallback)
        case 'yo':
          return match.ordinalNumber(string, {unit: 'year', valueCallback: valueCallback})
        default:
          return parseNDigits(token.length, string, valueCallback)
      }
    },
    validate: function (date, value, options) {
      return value.isTwoDigitYear || value.year > 0
    },
    set: function (date, value, options) {
      var currentYear = getUTCWeekYear(date, options);

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);
        date.setUTCHours(0, 0, 0, 0);
        return date
      }

      var year = currentYear > 0 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Local week-numbering year
  Y: {
    priority: 130,
    parse: function (string, token, match, options) {
      var valueCallback = function (year) {
        return {
          year: year,
          isTwoDigitYear: token === 'YY'
        }
      };

      switch (token) {
        case 'Y':
          return parseNDigits(4, string, valueCallback)
        case 'Yo':
          return match.ordinalNumber(string, {unit: 'year', valueCallback: valueCallback})
        default:
          return parseNDigits(token.length, string, valueCallback)
      }
    },
    validate: function (date, value, options) {
      return value.isTwoDigitYear || value.year > 0
    },
    set: function (date, value, options) {
      var currentYear = date.getUTCFullYear();

      if (value.isTwoDigitYear) {
        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);
        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
        date.setUTCHours(0, 0, 0, 0);
        return startOfUTCWeek(date, options)
      }

      var year = currentYear > 0 ? value.year : 1 - value.year;
      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);
      date.setUTCHours(0, 0, 0, 0);
      return startOfUTCWeek(date, options)
    }
  },

  // ISO week-numbering year
  R: {
    priority: 130,
    parse: function (string, token, match, options) {
      if (token === 'R') {
        return parseNDigitsSigned(4, string)
      }

      return parseNDigitsSigned(token.length, string)
    },
    set: function (date, value, options) {
      var firstWeekOfYear = new Date(0);
      firstWeekOfYear.setUTCFullYear(value, 0, 4);
      firstWeekOfYear.setUTCHours(0, 0, 0, 0);
      return startOfUTCISOWeek(firstWeekOfYear)
    }
  },

  // Extended year
  u: {
    priority: 130,
    parse: function (string, token, match, options) {
      if (token === 'u') {
        return parseNDigitsSigned(4, string)
      }

      return parseNDigitsSigned(token.length, string)
    },
    set: function (date, value, options) {
      date.setUTCFullYear(value, 0, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Quarter
  Q: {
    priority: 120,
    parse: function (string, token, match, options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'Q':
        case 'QQ': // 01, 02, 03, 04
          return parseNDigits(token.length, string)
        // 1st, 2nd, 3rd, 4th
        case 'Qo':
          return match.ordinalNumber(string, {unit: 'quarter'})
        // Q1, Q2, Q3, Q4
        case 'QQQ':
          return match.quarter(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.quarter(string, {width: 'narrow', context: 'formatting'})
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'QQQQQ':
          return match.quarter(string, {width: 'narrow', context: 'formatting'})
        // 1st quarter, 2nd quarter, ...
        case 'QQQQ':
        default:
          return match.quarter(string, {width: 'wide', context: 'formatting'}) ||
            match.quarter(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.quarter(string, {width: 'narrow', context: 'formatting'})
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 4
    },
    set: function (date, value, options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Stand-alone quarter
  q: {
    priority: 120,
    parse: function (string, token, match, options) {
      switch (token) {
        // 1, 2, 3, 4
        case 'q':
        case 'qq': // 01, 02, 03, 04
          return parseNDigits(token.length, string)
        // 1st, 2nd, 3rd, 4th
        case 'qo':
          return match.ordinalNumber(string, {unit: 'quarter'})
        // Q1, Q2, Q3, Q4
        case 'qqq':
          return match.quarter(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.quarter(string, {width: 'narrow', context: 'standalone'})
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case 'qqqqq':
          return match.quarter(string, {width: 'narrow', context: 'standalone'})
        // 1st quarter, 2nd quarter, ...
        case 'qqqq':
        default:
          return match.quarter(string, {width: 'wide', context: 'standalone'}) ||
            match.quarter(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.quarter(string, {width: 'narrow', context: 'standalone'})
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 4
    },
    set: function (date, value, options) {
      date.setUTCMonth((value - 1) * 3, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Month
  M: {
    priority: 110,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        return value - 1
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'M':
          return parseNumericPattern(numericPatterns.month, string, valueCallback)
        // 01, 02, ..., 12
        case 'MM':
          return parseNDigits(2, string, valueCallback)
        // 1st, 2nd, ..., 12th
        case 'Mo':
          return match.ordinalNumber(string, {unit: 'month', valueCallback: valueCallback})
        // Jan, Feb, ..., Dec
        case 'MMM':
          return match.month(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.month(string, {width: 'narrow', context: 'formatting'})
        // J, F, ..., D
        case 'MMMMM':
          return match.month(string, {width: 'narrow', context: 'formatting'})
        // January, February, ..., December
        case 'MMMM':
        default:
          return match.month(string, {width: 'wide', context: 'formatting'}) ||
            match.month(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.month(string, {width: 'narrow', context: 'formatting'})
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 11
    },
    set: function (date, value, options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Stand-alone month
  L: {
    priority: 110,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        return value - 1
      };

      switch (token) {
        // 1, 2, ..., 12
        case 'L':
          return parseNumericPattern(numericPatterns.month, string, valueCallback)
        // 01, 02, ..., 12
        case 'LL':
          return parseNDigits(2, string, valueCallback)
        // 1st, 2nd, ..., 12th
        case 'Lo':
          return match.ordinalNumber(string, {unit: 'month', valueCallback: valueCallback})
        // Jan, Feb, ..., Dec
        case 'LLL':
          return match.month(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.month(string, {width: 'narrow', context: 'standalone'})
        // J, F, ..., D
        case 'LLLLL':
          return match.month(string, {width: 'narrow', context: 'standalone'})
        // January, February, ..., December
        case 'LLLL':
        default:
          return match.month(string, {width: 'wide', context: 'standalone'}) ||
            match.month(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.month(string, {width: 'narrow', context: 'standalone'})
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 11
    },
    set: function (date, value, options) {
      date.setUTCMonth(value, 1);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Local week of year
  w: {
    priority: 100,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'w':
          return parseNumericPattern(numericPatterns.week, string)
        case 'wo':
          return match.ordinalNumber(string, {unit: 'week'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 53
    },
    set: function (date, value, options) {
      return startOfUTCWeek(setUTCWeek(date, value, options), options)
    }
  },

  // ISO week of year
  I: {
    priority: 100,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'I':
          return parseNumericPattern(numericPatterns.week, string)
        case 'Io':
          return match.ordinalNumber(string, {unit: 'week'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 53
    },
    set: function (date, value, options) {
      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options)
    }
  },

  // Day of the month
  d: {
    priority: 90,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'd':
          return parseNumericPattern(numericPatterns.date, string)
        case 'do':
          return match.ordinalNumber(string, {unit: 'date'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      var month = date.getUTCMonth();
      if (isLeapYear) {
        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR$1[month]
      } else {
        return value >= 1 && value <= DAYS_IN_MONTH$1[month]
      }
    },
    set: function (date, value, options) {
      date.setUTCDate(value);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Day of year
  D: {
    priority: 90,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'D':
        case 'DD':
          return parseNumericPattern(numericPatterns.dayOfYear, string)
        case 'Do':
          return match.ordinalNumber(string, {unit: 'date'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      var year = date.getUTCFullYear();
      var isLeapYear = isLeapYearIndex$1(year);
      if (isLeapYear) {
        return value >= 1 && value <= 366
      } else {
        return value >= 1 && value <= 365
      }
    },
    set: function (date, value, options) {
      date.setUTCMonth(0, value);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Day of week
  E: {
    priority: 90,
    parse: function (string, token, match, options) {
      switch (token) {
        // Tue
        case 'E':
        case 'EE':
        case 'EEE':
          return match.day(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.day(string, {width: 'short', context: 'formatting'}) ||
            match.day(string, {width: 'narrow', context: 'formatting'})
        // T
        case 'EEEEE':
          return match.day(string, {width: 'narrow', context: 'formatting'})
        // Tu
        case 'EEEEEE':
          return match.day(string, {width: 'short', context: 'formatting'}) ||
          match.day(string, {width: 'narrow', context: 'formatting'})
        // Tuesday
        case 'EEEE':
        default:
          return match.day(string, {width: 'wide', context: 'formatting'}) ||
            match.day(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.day(string, {width: 'short', context: 'formatting'}) ||
            match.day(string, {width: 'narrow', context: 'formatting'})
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 6
    },
    set: function (date, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Local day of week
  e: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays
      };

      switch (token) {
        // 3
        case 'e':
        case 'ee': // 03
          return parseNDigits(token.length, string, valueCallback)
        // 3rd
        case 'eo':
          return match.ordinalNumber(string, {unit: 'day', valueCallback: valueCallback})
        // Tue
        case 'eee':
          return match.day(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.day(string, {width: 'short', context: 'formatting'}) ||
            match.day(string, {width: 'narrow', context: 'formatting'})
        // T
        case 'eeeee':
          return match.day(string, {width: 'narrow', context: 'formatting'})
        // Tu
        case 'eeeeee':
          return match.day(string, {width: 'short', context: 'formatting'}) ||
          match.day(string, {width: 'narrow', context: 'formatting'})
        // Tuesday
        case 'eeee':
        default:
          return match.day(string, {width: 'wide', context: 'formatting'}) ||
            match.day(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.day(string, {width: 'short', context: 'formatting'}) ||
            match.day(string, {width: 'narrow', context: 'formatting'})
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 6
    },
    set: function (date, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // Stand-alone local day of week
  c: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;
        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays
      };

      switch (token) {
        // 3
        case 'c':
        case 'cc': // 03
          return parseNDigits(token.length, string, valueCallback)
        // 3rd
        case 'co':
          return match.ordinalNumber(string, {unit: 'day', valueCallback: valueCallback})
        // Tue
        case 'ccc':
          return match.day(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.day(string, {width: 'short', context: 'standalone'}) ||
            match.day(string, {width: 'narrow', context: 'standalone'})
        // T
        case 'ccccc':
          return match.day(string, {width: 'narrow', context: 'standalone'})
        // Tu
        case 'cccccc':
          return match.day(string, {width: 'short', context: 'standalone'}) ||
          match.day(string, {width: 'narrow', context: 'standalone'})
        // Tuesday
        case 'cccc':
        default:
          return match.day(string, {width: 'wide', context: 'standalone'}) ||
            match.day(string, {width: 'abbreviated', context: 'standalone'}) ||
            match.day(string, {width: 'short', context: 'standalone'}) ||
            match.day(string, {width: 'narrow', context: 'standalone'})
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 6
    },
    set: function (date, value, options) {
      date = setUTCDay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // ISO day of week
  i: {
    priority: 90,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        if (value === 0) {
          return 7
        }
        return value
      };

      switch (token) {
        // 2
        case 'i':
        case 'ii': // 02
          return parseNDigits(token.length, string)
        // 2nd
        case 'io':
          return match.ordinalNumber(string, {unit: 'day'})
        // Tue
        case 'iii':
          return match.day(string, {width: 'abbreviated', context: 'formatting', valueCallback: valueCallback}) ||
            match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||
            match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})
        // T
        case 'iiiii':
          return match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})
        // Tu
        case 'iiiiii':
          return match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||
          match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})
        // Tuesday
        case 'iiii':
        default:
          return match.day(string, {width: 'wide', context: 'formatting', valueCallback: valueCallback}) ||
            match.day(string, {width: 'abbreviated', context: 'formatting', valueCallback: valueCallback}) ||
            match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||
            match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 7
    },
    set: function (date, value, options) {
      date = setUTCISODay(date, value, options);
      date.setUTCHours(0, 0, 0, 0);
      return date
    }
  },

  // AM or PM
  a: {
    priority: 80,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'a':
        case 'aa':
        case 'aaa':
          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'aaaaa':
          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'aaaa':
        default:
          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
      }
    },
    set: function (date, value, options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date
    }
  },

  // AM, PM, midnight
  b: {
    priority: 80,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'b':
        case 'bb':
        case 'bbb':
          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'bbbbb':
          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'bbbb':
        default:
          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
      }
    },
    set: function (date, value, options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date
    }
  },

  // in the morning, in the afternoon, in the evening, at night
  B: {
    priority: 80,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'B':
        case 'BB':
        case 'BBB':
          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'BBBBB':
          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
        case 'BBBB':
        default:
          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||
            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})
      }
    },
    set: function (date, value, options) {
      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);
      return date
    }
  },

  // Hour [1-12]
  h: {
    priority: 70,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'h':
          return parseNumericPattern(numericPatterns.hour12h, string)
        case 'ho':
          return match.ordinalNumber(string, {unit: 'hour'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 12
    },
    set: function (date, value, options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else if (!isPM && value === 12) {
        date.setUTCHours(0, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date
    }
  },

  // Hour [0-23]
  H: {
    priority: 70,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'H':
          return parseNumericPattern(numericPatterns.hour23h, string)
        case 'Ho':
          return match.ordinalNumber(string, {unit: 'hour'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 23
    },
    set: function (date, value, options) {
      date.setUTCHours(value, 0, 0, 0);
      return date
    }
  },

  // Hour [0-11]
  K: {
    priority: 70,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'K':
          return parseNumericPattern(numericPatterns.hour11h, string)
        case 'Ko':
          return match.ordinalNumber(string, {unit: 'hour'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 11
    },
    set: function (date, value, options) {
      var isPM = date.getUTCHours() >= 12;
      if (isPM && value < 12) {
        date.setUTCHours(value + 12, 0, 0, 0);
      } else {
        date.setUTCHours(value, 0, 0, 0);
      }
      return date
    }
  },

  // Hour [1-24]
  k: {
    priority: 70,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'k':
          return parseNumericPattern(numericPatterns.hour24h, string)
        case 'ko':
          return match.ordinalNumber(string, {unit: 'hour'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 1 && value <= 24
    },
    set: function (date, value, options) {
      var hours = value <= 24 ? value % 24 : value;
      date.setUTCHours(hours, 0, 0, 0);
      return date
    }
  },

  // Minute
  m: {
    priority: 60,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'm':
          return parseNumericPattern(numericPatterns.minute, string)
        case 'mo':
          return match.ordinalNumber(string, {unit: 'minute'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 59
    },
    set: function (date, value, options) {
      date.setUTCMinutes(value, 0, 0);
      return date
    }
  },

  // Second
  s: {
    priority: 50,
    parse: function (string, token, match, options) {
      switch (token) {
        case 's':
          return parseNumericPattern(numericPatterns.second, string)
        case 'so':
          return match.ordinalNumber(string, {unit: 'second'})
        default:
          return parseNDigits(token.length, string)
      }
    },
    validate: function (date, value, options) {
      return value >= 0 && value <= 59
    },
    set: function (date, value, options) {
      date.setUTCSeconds(value, 0);
      return date
    }
  },

  // Fraction of second
  S: {
    priority: 40,
    parse: function (string, token, match, options) {
      var valueCallback = function (value) {
        return Math.floor(value * Math.pow(10, -token.length + 3))
      };
      return parseNDigits(token.length, string, valueCallback)
    },
    set: function (date, value, options) {
      date.setUTCMilliseconds(value);
      return date
    }
  },

  // Timezone (ISO-8601. +00:00 is `'Z'`)
  X: {
    priority: 20,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'X':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string)
        case 'XX':
          return parseTimezonePattern(timezonePatterns.basic, string)
        case 'XXXX':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string)
        case 'XXXXX':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string)
        case 'XXX':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string)
      }
    },
    set: function (date, value, options) {
      return new Date(date.getTime() - value)
    }
  },

  // Timezone (ISO-8601)
  x: {
    priority: 20,
    parse: function (string, token, match, options) {
      switch (token) {
        case 'x':
          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string)
        case 'xx':
          return parseTimezonePattern(timezonePatterns.basic, string)
        case 'xxxx':
          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string)
        case 'xxxxx':
          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string)
        case 'xxx':
        default:
          return parseTimezonePattern(timezonePatterns.extended, string)
      }
    },
    set: function (date, value, options) {
      return new Date(date.getTime() - value)
    }
  },

  // Seconds timestamp
  t: {
    priority: 10,
    parse: function (string, token, match, options) {
      return parseAnyDigitsSigned(string)
    },
    set: function (date, value, options) {
      return new Date(value * 1000)
    }
  },

  // Milliseconds timestamp
  T: {
    priority: 10,
    parse: function (string, token, match, options) {
      return parseAnyDigitsSigned(string)
    },
    set: function (date, value, options) {
      return new Date(value)
    }
  }
};

var TIMEZONE_UNIT_PRIORITY = 20;

// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
var formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;

var escapedStringRegExp$1 = /^'(.*?)'?$/;
var doubleQuoteRegExp$1 = /''/g;

var notWhitespaceRegExp = /\S/;

/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://git.io/fxCyr
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 6     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 6     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              |  40 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 0001, ..., 999               |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  20 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  20 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Seconds timestamp               |  10 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Milliseconds timestamp          |  10 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `baseDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}
 *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *
 * 6. These tokens are often confused with others. See: https://git.io/fxCyr
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.
 *
 * `baseDate` must be passed for correct work of the function.
 * If you're not sure which `baseDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @param {String} dateString - the string to parse
 * @param {String} formatString - the string of tokens
 * @param {Date|String|Number} baseDate - defines values missing from the parsed dateString
 * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
 * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
 * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year
 * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:
 *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).
 *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).
 *   See: https://git.io/fxCyr
 * @returns {Date} the parsed date
 * @throws {TypeError} 3 arguments required
 * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
 * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
 * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
 * @throws {RangeError} `options.locale` must contain `match` property
 * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse(
 *   '02/11/2014',
 *   'MM/dd/yyyy',
 *   new Date()
 * )
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse(
 *   '28-a de februaro',
 *   "do 'de' MMMM",
 *   new Date(2010, 0, 1),
 *   {locale: eo}
 * )
 * //=> Sun Feb 28 2010 00:00:00
 */
function parse(
  dirtyDateString,
  dirtyFormatString,
  dirtyBaseDate,
  dirtyOptions
) {
  if (arguments.length < 3) {
    throw new TypeError(
      '3 arguments required, but only ' + arguments.length + ' present'
    )
  }

  var dateString = String(dirtyDateString);
  var formatString = String(dirtyFormatString);
  var options = dirtyOptions || {};

  var locale = options.locale || locale$1;

  if (!locale.match) {
    throw new RangeError('locale must contain match property')
  }

  var localeFirstWeekContainsDate =
    locale.options && locale.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate =
    localeFirstWeekContainsDate == null
      ? 1
      : toInteger(localeFirstWeekContainsDate);
  var firstWeekContainsDate =
    options.firstWeekContainsDate == null
      ? defaultFirstWeekContainsDate
      : toInteger(options.firstWeekContainsDate);

  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError(
      'firstWeekContainsDate must be between 1 and 7 inclusively'
    )
  }

  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;
  var defaultWeekStartsOn =
    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
  var weekStartsOn =
    options.weekStartsOn == null
      ? defaultWeekStartsOn
      : toInteger(options.weekStartsOn);

  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')
  }

  if (formatString === '') {
    if (dateString === '') {
      return toDate(dirtyBaseDate, options)
    } else {
      return new Date(NaN)
    }
  }

  var subFnOptions = {
    firstWeekContainsDate: firstWeekContainsDate,
    weekStartsOn: weekStartsOn,
    locale: locale
  };

  // If timezone isn't specified, it will be set to the system timezone
  var setters = [
    {
      priority: TIMEZONE_UNIT_PRIORITY,
      set: dateToSystemTimezone,
      index: 0
    }
  ];

  var i;

  var tokens = formatString.match(formattingTokensRegExp$1);

  for (i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (!options.awareOfUnicodeTokens && isProtectedToken(token)) {
      throwProtectedError(token);
    }

    var firstCharacter = token[0];
    var parser = parsers[firstCharacter];
    if (parser) {
      var parseResult = parser.parse(
        dateString,
        token,
        locale.match,
        subFnOptions
      );

      if (!parseResult) {
        return new Date(NaN)
      }

      setters.push({
        priority: parser.priority,
        set: parser.set,
        validate: parser.validate,
        value: parseResult.value,
        index: setters.length
      });

      dateString = parseResult.rest;
    } else {
      // Replace two single quote characters with one single quote character
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString$1(token);
      }

      // Cut token from string, or, if string doesn't match the token, return Invalid Date
      if (dateString.indexOf(token) === 0) {
        dateString = dateString.slice(token.length);
      } else {
        return new Date(NaN)
      }
    }
  }

  // Check if the remaining input contains something other than whitespace
  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {
    return new Date(NaN)
  }

  var uniquePrioritySetters = setters
    .map(function(setter) {
      return setter.priority
    })
    .sort(function(a, b) {
      return b - a
    })
    .filter(function(priority, index, array) {
      return array.indexOf(priority) === index
    })
    .map(function(priority) {
      return setters
        .filter(function(setter) {
          return setter.priority === priority
        })
        .reverse()
    })
    .map(function(setterArray) {
      return setterArray[0]
    });

  var date = toDate(dirtyBaseDate, options);

  if (isNaN(date)) {
    return new Date(NaN)
  }

  // Convert the date in system timezone to the same date in UTC+00:00 timezone.
  // This ensures that when UTC functions will be implemented, locales will be compatible with them.
  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37
  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));

  for (i = 0; i < uniquePrioritySetters.length; i++) {
    var setter = uniquePrioritySetters[i];

    if (
      setter.validate &&
      !setter.validate(utcDate, setter.value, subFnOptions)
    ) {
      return new Date(NaN)
    }

    utcDate = setter.set(utcDate, setter.value, subFnOptions);
  }

  return utcDate
}

function dateToSystemTimezone(date) {
  var convertedDate = new Date(0);
  convertedDate.setFullYear(
    date.getUTCFullYear(),
    date.getUTCMonth(),
    date.getUTCDate()
  );
  convertedDate.setHours(
    date.getUTCHours(),
    date.getUTCMinutes(),
    date.getUTCSeconds(),
    date.getUTCMilliseconds()
  );
  return convertedDate
}

function cleanEscapedString$1(input) {
  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, "'")
}

// 

/**
 * Custom parse behavior on top of date-fns parse function.
 */
function parseDate$1 (date, format$1) {
  if (typeof date !== 'string') {
    return isValid(date) ? date : null;
  }

  var parsed = parse(date, format$1, new Date());

  // if date is not valid or the formatted output after parsing does not match
  // the string value passed in (avoids overflows)
  if (!isValid(parsed) || format(parsed, format$1) !== date) {
    return null;
  }

  return parsed;
}

var afterValidator = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var targetValue = ref.targetValue;
  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;
  var format = ref.format;

  if (typeof format === 'undefined') {
    format = inclusion;
    inclusion = false;
  }

  value = parseDate$1(value, format);
  targetValue = parseDate$1(targetValue, format);

  // if either is not valid.
  if (!value || !targetValue) {
    return false;
  }

  return isAfter(value, targetValue) || (inclusion && isEqual$1(value, targetValue));
};

var options = {
  hasTarget: true,
  isDate: true
};

// required to convert from a list of array values to an object.
var paramNames = ['targetValue', 'inclusion', 'format'];

var after = {
  validate: afterValidator,
  options: options,
  paramNames: paramNames
};

/**
 * Some Alpha Regex helpers.
 * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js
 */

var alpha = {
  en: /^[A-Z]*$/i,
  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
  da: /^[A-ZÆØÅ]*$/i,
  de: /^[A-ZÄÖÜß]*$/i,
  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
  it: /^[A-Z\xC0-\xFF]*$/i,
  lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,
  nl: /^[A-ZÉËÏÓÖÜ]*$/i,
  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
  ru: /^[А-ЯЁ]*$/i,
  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
  sr: /^[A-ZČĆŽŠĐ]*$/i,
  sv: /^[A-ZÅÄÖ]*$/i,
  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,
  uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i,
  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
  az: /^[A-ZÇƏĞİıÖŞÜ]*$/i
};

var alphaSpaces = {
  en: /^[A-Z\s]*$/i,
  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\s]*$/i,
  da: /^[A-ZÆØÅ\s]*$/i,
  de: /^[A-ZÄÖÜß\s]*$/i,
  es: /^[A-ZÁÉÍÑÓÚÜ\s]*$/i,
  fa: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی\s]*$/,
  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\s]*$/i,
  it: /^[A-Z\xC0-\xFF\s]*$/i,
  lt: /^[A-ZĄČĘĖĮŠŲŪŽ\s]*$/i,
  nl: /^[A-ZÉËÏÓÖÜ\s]*$/i,
  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\s]*$/i,
  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\s]*$/i,
  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\s]*$/i,
  ru: /^[А-ЯЁ\s]*$/i,
  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\s]*$/i,
  sr: /^[A-ZČĆŽŠĐ\s]*$/i,
  sv: /^[A-ZÅÄÖ\s]*$/i,
  tr: /^[A-ZÇĞİıÖŞÜ\s]*$/i,
  uk: /^[А-ЩЬЮЯЄІЇҐ\s]*$/i,
  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\s]*$/,
  az: /^[A-ZÇƏĞİıÖŞÜ\s]*$/i
};

var alphanumeric = {
  en: /^[0-9A-Z]*$/i,
  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,
  da: /^[0-9A-ZÆØÅ]$/i,
  de: /^[0-9A-ZÄÖÜß]*$/i,
  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,
  fa: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی]*$/,
  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,
  it: /^[0-9A-Z\xC0-\xFF]*$/i,
  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i,
  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,
  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,
  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,
  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,
  ru: /^[0-9А-ЯЁ]*$/i,
  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,
  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,
  sv: /^[0-9A-ZÅÄÖ]*$/i,
  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,
  uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i,
  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,
  az: /^[0-9A-ZÇƏĞİıÖŞÜ]*$/i
};

var alphaDash = {
  en: /^[0-9A-Z_-]*$/i,
  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,
  da: /^[0-9A-ZÆØÅ_-]*$/i,
  de: /^[0-9A-ZÄÖÜß_-]*$/i,
  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,
  fa: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰپژگچکی_-]*$/,
  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,
  it: /^[0-9A-Z\xC0-\xFF_-]*$/i,
  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i,
  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,
  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,
  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,
  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,
  ru: /^[0-9А-ЯЁ_-]*$/i,
  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i,
  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,
  sv: /^[0-9A-ZÅÄÖ_-]*$/i,
  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,
  uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i,
  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/,
  az: /^[0-9A-ZÇƏĞİıÖŞÜ_-]*$/i
};

var validate = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var locale = ref.locale;

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate(val, [locale]); });
  }

  // Match at least one locale.
  if (! locale) {
    return Object.keys(alpha).some(function (loc) { return alpha[loc].test(value); });
  }

  return (alpha[locale] || alpha.en).test(value);
};

var paramNames$1 = ['locale'];

var alpha$1 = {
  validate: validate,
  paramNames: paramNames$1
};

var validate$1 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var locale = ref.locale;

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$1(val, [locale]); });
  }

  // Match at least one locale.
  if (! locale) {
    return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });
  }

  return (alphaDash[locale] || alphaDash.en).test(value);
};

var paramNames$2 = ['locale'];

var alpha_dash = {
  validate: validate$1,
  paramNames: paramNames$2
};

var validate$2 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var locale = ref.locale;

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$2(val, [locale]); });
  }

  // Match at least one locale.
  if (! locale) {
    return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });
  }

  return (alphanumeric[locale] || alphanumeric.en).test(value);
};

var paramNames$3 = ['locale'];

var alpha_num = {
  validate: validate$2,
  paramNames: paramNames$3
};

var validate$3 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var locale = ref.locale;

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$3(val, [locale]); });
  }

  // Match at least one locale.
  if (! locale) {
    return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });
  }

  return (alphaSpaces[locale] || alphaSpaces.en).test(value);
};

var paramNames$4 = ['locale'];

var alpha_spaces = {
  validate: validate$3,
  paramNames: paramNames$4
};

var validate$4 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var targetValue = ref.targetValue;
  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;
  var format = ref.format;

  if (typeof format === 'undefined') {
    format = inclusion;
    inclusion = false;
  }

  value = parseDate$1(value, format);
  targetValue = parseDate$1(targetValue, format);

  // if either is not valid.
  if (!value || !targetValue) {
    return false;
  }

  return isBefore(value, targetValue) || (inclusion && isEqual$1(value, targetValue));
};

var options$1 = {
  hasTarget: true,
  isDate: true
};

var paramNames$5 = ['targetValue', 'inclusion', 'format'];

var before = {
  validate: validate$4,
  options: options$1,
  paramNames: paramNames$5
};

var validate$5 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var min = ref.min;
  var max = ref.max;

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$5(val, { min: min, max: max }); });
  }

  return Number(min) <= value && Number(max) >= value;
};

var paramNames$6 = ['min', 'max'];

var between = {
  validate: validate$5,
  paramNames: paramNames$6
};

var validate$6 = function (value, ref) {
  var targetValue = ref.targetValue;

  return String(value) === String(targetValue);
};
var options$2 = {
  hasTarget: true
};

var paramNames$7 = ['targetValue'];

var confirmed = {
  validate: validate$6,
  options: options$2,
  paramNames: paramNames$7
};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var assertString_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = assertString;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function assertString(input) {
  var isString = typeof input === 'string' || input instanceof String;

  if (!isString) {
    var invalidType;

    if (input === null) {
      invalidType = 'null';
    } else {
      invalidType = _typeof(input);

      if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {
        invalidType = input.constructor.name;
      } else {
        invalidType = "a ".concat(invalidType);
      }
    }

    throw new TypeError("Expected string but received ".concat(invalidType, "."));
  }
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(assertString_1);

var isCreditCard_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isCreditCard;

var _assertString = _interopRequireDefault(assertString_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */
var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11}|6[27][0-9]{14})$/;
/* eslint-enable max-len */

function isCreditCard(str) {
  (0, _assertString.default)(str);
  var sanitized = str.replace(/[- ]+/g, '');

  if (!creditCard.test(sanitized)) {
    return false;
  }

  var sum = 0;
  var digit;
  var tmpNum;
  var shouldDouble;

  for (var i = sanitized.length - 1; i >= 0; i--) {
    digit = sanitized.substring(i, i + 1);
    tmpNum = parseInt(digit, 10);

    if (shouldDouble) {
      tmpNum *= 2;

      if (tmpNum >= 10) {
        sum += tmpNum % 10 + 1;
      } else {
        sum += tmpNum;
      }
    } else {
      sum += tmpNum;
    }

    shouldDouble = !shouldDouble;
  }

  return !!(sum % 10 === 0 ? sanitized : false);
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isCreditCard = unwrapExports(isCreditCard_1);

var validate$7 = function (value) { return isCreditCard(String(value)); };

var credit_card = {
  validate: validate$7
};

var validate$8 = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var min = ref.min;
  var max = ref.max;
  var inclusivity = ref.inclusivity; if ( inclusivity === void 0 ) inclusivity = '()';
  var format = ref.format;

  if (typeof format === 'undefined') {
    format = inclusivity;
    inclusivity = '()';
  }

  var minDate = parseDate$1(String(min), format);
  var maxDate = parseDate$1(String(max), format);
  var dateVal = parseDate$1(String(value), format);

  if (!minDate || !maxDate || !dateVal) {
    return false;
  }

  if (inclusivity === '()') {
    return isAfter(dateVal, minDate) && isBefore(dateVal, maxDate);
  }

  if (inclusivity === '(]') {
    return isAfter(dateVal, minDate) && (isEqual$1(dateVal, maxDate) || isBefore(dateVal, maxDate));
  }

  if (inclusivity === '[)') {
    return isBefore(dateVal, maxDate) && (isEqual$1(dateVal, minDate) || isAfter(dateVal, minDate));
  }

  return isEqual$1(dateVal, maxDate) || isEqual$1(dateVal, minDate) ||
    (isBefore(dateVal, maxDate) && isAfter(dateVal, minDate));
};

var options$3 = {
  isDate: true
};

var paramNames$8 = ['min', 'max', 'inclusivity', 'format'];

var date_between = {
  validate: validate$8,
  options: options$3,
  paramNames: paramNames$8
};

var validate$9 = function (value, ref) {
  var format = ref.format;

  return !!parseDate$1(value, format);
};

var options$4 = {
  isDate: true
};

var paramNames$9 = ['format'];

var date_format = {
  validate: validate$9,
  options: options$4,
  paramNames: paramNames$9
};

var validate$a = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var decimals = ref.decimals; if ( decimals === void 0 ) decimals = '*';
  var separator = ref.separator; if ( separator === void 0 ) separator = '.';

  if (isNullOrUndefined(value) || value === '') {
    return false;
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$a(val, { decimals: decimals, separator: separator }); });
  }

  // if is 0.
  if (Number(decimals) === 0) {
    return /^-?\d*$/.test(value);
  }

  var regexPart = decimals === '*' ? '+' : ("{1," + decimals + "}");
  var regex = new RegExp(("^[-+]?\\d*(\\" + separator + "\\d" + regexPart + ")?([eE]{1}[-]?\\d+)?$"));

  if (! regex.test(value)) {
    return false;
  }

  var parsedValue = parseFloat(value);

  // eslint-disable-next-line
  return parsedValue === parsedValue;
};

var paramNames$a = ['decimals', 'separator'];

var decimal = {
  validate: validate$a,
  paramNames: paramNames$a
};

var validate$b = function (value, ref) {
  var length = ref[0];

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$b(val, [length]); });
  }
  var strVal = String(value);

  return /^[0-9]*$/.test(strVal) && strVal.length === Number(length);
};

var digits = {
  validate: validate$b
};

var imageRegex = /\.(jpg|svg|jpeg|png|bmp|gif)$/i;

var validateImage = function (file, width, height) {
  var URL = window.URL || window.webkitURL;
  return new Promise(function (resolve) {
    var image = new Image();
    image.onerror = function () { return resolve({ valid: false }); };
    image.onload = function () { return resolve({
      valid: image.width === Number(width) && image.height === Number(height)
    }); };

    image.src = URL.createObjectURL(file);
  });
};

var validate$c = function (files, ref) {
  var width = ref[0];
  var height = ref[1];

  var images = ensureArray(files).filter(function (file) { return imageRegex.test(file.name); });
  if (images.length === 0) {
    return false;
  }
  return Promise.all(images.map(function (image) { return validateImage(image, width, height); }));
};

var dimensions = {
  validate: validate$c
};

var merge_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = merge;

function merge() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var defaults = arguments.length > 1 ? arguments[1] : undefined;

  for (var key in defaults) {
    if (typeof obj[key] === 'undefined') {
      obj[key] = defaults[key];
    }
  }

  return obj;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(merge_1);

var isByteLength_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isByteLength;

var _assertString = _interopRequireDefault(assertString_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-disable prefer-rest-params */
function isByteLength(str, options) {
  (0, _assertString.default)(str);
  var min;
  var max;

  if (_typeof(options) === 'object') {
    min = options.min || 0;
    max = options.max;
  } else {
    // backwards compatibility: isByteLength(str, min [, max])
    min = arguments[1];
    max = arguments[2];
  }

  var len = encodeURI(str).split(/%..|./).length - 1;
  return len >= min && (typeof max === 'undefined' || len <= max);
}

module.exports = exports.default;
module.exports.default = exports.default;
});

unwrapExports(isByteLength_1);

var isFQDN_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isFQDN;

var _assertString = _interopRequireDefault(assertString_1);

var _merge = _interopRequireDefault(merge_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_fqdn_options = {
  require_tld: true,
  allow_underscores: false,
  allow_trailing_dot: false
};

function isFQDN(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_fqdn_options);
  /* Remove the optional trailing dot before checking validity */

  if (options.allow_trailing_dot && str[str.length - 1] === '.') {
    str = str.substring(0, str.length - 1);
  }

  var parts = str.split('.');

  for (var i = 0; i < parts.length; i++) {
    if (parts[i].length > 63) {
      return false;
    }
  }

  if (options.require_tld) {
    var tld = parts.pop();

    if (!parts.length || !/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
      return false;
    } // disallow spaces


    if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20]/.test(tld)) {
      return false;
    }
  }

  for (var part, _i = 0; _i < parts.length; _i++) {
    part = parts[_i];

    if (options.allow_underscores) {
      part = part.replace(/_/g, '');
    }

    if (!/^[a-z\u00a1-\uffff0-9-]+$/i.test(part)) {
      return false;
    } // disallow full-width chars


    if (/[\uff01-\uff5e]/.test(part)) {
      return false;
    }

    if (part[0] === '-' || part[part.length - 1] === '-') {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isFQDN = unwrapExports(isFQDN_1);

var isIP_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isIP;

var _assertString = _interopRequireDefault(assertString_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ipv4Maybe = /^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$/;
var ipv6Block = /^[0-9A-F]{1,4}$/i;

function isIP(str) {
  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  (0, _assertString.default)(str);
  version = String(version);

  if (!version) {
    return isIP(str, 4) || isIP(str, 6);
  } else if (version === '4') {
    if (!ipv4Maybe.test(str)) {
      return false;
    }

    var parts = str.split('.').sort(function (a, b) {
      return a - b;
    });
    return parts[3] <= 255;
  } else if (version === '6') {
    var blocks = str.split(':');
    var foundOmissionBlock = false; // marker to indicate ::
    // At least some OS accept the last 32 bits of an IPv6 address
    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says
    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,
    // and '::a.b.c.d' is deprecated, but also valid.

    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);
    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;

    if (blocks.length > expectedNumberOfBlocks) {
      return false;
    } // initial or final ::


    if (str === '::') {
      return true;
    } else if (str.substr(0, 2) === '::') {
      blocks.shift();
      blocks.shift();
      foundOmissionBlock = true;
    } else if (str.substr(str.length - 2) === '::') {
      blocks.pop();
      blocks.pop();
      foundOmissionBlock = true;
    }

    for (var i = 0; i < blocks.length; ++i) {
      // test for a :: which can not be at the string start/end
      // since those cases have been handled above
      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {
        if (foundOmissionBlock) {
          return false; // multiple :: in address
        }

        foundOmissionBlock = true;
      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) ; else if (!ipv6Block.test(blocks[i])) {
        return false;
      }
    }

    if (foundOmissionBlock) {
      return blocks.length >= 1;
    }

    return blocks.length === expectedNumberOfBlocks;
  }

  return false;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isIP = unwrapExports(isIP_1);

var isEmail_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isEmail;

var _assertString = _interopRequireDefault(assertString_1);

var _merge = _interopRequireDefault(merge_1);

var _isByteLength = _interopRequireDefault(isByteLength_1);

var _isFQDN = _interopRequireDefault(isFQDN_1);

var _isIP = _interopRequireDefault(isIP_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_email_options = {
  allow_display_name: false,
  require_display_name: false,
  allow_utf8_local_part: true,
  require_tld: true
};
/* eslint-disable max-len */

/* eslint-disable no-control-regex */

var displayName = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\,\.\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF\s]*<(.+)>$/i;
var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
var gmailUserPart = /^[a-z\d]+$/;
var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
/* eslint-enable max-len */

/* eslint-enable no-control-regex */

function isEmail(str, options) {
  (0, _assertString.default)(str);
  options = (0, _merge.default)(options, default_email_options);

  if (options.require_display_name || options.allow_display_name) {
    var display_email = str.match(displayName);

    if (display_email) {
      str = display_email[1];
    } else if (options.require_display_name) {
      return false;
    }
  }

  var parts = str.split('@');
  var domain = parts.pop();
  var user = parts.join('@');
  var lower_domain = domain.toLowerCase();

  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
    /*
      Previously we removed dots for gmail addresses before validating.
      This was removed because it allows `multiple..dots@gmail.com`
      to be reported as valid, but it is not.
      Gmail only normalizes single dots, removing them from here is pointless,
      should be done in normalizeEmail
    */
    user = user.toLowerCase(); // Removing sub-address from username before gmail validation

    var username = user.split('+')[0]; // Dots are not included in gmail length restriction

    if (!(0, _isByteLength.default)(username.replace('.', ''), {
      min: 6,
      max: 30
    })) {
      return false;
    }

    var _user_parts = username.split('.');

    for (var i = 0; i < _user_parts.length; i++) {
      if (!gmailUserPart.test(_user_parts[i])) {
        return false;
      }
    }
  }

  if (!(0, _isByteLength.default)(user, {
    max: 64
  }) || !(0, _isByteLength.default)(domain, {
    max: 254
  })) {
    return false;
  }

  if (!(0, _isFQDN.default)(domain, {
    require_tld: options.require_tld
  })) {
    if (!options.allow_ip_domain) {
      return false;
    }

    if (!(0, _isIP.default)(domain)) {
      if (!domain.startsWith('[') || !domain.endsWith(']')) {
        return false;
      }

      var noBracketdomain = domain.substr(1, domain.length - 2);

      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {
        return false;
      }
    }
  }

  if (user[0] === '"') {
    user = user.slice(1, user.length - 1);
    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
  }

  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
  var user_parts = user.split('.');

  for (var _i = 0; _i < user_parts.length; _i++) {
    if (!pattern.test(user_parts[_i])) {
      return false;
    }
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isEmail = unwrapExports(isEmail_1);

function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

var validate$d = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var multiple = ref.multiple; if ( multiple === void 0 ) multiple = false;
  var rest = objectWithoutProperties( ref, ["multiple"] );
  var options = rest;

  if (multiple && !Array.isArray(value)) {
    value = String(value).split(',').map(function (emailStr) { return emailStr.trim(); });
  }

  var validatorOptions = assign({}, options);

  if (Array.isArray(value)) {
    return value.every(function (val) { return isEmail(String(val), validatorOptions); });
  }

  return isEmail(String(value), validatorOptions);
};

var email = {
  validate: validate$d
};

var validate$e = function (value, options) {
  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$e(val, options); });
  }

  return toArray$1(options).some(function (item) {
    // eslint-disable-next-line
    return item == value;
  });
};

var included = {
  validate: validate$e
};

var validate$f = function () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return !validate$e.apply(void 0, args);
};

var excluded = {
  validate: validate$f
};

var validate$g = function (files, extensions) {
  var regex = new RegExp((".(" + (extensions.join('|')) + ")$"), 'i');
  return ensureArray(files).every(function (file) { return regex.test(file.name); });
};

var ext = {
  validate: validate$g
};

var validate$h = function (files) { return (Array.isArray(files) ? files : [files]).every(function (file) { return /\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(file.name); }); };

var image = {
  validate: validate$h
};

var validate$i = function (value) {
  if (Array.isArray(value)) {
    return value.every(function (val) { return /^-?[0-9]+$/.test(String(val)); });
  }

  return /^-?[0-9]+$/.test(String(value));
};

var integer = {
  validate: validate$i
};

var validate$j = function (value, ref) {
  if ( ref === void 0 ) ref = {};
  var version = ref.version; if ( version === void 0 ) version = 4;

  if (isNullOrUndefined(value)) {
    value = '';
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return isIP(val, version); });
  }

  return isIP(value, version);
};

var paramNames$b = ['version'];

var ip = {
  validate: validate$j,
  paramNames: paramNames$b
};

var validate$k = function (value) {
  if (isNullOrUndefined(value)) {
    value = '';
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return (isIP(val, '') || isFQDN(val)); });
  }

  return isIP(value, '') || isFQDN(value);
};

var ip_or_fqdn = {
  validate: validate$k
};

var validate$l = function (value, ref) {
  if ( ref === void 0 ) ref = [];
  var other = ref[0];

  return value === other;
};

var is = {
  validate: validate$l
};

var validate$m = function (value, ref) {
  if ( ref === void 0 ) ref = [];
  var other = ref[0];

  return value !== other;
};

var is_not = {
  validate: validate$m
};

/**
 * @param {Array|String} value
 * @param {Number} length
 * @param {Number} max
 */
var compare = function (value, length, max) {
  if (max === undefined) {
    return value.length === length;
  }

  // cast to number.
  max = Number(max);

  return value.length >= length && value.length <= max;
};

var validate$n = function (value, ref) {
  var length = ref[0];
  var max = ref[1]; if ( max === void 0 ) max = undefined;

  if (isNullOrUndefined(value)) {
    return false;
  }

  length = Number(length);
  if (typeof value === 'number') {
    value = String(value);
  }

  if (!value.length) {
    value = toArray$1(value);
  }

  return compare(value, length, max);
};

var length = {
  validate: validate$n
};

var validate$o = function (value, ref) {
  var length = ref[0];

  if (isNullOrUndefined(value)) {
    return length >= 0;
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$o(val, [length]); });
  }

  return String(value).length <= length;
};

var max = {
  validate: validate$o
};

var validate$p = function (value, ref) {
  var max = ref[0];

  if (isNullOrUndefined(value) || value === '') {
    return false;
  }

  if (Array.isArray(value)) {
    return value.length > 0 && value.every(function (val) { return validate$p(val, [max]); });
  }

  return Number(value) <= max;
};

var max_value = {
  validate: validate$p
};

var validate$q = function (files, mimes) {
  var regex = new RegExp(((mimes.join('|').replace('*', '.+')) + "$"), 'i');
  return ensureArray(files).every(function (file) { return regex.test(file.type); });
};

var mimes = {
  validate: validate$q
};

var validate$r = function (value, ref) {
  var length = ref[0];

  if (isNullOrUndefined(value)) {
    return false;
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$r(val, [length]); });
  }

  return String(value).length >= length;
};

var min = {
  validate: validate$r
};

var validate$s = function (value, ref) {
  var min = ref[0];

  if (isNullOrUndefined(value) || value === '') {
    return false;
  }

  if (Array.isArray(value)) {
    return value.length > 0 && value.every(function (val) { return validate$s(val, [min]); });
  }

  return Number(value) >= min;
};

var min_value = {
  validate: validate$s
};

var ar = /^[٠١٢٣٤٥٦٧٨٩]+$/;
var en = /^[0-9]+$/;

var validate$t = function (value) {
  var testValue = function (val) {
    var strValue = String(val);

    return en.test(strValue) || ar.test(strValue);
  };

  if (Array.isArray(value)) {
    return value.every(testValue);
  }

  return testValue(value);
};

var numeric = {
  validate: validate$t
};

var validate$u = function (value, ref) {
  var expression = ref.expression;

  if (typeof expression === 'string') {
    expression = new RegExp(expression);
  }

  if (Array.isArray(value)) {
    return value.every(function (val) { return validate$u(val, { expression: expression }); });
  }

  return expression.test(String(value));
};

var paramNames$c = ['expression'];

var regex = {
  validate: validate$u,
  paramNames: paramNames$c
};

var validate$v = function (value, ref) {
  if ( ref === void 0 ) ref = [];
  var invalidateFalse = ref[0]; if ( invalidateFalse === void 0 ) invalidateFalse = false;

  if (isNullOrUndefined(value) || isEmptyArray(value)) {
    return false;
  }

  // incase a field considers `false` as an empty value like checkboxes.
  if (value === false && invalidateFalse) {
    return false;
  }

  return !!String(value).trim().length;
};

var required = {
  validate: validate$v
};

var validate$w = function (value, ref) {
  if ( ref === void 0 ) ref = [];
  var otherFieldVal = ref[0];
  var possibleVals = ref.slice(1);

  var required = possibleVals.includes(String(otherFieldVal).trim());

  if (!required) {
    return {
      valid: true,
      data: {
        required: required
      }
    };
  }

  var invalid = (isEmptyArray(value) || [false, null, undefined].includes(value));

  invalid = invalid || !String(value).trim().length;

  return {
    valid: !invalid,
    data: {
      required: required
    }
  };
};

var options$5 = {
  hasTarget: true,
  computesRequired: true
};

var required_if = {
  validate: validate$w,
  options: options$5
};

var validate$x = function (files, ref) {
  var size = ref[0];

  if (isNaN(size)) {
    return false;
  }
  var nSize = Number(size) * 1024;
  return ensureArray(files).every(function (file) { return file.size <= nSize; });
};

var size = {
  validate: validate$x
};

var isURL_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isURL;

var _assertString = _interopRequireDefault(assertString_1);

var _isFQDN = _interopRequireDefault(isFQDN_1);

var _isIP = _interopRequireDefault(isIP_1);

var _merge = _interopRequireDefault(merge_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var default_url_options = {
  protocols: ['http', 'https', 'ftp'],
  require_tld: true,
  require_protocol: false,
  require_host: true,
  require_valid_protocol: true,
  allow_underscores: false,
  allow_trailing_dot: false,
  allow_protocol_relative_urls: false
};
var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}

function checkHost(host, matches) {
  for (var i = 0; i < matches.length; i++) {
    var match = matches[i];

    if (host === match || isRegExp(match) && match.test(host)) {
      return true;
    }
  }

  return false;
}

function isURL(url, options) {
  (0, _assertString.default)(url);

  if (!url || url.length >= 2083 || /[\s<>]/.test(url)) {
    return false;
  }

  if (url.indexOf('mailto:') === 0) {
    return false;
  }

  options = (0, _merge.default)(options, default_url_options);
  var protocol, auth, host, hostname, port, port_str, split, ipv6;
  split = url.split('#');
  url = split.shift();
  split = url.split('?');
  url = split.shift();
  split = url.split('://');

  if (split.length > 1) {
    protocol = split.shift().toLowerCase();

    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
      return false;
    }
  } else if (options.require_protocol) {
    return false;
  } else if (url.substr(0, 2) === '//') {
    if (!options.allow_protocol_relative_urls) {
      return false;
    }

    split[0] = url.substr(2);
  }

  url = split.join('://');

  if (url === '') {
    return false;
  }

  split = url.split('/');
  url = split.shift();

  if (url === '' && !options.require_host) {
    return true;
  }

  split = url.split('@');

  if (split.length > 1) {
    if (options.disallow_auth) {
      return false;
    }

    auth = split.shift();

    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
      return false;
    }
  }

  hostname = split.join('@');
  port_str = null;
  ipv6 = null;
  var ipv6_match = hostname.match(wrapped_ipv6);

  if (ipv6_match) {
    host = '';
    ipv6 = ipv6_match[1];
    port_str = ipv6_match[2] || null;
  } else {
    split = hostname.split(':');
    host = split.shift();

    if (split.length) {
      port_str = split.join(':');
    }
  }

  if (port_str !== null) {
    port = parseInt(port_str, 10);

    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
      return false;
    }
  }

  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
    return false;
  }

  host = host || ipv6;

  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
    return false;
  }

  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
    return false;
  }

  return true;
}

module.exports = exports.default;
module.exports.default = exports.default;
});

var isURL = unwrapExports(isURL_1);

var validate$y = function (value, options) {
  if ( options === void 0 ) options = {};

  if (isNullOrUndefined(value)) {
    value = '';
  }

  var validatorOptions = assign({}, options);

  if (Array.isArray(value)) {
    return value.every(function (val) { return isURL(val, validatorOptions); });
  }

  return isURL(value, validatorOptions);
};

var url = {
  validate: validate$y
};

/* eslint-disable camelcase */

var Rules = /*#__PURE__*/Object.freeze({
  after: after,
  alpha_dash: alpha_dash,
  alpha_num: alpha_num,
  alpha_spaces: alpha_spaces,
  alpha: alpha$1,
  before: before,
  between: between,
  confirmed: confirmed,
  credit_card: credit_card,
  date_between: date_between,
  date_format: date_format,
  decimal: decimal,
  digits: digits,
  dimensions: dimensions,
  email: email,
  ext: ext,
  image: image,
  included: included,
  integer: integer,
  length: length,
  ip: ip,
  ip_or_fqdn: ip_or_fqdn,
  is_not: is_not,
  is: is,
  max: max,
  max_value: max_value,
  mimes: mimes,
  min: min,
  min_value: min_value,
  excluded: excluded,
  numeric: numeric,
  regex: regex,
  required: required,
  required_if: required_if,
  size: size,
  url: url
});

// 

var normalize$1 = function (fields) {
  if (Array.isArray(fields)) {
    return fields.reduce(function (prev, curr) {
      if (includes(curr, '.')) {
        prev[curr.split('.')[1]] = curr;
      } else {
        prev[curr] = curr;
      }

      return prev;
    }, {});
  }

  return fields;
};

// Combines two flags using either AND or OR depending on the flag type.
var combine = function (lhs, rhs) {
  var mapper = {
    pristine: function (lhs, rhs) { return lhs && rhs; },
    dirty: function (lhs, rhs) { return lhs || rhs; },
    touched: function (lhs, rhs) { return lhs || rhs; },
    untouched: function (lhs, rhs) { return lhs && rhs; },
    valid: function (lhs, rhs) { return lhs && rhs; },
    invalid: function (lhs, rhs) { return lhs || rhs; },
    pending: function (lhs, rhs) { return lhs || rhs; },
    required: function (lhs, rhs) { return lhs || rhs; },
    validated: function (lhs, rhs) { return lhs && rhs; }
  };

  return Object.keys(mapper).reduce(function (flags, flag) {
    flags[flag] = mapper[flag](lhs[flag], rhs[flag]);

    return flags;
  }, {});
};

var mapScope = function (scope, deep) {
  if ( deep === void 0 ) deep = true;

  return Object.keys(scope).reduce(function (flags, field) {
    if (!flags) {
      flags = assign({}, scope[field]);
      return flags;
    }

    // scope.
    var isScope = field.indexOf('$') === 0;
    if (deep && isScope) {
      return combine(mapScope(scope[field]), flags);
    } else if (!deep && isScope) {
      return flags;
    }

    flags = combine(flags, scope[field]);

    return flags;
  }, null);
};

/**
 * Maps fields to computed functions.
 */
var mapFields = function (fields) {
  if (!fields) {
    return function () {
      return mapScope(this.$validator.flags);
    };
  }

  var normalized = normalize$1(fields);
  return Object.keys(normalized).reduce(function (prev, curr) {
    var field = normalized[curr];
    prev[curr] = function mappedField () {
      // if field exists
      if (this.$validator.flags[field]) {
        return this.$validator.flags[field];
      }

      // scopeless fields were selected.
      if (normalized[curr] === '*') {
        return mapScope(this.$validator.flags, false);
      }

      // if it has a scope defined
      var index = field.indexOf('.');
      if (index <= 0) {
        return {};
      }

      var ref = field.split('.');
      var scope = ref[0];
      var name = ref.slice(1);

      scope = this.$validator.flags[("$" + scope)];
      name = name.join('.');

      // an entire scope was selected: scope.*
      if (name === '*' && scope) {
        return mapScope(scope);
      }

      if (scope && scope[name]) {
        return scope[name];
      }

      return {};
    };

    return prev;
  }, {});
};

var $validator = null;

var PROVIDER_COUNTER = 0;

var ValidationProvider = {
  $__veeInject: false,
  inject: {
    $_veeObserver: {
      from: '$_veeObserver',
      default: function default$1 () {
        if (!this.$vnode.context.$_veeObserver) {
          this.$vnode.context.$_veeObserver = createObserver();
        }

        return this.$vnode.context.$_veeObserver;
      }
    }
  },
  props: {
    vid: {
      type: [String, Number],
      default: function () {
        PROVIDER_COUNTER++;

        return ("_vee_" + PROVIDER_COUNTER);
      }
    },
    name: {
      type: String,
      default: null
    },
    mode: {
      type: [String, Function],
      default: function () {
        return getConfig().mode;
      }
    },
    events: {
      type: Array,
      validate: function () {
        /* istanbul ignore next */
        {
          warn$1('events prop and config will be deprecated in future version please use the interaction modes instead');
        }

        return true;
      },
      default: function () {
        var events = getConfig().events;
        if (typeof events === 'string') {
          return events.split('|');
        }

        return events;
      }
    },
    rules: {
      type: [Object, String],
      default: null
    },
    immediate: {
      type: Boolean,
      default: false
    },
    persist: {
      type: Boolean,
      default: false
    },
    bails: {
      type: Boolean,
      default: function () { return getConfig().fastExit; }
    },
    debounce: {
      type: Number,
      default: function () { return getConfig().delay || 0; }
    },
    tag: {
      type: String,
      default: 'span'
    },
    slim: {
      type: Boolean,
      default: false
    }
  },
  watch: {
    rules: {
      deep: true,
      handler: function handler (val, oldVal) {
        this._needsValidation = !isEqual(val, oldVal);
      }
    }
  },
  data: function () { return ({
    messages: [],
    value: undefined,
    initialized: false,
    initialValue: undefined,
    flags: createFlags(),
    failedRules: {},
    forceRequired: false,
    isDeactivated: false,
    id: null
  }); },
  computed: {
    isValid: function isValid () {
      return this.flags.valid;
    },
    fieldDeps: function fieldDeps () {
      var this$1 = this;

      var rules = normalizeRules(this.rules);

      return Object.keys(rules).filter(RuleContainer.isTargetRule).map(function (rule) {
        var depName = rules[rule][0];
        watchCrossFieldDep(this$1, depName);

        return depName;
      });
    },
    normalizedEvents: function normalizedEvents () {
      var this$1 = this;

      var ref = computeModeSetting(this);
      var on = ref.on;

      return normalizeEvents$1(on || this.events || []).map(function (e) {
        if (e === 'input') {
          return this$1._inputEventName;
        }

        return e;
      });
    },
    isRequired: function isRequired () {
      var rules = normalizeRules(this.rules);
      var forceRequired = this.forceRequired;

      var isRequired = rules.required || forceRequired;
      this.flags.required = isRequired;

      return isRequired;
    },
    classes: function classes () {
      var this$1 = this;

      var names = getConfig().classNames;
      return Object.keys(this.flags).reduce(function (classes, flag) {
        var className = (names && names[flag]) || flag;
        if (isNullOrUndefined(this$1.flags[flag])) {
          return classes;
        }

        if (className) {
          classes[className] = this$1.flags[flag];
        }

        return classes;
      }, {});
    }
  },
  render: function render (h) {
    var this$1 = this;

    this.registerField();
    var ctx = createValidationCtx(this);

    // Gracefully handle non-existent scoped slots.
    var slot = this.$scopedSlots.default;
    /* istanbul ignore next */
    if (!isCallable(slot)) {
      {
        warn$1('ValidationProvider expects a scoped slot. Did you forget to add "v-slot" to your slot?');
      }

      return h(this.tag, this.$slots.default);
    }

    var nodes = slot(ctx);
    // Handle single-root slot.
    extractVNodes(nodes).forEach(function (input) {
      addListeners.call(this$1, input);
    });

    return this.slim ? createRenderless(h, nodes) : h(this.tag, nodes);
  },
  beforeDestroy: function beforeDestroy () {
    // cleanup reference.
    this.$_veeObserver.unsubscribe(this);
  },
  activated: function activated () {
    this.$_veeObserver.subscribe(this);
    this.isDeactivated = false;
  },
  deactivated: function deactivated () {
    this.$_veeObserver.unsubscribe(this);
    this.isDeactivated = true;
  },
  methods: {
    setFlags: function setFlags (flags) {
      var this$1 = this;

      Object.keys(flags).forEach(function (flag) {
        this$1.flags[flag] = flags[flag];
      });
    },
    syncValue: function syncValue (e) {
      var value = normalizeValue$1(e);
      this.value = value;
      this.flags.changed = this.initialValue !== value;
    },
    reset: function reset () {
      this.messages = [];
      this._pendingValidation = null;
      this.initialValue = this.value;
      var flags = createFlags();
      this.setFlags(flags);
    },
    validate: function validate () {
      var this$1 = this;
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      if (args.length > 0) {
        this.syncValue(args[0]);
      }

      return this.validateSilent().then(function (result) {
        this$1.applyResult(result);

        return result;
      });
    },
    validateSilent: function validateSilent () {
      var this$1 = this;

      this.setFlags({ pending: true });

      return $validator.verify(this.value, this.rules, {
        name: this.name,
        values: createValuesLookup(this),
        bails: this.bails
      }).then(function (result) {
        this$1.setFlags({ pending: false });
        if (!this$1.isRequired) {
          this$1.setFlags({ valid: result.valid, invalid: !result.valid });
        }

        return result;
      });
    },
    applyResult: function applyResult (ref) {
      var errors = ref.errors;
      var failedRules = ref.failedRules;

      this.messages = errors;
      this.failedRules = assign({}, failedRules);
      this.setFlags({
        valid: !errors.length,
        changed: this.value !== this.initialValue,
        invalid: !!errors.length,
        validated: true
      });
    },
    registerField: function registerField () {
      if (!$validator) {
        $validator = getValidator() || new Validator(null, { fastExit: getConfig().fastExit });
      }

      updateRenderingContextRefs(this);
    }
  }
};

function createValidationCtx (ctx) {
  return {
    errors: ctx.messages,
    flags: ctx.flags,
    classes: ctx.classes,
    valid: ctx.isValid,
    failedRules: ctx.failedRules,
    reset: function () { return ctx.reset(); },
    validate: function () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      return ctx.validate.apply(ctx, args);
  },
    aria: {
      'aria-invalid': ctx.flags.invalid ? 'true' : 'false',
      'aria-required': ctx.isRequired ? 'true' : 'false'
    }
  };
}

function normalizeValue$1 (value) {
  if (isEvent(value)) {
    return value.target.type === 'file' ? toArray$1(value.target.files) : value.target.value;
  }

  return value;
}

/**
 * Determines if a provider needs to run validation.
 */
function shouldValidate (ctx, model) {
  // when an immediate/initial validation is needed and wasn't done before.
  if (!ctx._ignoreImmediate && ctx.immediate) {
    return true;
  }

  // when the value changes for whatever reason.
  if (ctx.value !== model.value) {
    return true;
  }

  // when it needs validation due to props/cross-fields changes.
  if (ctx._needsValidation) {
    return true;
  }

  // when the initial value is undefined and the field wasn't rendered yet.
  if (!ctx.initialized && model.value === undefined) {
    return true;
  }

  return false;
}

function computeModeSetting (ctx) {
  var compute = isCallable(ctx.mode) ? ctx.mode : modes[ctx.mode];

  return compute({
    errors: ctx.messages,
    value: ctx.value,
    flags: ctx.flags
  });
}

function onRenderUpdate (model) {
  if (!this.initialized) {
    this.initialValue = model.value;
  }

  var validateNow = shouldValidate(this, model);
  this._needsValidation = false;
  this.value = model.value;
  this._ignoreImmediate = true;

  if (!validateNow) {
    return;
  }

  this.validateSilent().then(this.immediate || this.flags.validated ? this.applyResult : function (x) { return x; });
}

// Creates the common handlers for a validatable context.
function createCommonHandlers (ctx) {
  var onInput = function (e) {
    ctx.syncValue(e); // track and keep the value updated.
    ctx.setFlags({ dirty: true, pristine: false });
  };

  // Blur event listener.
  var onBlur = function () {
    ctx.setFlags({ touched: true, untouched: false });
  };

  var onValidate = ctx.$veeHandler;
  var mode = computeModeSetting(ctx);

  // Handle debounce changes.
  if (!onValidate || ctx.$veeDebounce !== ctx.debounce) {
    onValidate = debounce(
      function () {
        ctx.$nextTick(function () {
          var pendingPromise = ctx.validateSilent();
          // avoids race conditions between successive validations.
          ctx._pendingValidation = pendingPromise;
          pendingPromise.then(function (result) {
            if (pendingPromise === ctx._pendingValidation) {
              ctx.applyResult(result);
              ctx._pendingValidation = null;
            }
          });
        });
      },
      mode.debounce || ctx.debounce
    );

    // Cache the handler so we don't create it each time.
    ctx.$veeHandler = onValidate;
    // cache the debounce value so we detect if it was changed.
    ctx.$veeDebounce = ctx.debounce;
  }

  return { onInput: onInput, onBlur: onBlur, onValidate: onValidate };
}

// Adds all plugin listeners to the vnode.
function addListeners (node) {
  var model = findModel(node);
  // cache the input eventName.
  this._inputEventName = this._inputEventName || getInputEventName(node, model);

  onRenderUpdate.call(this, model);

  var ref = createCommonHandlers(this);
  var onInput = ref.onInput;
  var onBlur = ref.onBlur;
  var onValidate = ref.onValidate;
  addVNodeListener(node, this._inputEventName, onInput);
  addVNodeListener(node, 'blur', onBlur);

  // add the validation listeners.
  this.normalizedEvents.forEach(function (evt) {
    addVNodeListener(node, evt, onValidate);
  });

  this.initialized = true;
}

function createValuesLookup (ctx) {
  var providers = ctx.$_veeObserver.refs;

  return ctx.fieldDeps.reduce(function (acc, depName) {
    if (!providers[depName]) {
      return acc;
    }

    acc[depName] = providers[depName].value;

    return acc;
  }, {});
}

function updateRenderingContextRefs (ctx) {
  // IDs should not be nullable.
  if (isNullOrUndefined(ctx.id) && ctx.id === ctx.vid) {
    ctx.id = PROVIDER_COUNTER;
    PROVIDER_COUNTER++;
  }

  var id = ctx.id;
  var vid = ctx.vid;
  // Nothing has changed.
  if (ctx.isDeactivated || (id === vid && ctx.$_veeObserver.refs[id])) {
    return;
  }

  // vid was changed.
  if (id !== vid && ctx.$_veeObserver.refs[id] === ctx) {
    ctx.$_veeObserver.unsubscribe({ vid: id });
  }

  ctx.$_veeObserver.subscribe(ctx);
  ctx.id = vid;
}

function createObserver () {
  return {
    refs: {},
    subscribe: function subscribe (ctx) {
      this.refs[ctx.vid] = ctx;
    },
    unsubscribe: function unsubscribe (ctx) {
      delete this.refs[ctx.vid];
    }
  };
}

function watchCrossFieldDep (ctx, depName, withHooks) {
  if ( withHooks === void 0 ) withHooks = true;

  var providers = ctx.$_veeObserver.refs;
  if (!ctx._veeWatchers) {
    ctx._veeWatchers = {};
  }

  if (!providers[depName] && withHooks) {
    return ctx.$once('hook:mounted', function () {
      watchCrossFieldDep(ctx, depName, false);
    });
  }

  if (!isCallable(ctx._veeWatchers[depName]) && providers[depName]) {
    ctx._veeWatchers[depName] = providers[depName].$watch('value', function () {
      if (ctx.flags.validated) {
        ctx._needsValidation = true;
        ctx.validate();
      }
    });
  }
}

var flagMergingStrategy = {
  pristine: 'every',
  dirty: 'some',
  touched: 'some',
  untouched: 'every',
  valid: 'every',
  invalid: 'some',
  pending: 'some',
  validated: 'every'
};

function mergeFlags (lhs, rhs, strategy) {
  var stratName = flagMergingStrategy[strategy];

  return [lhs, rhs][stratName](function (f) { return f; });
}

var OBSERVER_COUNTER = 0;

var ValidationObserver = {
  name: 'ValidationObserver',
  provide: function provide () {
    return {
      $_veeObserver: this
    };
  },
  inject: {
    $_veeObserver: {
      from: '$_veeObserver',
      default: function default$1 () {
        if (!this.$vnode.context.$_veeObserver) {
          return null;
        }

        return this.$vnode.context.$_veeObserver;
      }
    }
  },
  props: {
    tag: {
      type: String,
      default: 'span'
    },
    slim: {
      type: Boolean,
      default: false
    }
  },
  data: function () { return ({
    vid: ("obs_" + (OBSERVER_COUNTER++)),
    refs: {},
    observers: [],
    persistedStore: {}
  }); },
  computed: {
    ctx: function ctx () {
      var this$1 = this;

      var ctx = {
        errors: {},
        validate: function (arg) {
          var promise = this$1.validate(arg);

          return {
            then: function then (thenable) {
              return promise.then(function (success) {
                if (success && isCallable(thenable)) {
                  return Promise.resolve(thenable());
                }

                return Promise.resolve(success);
              });
            }
          };
        },
        reset: function () { return this$1.reset(); }
      };

      return values(this.refs).concat( Object.keys(this.persistedStore).map(function (key) {
          return {
            vid: key,
            flags: this$1.persistedStore[key].flags,
            messages: this$1.persistedStore[key].errors
          };
        }),
        this.observers ).reduce(function (acc, provider) {
        Object.keys(flagMergingStrategy).forEach(function (flag) {
          var flags = provider.flags || provider.ctx;
          if (!(flag in acc)) {
            acc[flag] = flags[flag];
            return;
          }

          acc[flag] = mergeFlags(acc[flag], flags[flag], flag);
        });

        acc.errors[provider.vid] = provider.messages || values(provider.ctx.errors).reduce(function (errs, obsErrors) {
          return errs.concat(obsErrors);
        }, []);

        return acc;
      }, ctx);
    }
  },
  created: function created () {
    if (this.$_veeObserver) {
      this.$_veeObserver.subscribe(this, 'observer');
    }
  },
  activated: function activated () {
    if (this.$_veeObserver) {
      this.$_veeObserver.subscribe(this, 'observer');
    }
  },
  deactivated: function deactivated () {
    if (this.$_veeObserver) {
      this.$_veeObserver.unsubscribe(this, 'observer');
    }
  },
  beforeDestroy: function beforeDestroy () {
    if (this.$_veeObserver) {
      this.$_veeObserver.unsubscribe(this, 'observer');
    }
  },
  render: function render (h) {
    var slots = this.$slots.default || this.$scopedSlots.default || [];
    if (isCallable(slots)) {
      slots = slots(this.ctx);
    }

    return this.slim ? createRenderless(h, slots) : h(this.tag, { on: this.$listeners, attrs: this.$attrs }, slots);
  },
  methods: {
    subscribe: function subscribe (subscriber, kind) {
      var obj;

      if ( kind === void 0 ) kind = 'provider';
      if (kind === 'observer') {
        this.observers.push(subscriber);
        return;
      }

      this.refs = Object.assign({}, this.refs, ( obj = {}, obj[subscriber.vid] = subscriber, obj));
      if (subscriber.persist && this.persistedStore[subscriber.vid]) {
        this.restoreProviderState(subscriber);
      }
    },
    unsubscribe: function unsubscribe (ref, kind) {
      var vid = ref.vid;
      if ( kind === void 0 ) kind = 'provider';

      if (kind === 'provider') {
        this.removeProvider(vid);
      }

      var idx = findIndex(this.observers, function (o) { return o.vid === vid; });
      if (idx !== -1) {
        this.observers.splice(idx, 1);
      }
    },
    validate: function validate (ref) {
      if ( ref === void 0 ) ref = { silent: false };
      var silent = ref.silent;

      return Promise.all(values(this.refs).map(function (ref) { return ref[silent ? 'validateSilent' : 'validate']().then(function (r) { return r.valid; }); }).concat( this.observers.map(function (obs) { return obs.validate({ silent: silent }); })
      )).then(function (results) { return results.every(function (r) { return r; }); });
    },
    reset: function reset () {
      var this$1 = this;

      Object.keys(this.persistedStore).forEach(function (key) {
        this$1.$delete(this$1.persistedStore, key);
      });
      return values(this.refs).concat( this.observers).forEach(function (ref) { return ref.reset(); });
    },
    restoreProviderState: function restoreProviderState (provider) {
      var state = this.persistedStore[provider.vid];
      provider.setFlags(state.flags);
      provider.applyResult(state);
      this.$delete(this.persistedStore, provider.vid);
    },
    removeProvider: function removeProvider (vid) {
      var obj;

      var provider = this.refs[vid];
      // save it for the next time.
      if (provider && provider.persist) {
        /* istanbul ignore else */
        {
          if (vid.indexOf('_vee_') === 0) {
            warn$1('Please provide a `vid` prop when using `persist`, there might be unexpected issues otherwise.');
          }
        }

        this.persistedStore = assign({}, this.persistedStore, ( obj = {}, obj[vid] = {
            flags: provider.flags,
            errors: provider.messages,
            failedRules: provider.failedRules
          }, obj));
      }

      this.$delete(this.refs, vid);
    },
  }
};

function withValidation (component, ctxToProps) {
  if ( ctxToProps === void 0 ) ctxToProps = null;

  var options = isCallable(component) ? component.options : component;
  options.$__veeInject = false;
  var hoc = {
    name: ((options.name || 'AnonymousHoc') + "WithValidation"),
    props: assign({}, ValidationProvider.props),
    data: ValidationProvider.data,
    computed: assign({}, ValidationProvider.computed),
    methods: assign({}, ValidationProvider.methods),
    $__veeInject: false,
    beforeDestroy: ValidationProvider.beforeDestroy,
    inject: ValidationProvider.inject
  };

  // Default ctx converts ctx props to component props.
  if (!ctxToProps) {
    ctxToProps = function (ctx) { return ctx; };
  }

  var eventName = (options.model && options.model.event) || 'input';

  hoc.render = function (h) {
    var obj;

    this.registerField();
    var vctx = createValidationCtx(this);
    var listeners = assign({}, this.$listeners);

    var model = findModel(this.$vnode);
    this._inputEventName = this._inputEventName || getInputEventName(this.$vnode, model);
    onRenderUpdate.call(this, model);

    var ref = createCommonHandlers(this);
    var onInput = ref.onInput;
    var onBlur = ref.onBlur;
    var onValidate = ref.onValidate;

    mergeVNodeListeners(listeners, eventName, onInput);
    mergeVNodeListeners(listeners, 'blur', onBlur);
    this.normalizedEvents.forEach(function (evt, idx) {
      mergeVNodeListeners(listeners, evt, onValidate);
    });

    // Props are any attrs not associated with ValidationProvider Plus the model prop.
    // WARNING: Accidental prop overwrite will probably happen.
    var ref$1 = findModelConfig(this.$vnode) || { prop: 'value' };
    var prop = ref$1.prop;
    var props = assign({}, this.$attrs, ( obj = {}, obj[prop] = model.value, obj), ctxToProps(vctx));

    return h(options, {
      attrs: this.$attrs,
      props: props,
      on: listeners
    }, normalizeSlots(this.$slots, this.$vnode.context));
  };

  return hoc;
}

var version = '2.2.15';

Object.keys(Rules).forEach(function (rule) {
  Validator.extend(rule, Rules[rule].validate, assign({}, Rules[rule].options, { paramNames: Rules[rule].paramNames }));
});

// Merge the english messages.
Validator.localize({ en: locale });

VeeValidate$1.version = version;
VeeValidate$1.mapFields = mapFields;
VeeValidate$1.ValidationProvider = ValidationProvider;
VeeValidate$1.ValidationObserver = ValidationObserver;
VeeValidate$1.withValidation = withValidation;

/*!
 * vue-resource v1.5.3
 * https://github.com/pagekit/vue-resource
 * Released under the MIT License.
 */

/**
 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
 */
var RESOLVED = 0;
var REJECTED = 1;
var PENDING = 2;
function Promise$1(executor) {
  this.state = PENDING;
  this.value = undefined;
  this.deferred = [];
  var promise = this;

  try {
    executor(function (x) {
      promise.resolve(x);
    }, function (r) {
      promise.reject(r);
    });
  } catch (e) {
    promise.reject(e);
  }
}

Promise$1.reject = function (r) {
  return new Promise$1(function (resolve, reject) {
    reject(r);
  });
};

Promise$1.resolve = function (x) {
  return new Promise$1(function (resolve, reject) {
    resolve(x);
  });
};

Promise$1.all = function all(iterable) {
  return new Promise$1(function (resolve, reject) {
    var count = 0,
        result = [];

    if (iterable.length === 0) {
      resolve(result);
    }

    function resolver(i) {
      return function (x) {
        result[i] = x;
        count += 1;

        if (count === iterable.length) {
          resolve(result);
        }
      };
    }

    for (var i = 0; i < iterable.length; i += 1) {
      Promise$1.resolve(iterable[i]).then(resolver(i), reject);
    }
  });
};

Promise$1.race = function race(iterable) {
  return new Promise$1(function (resolve, reject) {
    for (var i = 0; i < iterable.length; i += 1) {
      Promise$1.resolve(iterable[i]).then(resolve, reject);
    }
  });
};

var p$1 = Promise$1.prototype;

p$1.resolve = function resolve(x) {
  var promise = this;

  if (promise.state === PENDING) {
    if (x === promise) {
      throw new TypeError('Promise settled with itself.');
    }

    var called = false;

    try {
      var then = x && x['then'];

      if (x !== null && typeof x === 'object' && typeof then === 'function') {
        then.call(x, function (x) {
          if (!called) {
            promise.resolve(x);
          }

          called = true;
        }, function (r) {
          if (!called) {
            promise.reject(r);
          }

          called = true;
        });
        return;
      }
    } catch (e) {
      if (!called) {
        promise.reject(e);
      }

      return;
    }

    promise.state = RESOLVED;
    promise.value = x;
    promise.notify();
  }
};

p$1.reject = function reject(reason) {
  var promise = this;

  if (promise.state === PENDING) {
    if (reason === promise) {
      throw new TypeError('Promise settled with itself.');
    }

    promise.state = REJECTED;
    promise.value = reason;
    promise.notify();
  }
};

p$1.notify = function notify() {
  var promise = this;
  nextTick$1(function () {
    if (promise.state !== PENDING) {
      while (promise.deferred.length) {
        var deferred = promise.deferred.shift(),
            onResolved = deferred[0],
            onRejected = deferred[1],
            resolve = deferred[2],
            reject = deferred[3];

        try {
          if (promise.state === RESOLVED) {
            if (typeof onResolved === 'function') {
              resolve(onResolved.call(undefined, promise.value));
            } else {
              resolve(promise.value);
            }
          } else if (promise.state === REJECTED) {
            if (typeof onRejected === 'function') {
              resolve(onRejected.call(undefined, promise.value));
            } else {
              reject(promise.value);
            }
          }
        } catch (e) {
          reject(e);
        }
      }
    }
  });
};

p$1.then = function then(onResolved, onRejected) {
  var promise = this;
  return new Promise$1(function (resolve, reject) {
    promise.deferred.push([onResolved, onRejected, resolve, reject]);
    promise.notify();
  });
};

p$1["catch"] = function (onRejected) {
  return this.then(undefined, onRejected);
};

/**
 * Promise adapter.
 */

if (typeof Promise === 'undefined') {
  window.Promise = Promise$1;
}

function PromiseObj(executor, context) {
  if (executor instanceof Promise) {
    this.promise = executor;
  } else {
    this.promise = new Promise(executor.bind(context));
  }

  this.context = context;
}

PromiseObj.all = function (iterable, context) {
  return new PromiseObj(Promise.all(iterable), context);
};

PromiseObj.resolve = function (value, context) {
  return new PromiseObj(Promise.resolve(value), context);
};

PromiseObj.reject = function (reason, context) {
  return new PromiseObj(Promise.reject(reason), context);
};

PromiseObj.race = function (iterable, context) {
  return new PromiseObj(Promise.race(iterable), context);
};

var p$1$1 = PromiseObj.prototype;

p$1$1.bind = function (context) {
  this.context = context;
  return this;
};

p$1$1.then = function (fulfilled, rejected) {
  if (fulfilled && fulfilled.bind && this.context) {
    fulfilled = fulfilled.bind(this.context);
  }

  if (rejected && rejected.bind && this.context) {
    rejected = rejected.bind(this.context);
  }

  return new PromiseObj(this.promise.then(fulfilled, rejected), this.context);
};

p$1$1["catch"] = function (rejected) {
  if (rejected && rejected.bind && this.context) {
    rejected = rejected.bind(this.context);
  }

  return new PromiseObj(this.promise["catch"](rejected), this.context);
};

p$1$1["finally"] = function (callback) {
  return this.then(function (value) {
    callback.call(this);
    return value;
  }, function (reason) {
    callback.call(this);
    return Promise.reject(reason);
  });
};

/**
 * Utility functions.
 */
var _ref = {};
var hasOwnProperty$1 = _ref.hasOwnProperty;
var slice = [].slice;
var debug = false;
var ntick;
var inBrowser$1 = typeof window !== 'undefined';
function Util (_ref2) {
  var config = _ref2.config,
      nextTick = _ref2.nextTick;
  ntick = nextTick;
  debug = config.debug || !config.silent;
}
function warn$2(msg) {
  if (typeof console !== 'undefined' && debug) {
    console.warn('[VueResource warn]: ' + msg);
  }
}
function error(msg) {
  if (typeof console !== 'undefined') {
    console.error(msg);
  }
}
function nextTick$1(cb, ctx) {
  return ntick(cb, ctx);
}
function trim(str) {
  return str ? str.replace(/^\s*|\s*$/g, '') : '';
}
function trimEnd(str, chars) {
  if (str && chars === undefined) {
    return str.replace(/\s+$/, '');
  }

  if (!str || !chars) {
    return str;
  }

  return str.replace(new RegExp("[" + chars + "]+$"), '');
}
function toLower(str) {
  return str ? str.toLowerCase() : '';
}
function toUpper(str) {
  return str ? str.toUpperCase() : '';
}
var isArray = Array.isArray;
function isString(val) {
  return typeof val === 'string';
}
function isFunction(val) {
  return typeof val === 'function';
}
function isObject$2(obj) {
  return obj !== null && typeof obj === 'object';
}
function isPlainObject$1(obj) {
  return isObject$2(obj) && Object.getPrototypeOf(obj) == Object.prototype;
}
function isBlob(obj) {
  return typeof Blob !== 'undefined' && obj instanceof Blob;
}
function isFormData(obj) {
  return typeof FormData !== 'undefined' && obj instanceof FormData;
}
function when(value, fulfilled, rejected) {
  var promise = PromiseObj.resolve(value);

  if (arguments.length < 2) {
    return promise;
  }

  return promise.then(fulfilled, rejected);
}
function options$1$1(fn, obj, opts) {
  opts = opts || {};

  if (isFunction(opts)) {
    opts = opts.call(obj);
  }

  return merge$1(fn.bind({
    $vm: obj,
    $options: opts
  }), fn, {
    $options: opts
  });
}
function each(obj, iterator) {
  var i, key;

  if (isArray(obj)) {
    for (i = 0; i < obj.length; i++) {
      iterator.call(obj[i], obj[i], i);
    }
  } else if (isObject$2(obj)) {
    for (key in obj) {
      if (hasOwnProperty$1.call(obj, key)) {
        iterator.call(obj[key], obj[key], key);
      }
    }
  }

  return obj;
}
var assign$1 = Object.assign || _assign;
function merge$1(target) {
  var args = slice.call(arguments, 1);
  args.forEach(function (source) {
    _merge(target, source, true);
  });
  return target;
}
function defaults(target) {
  var args = slice.call(arguments, 1);
  args.forEach(function (source) {
    for (var key in source) {
      if (target[key] === undefined) {
        target[key] = source[key];
      }
    }
  });
  return target;
}

function _assign(target) {
  var args = slice.call(arguments, 1);
  args.forEach(function (source) {
    _merge(target, source);
  });
  return target;
}

function _merge(target, source, deep) {
  for (var key in source) {
    if (deep && (isPlainObject$1(source[key]) || isArray(source[key]))) {
      if (isPlainObject$1(source[key]) && !isPlainObject$1(target[key])) {
        target[key] = {};
      }

      if (isArray(source[key]) && !isArray(target[key])) {
        target[key] = [];
      }

      _merge(target[key], source[key], deep);
    } else if (source[key] !== undefined) {
      target[key] = source[key];
    }
  }
}

/**
 * Root Prefix Transform.
 */
function root (options$$1, next) {
  var url = next(options$$1);

  if (isString(options$$1.root) && !/^(https?:)?\//.test(url)) {
    url = trimEnd(options$$1.root, '/') + '/' + url;
  }

  return url;
}

/**
 * Query Parameter Transform.
 */
function query$1 (options$$1, next) {
  var urlParams = Object.keys(Url.options.params),
      query = {},
      url = next(options$$1);
  each(options$$1.params, function (value, key) {
    if (urlParams.indexOf(key) === -1) {
      query[key] = value;
    }
  });
  query = Url.params(query);

  if (query) {
    url += (url.indexOf('?') == -1 ? '?' : '&') + query;
  }

  return url;
}

/**
 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
 */
function expand(url, params, variables) {
  var tmpl = parse$1(url),
      expanded = tmpl.expand(params);

  if (variables) {
    variables.push.apply(variables, tmpl.vars);
  }

  return expanded;
}
function parse$1(template) {
  var operators = ['+', '#', '.', '/', ';', '?', '&'],
      variables = [];
  return {
    vars: variables,
    expand: function expand(context) {
      return template.replace(/\{([^{}]+)\}|([^{}]+)/g, function (_, expression, literal) {
        if (expression) {
          var operator = null,
              values = [];

          if (operators.indexOf(expression.charAt(0)) !== -1) {
            operator = expression.charAt(0);
            expression = expression.substr(1);
          }

          expression.split(/,/g).forEach(function (variable) {
            var tmp = /([^:*]*)(?::(\d+)|(\*))?/.exec(variable);
            values.push.apply(values, getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
            variables.push(tmp[1]);
          });

          if (operator && operator !== '+') {
            var separator = ',';

            if (operator === '?') {
              separator = '&';
            } else if (operator !== '#') {
              separator = operator;
            }

            return (values.length !== 0 ? operator : '') + values.join(separator);
          } else {
            return values.join(',');
          }
        } else {
          return encodeReserved(literal);
        }
      });
    }
  };
}

function getValues(context, operator, key, modifier) {
  var value = context[key],
      result = [];

  if (isDefined(value) && value !== '') {
    if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
      value = value.toString();

      if (modifier && modifier !== '*') {
        value = value.substring(0, parseInt(modifier, 10));
      }

      result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
    } else {
      if (modifier === '*') {
        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function (value) {
            result.push(encodeValue(operator, value, isKeyOperator(operator) ? key : null));
          });
        } else {
          Object.keys(value).forEach(function (k) {
            if (isDefined(value[k])) {
              result.push(encodeValue(operator, value[k], k));
            }
          });
        }
      } else {
        var tmp = [];

        if (Array.isArray(value)) {
          value.filter(isDefined).forEach(function (value) {
            tmp.push(encodeValue(operator, value));
          });
        } else {
          Object.keys(value).forEach(function (k) {
            if (isDefined(value[k])) {
              tmp.push(encodeURIComponent(k));
              tmp.push(encodeValue(operator, value[k].toString()));
            }
          });
        }

        if (isKeyOperator(operator)) {
          result.push(encodeURIComponent(key) + '=' + tmp.join(','));
        } else if (tmp.length !== 0) {
          result.push(tmp.join(','));
        }
      }
    }
  } else {
    if (operator === ';') {
      result.push(encodeURIComponent(key));
    } else if (value === '' && (operator === '&' || operator === '?')) {
      result.push(encodeURIComponent(key) + '=');
    } else if (value === '') {
      result.push('');
    }
  }

  return result;
}

function isDefined(value) {
  return value !== undefined && value !== null;
}

function isKeyOperator(operator) {
  return operator === ';' || operator === '&' || operator === '?';
}

function encodeValue(operator, value, key) {
  value = operator === '+' || operator === '#' ? encodeReserved(value) : encodeURIComponent(value);

  if (key) {
    return encodeURIComponent(key) + '=' + value;
  } else {
    return value;
  }
}

function encodeReserved(str) {
  return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
    if (!/%[0-9A-Fa-f]/.test(part)) {
      part = encodeURI(part);
    }

    return part;
  }).join('');
}

/**
 * URL Template (RFC 6570) Transform.
 */
function template (options) {
  var variables = [],
      url = expand(options.url, options.params, variables);
  variables.forEach(function (key) {
    delete options.params[key];
  });
  return url;
}

/**
 * Service for URL templating.
 */
function Url(url, params) {
  var self = this || {},
      options$$1 = url,
      transform;

  if (isString(url)) {
    options$$1 = {
      url: url,
      params: params
    };
  }

  options$$1 = merge$1({}, Url.options, self.$options, options$$1);
  Url.transforms.forEach(function (handler) {
    if (isString(handler)) {
      handler = Url.transform[handler];
    }

    if (isFunction(handler)) {
      transform = factory(handler, transform, self.$vm);
    }
  });
  return transform(options$$1);
}
/**
 * Url options.
 */

Url.options = {
  url: '',
  root: null,
  params: {}
};
/**
 * Url transforms.
 */

Url.transform = {
  template: template,
  query: query$1,
  root: root
};
Url.transforms = ['template', 'query', 'root'];
/**
 * Encodes a Url parameter string.
 *
 * @param {Object} obj
 */

Url.params = function (obj) {
  var params = [],
      escape = encodeURIComponent;

  params.add = function (key, value) {
    if (isFunction(value)) {
      value = value();
    }

    if (value === null) {
      value = '';
    }

    this.push(escape(key) + '=' + escape(value));
  };

  serialize(params, obj);
  return params.join('&').replace(/%20/g, '+');
};
/**
 * Parse a URL and return its components.
 *
 * @param {String} url
 */


Url.parse = function (url) {
  var el = document.createElement('a');

  if (document.documentMode) {
    el.href = url;
    url = el.href;
  }

  el.href = url;
  return {
    href: el.href,
    protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',
    port: el.port,
    host: el.host,
    hostname: el.hostname,
    pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,
    search: el.search ? el.search.replace(/^\?/, '') : '',
    hash: el.hash ? el.hash.replace(/^#/, '') : ''
  };
};

function factory(handler, next, vm) {
  return function (options$$1) {
    return handler.call(vm, options$$1, next);
  };
}

function serialize(params, obj, scope) {
  var array = isArray(obj),
      plain = isPlainObject$1(obj),
      hash;
  each(obj, function (value, key) {
    hash = isObject$2(value) || isArray(value);

    if (scope) {
      key = scope + '[' + (plain || hash ? key : '') + ']';
    }

    if (!scope && array) {
      params.add(value.name, value.value);
    } else if (hash) {
      serialize(params, value, key);
    } else {
      params.add(key, value);
    }
  });
}

/**
 * XDomain client (Internet Explorer).
 */
function xdrClient (request) {
  return new PromiseObj(function (resolve) {
    var xdr = new XDomainRequest(),
        handler = function handler(_ref) {
      var type = _ref.type;
      var status = 0;

      if (type === 'load') {
        status = 200;
      } else if (type === 'error') {
        status = 500;
      }

      resolve(request.respondWith(xdr.responseText, {
        status: status
      }));
    };

    request.abort = function () {
      return xdr.abort();
    };

    xdr.open(request.method, request.getUrl());

    if (request.timeout) {
      xdr.timeout = request.timeout;
    }

    xdr.onload = handler;
    xdr.onabort = handler;
    xdr.onerror = handler;
    xdr.ontimeout = handler;

    xdr.onprogress = function () {};

    xdr.send(request.getBody());
  });
}

/**
 * CORS Interceptor.
 */
var SUPPORTS_CORS = inBrowser$1 && 'withCredentials' in new XMLHttpRequest();
function cors (request) {
  if (inBrowser$1) {
    var orgUrl = Url.parse(location.href);
    var reqUrl = Url.parse(request.getUrl());

    if (reqUrl.protocol !== orgUrl.protocol || reqUrl.host !== orgUrl.host) {
      request.crossOrigin = true;
      request.emulateHTTP = false;

      if (!SUPPORTS_CORS) {
        request.client = xdrClient;
      }
    }
  }
}

/**
 * Form data Interceptor.
 */
function form (request) {
  if (isFormData(request.body)) {
    request.headers["delete"]('Content-Type');
  } else if (isObject$2(request.body) && request.emulateJSON) {
    request.body = Url.params(request.body);
    request.headers.set('Content-Type', 'application/x-www-form-urlencoded');
  }
}

/**
 * JSON Interceptor.
 */
function json (request) {
  var type = request.headers.get('Content-Type') || '';

  if (isObject$2(request.body) && type.indexOf('application/json') === 0) {
    request.body = JSON.stringify(request.body);
  }

  return function (response) {
    return response.bodyText ? when(response.text(), function (text) {
      var type = response.headers.get('Content-Type') || '';

      if (type.indexOf('application/json') === 0 || isJson(text)) {
        try {
          response.body = JSON.parse(text);
        } catch (e) {
          response.body = null;
        }
      } else {
        response.body = text;
      }

      return response;
    }) : response;
  };
}

function isJson(str) {
  var start = str.match(/^\s*(\[|\{)/);
  var end = {
    '[': /]\s*$/,
    '{': /}\s*$/
  };
  return start && end[start[1]].test(str);
}

/**
 * JSONP client (Browser).
 */
function jsonpClient (request) {
  return new PromiseObj(function (resolve) {
    var name = request.jsonp || 'callback',
        callback = request.jsonpCallback || '_jsonp' + Math.random().toString(36).substr(2),
        body = null,
        handler,
        script;

    handler = function handler(_ref) {
      var type = _ref.type;
      var status = 0;

      if (type === 'load' && body !== null) {
        status = 200;
      } else if (type === 'error') {
        status = 500;
      }

      if (status && window[callback]) {
        delete window[callback];
        document.body.removeChild(script);
      }

      resolve(request.respondWith(body, {
        status: status
      }));
    };

    window[callback] = function (result) {
      body = JSON.stringify(result);
    };

    request.abort = function () {
      handler({
        type: 'abort'
      });
    };

    request.params[name] = callback;

    if (request.timeout) {
      setTimeout(request.abort, request.timeout);
    }

    script = document.createElement('script');
    script.src = request.getUrl();
    script.type = 'text/javascript';
    script.async = true;
    script.onload = handler;
    script.onerror = handler;
    document.body.appendChild(script);
  });
}

/**
 * JSONP Interceptor.
 */
function jsonp (request) {
  if (request.method == 'JSONP') {
    request.client = jsonpClient;
  }
}

/**
 * Before Interceptor.
 */
function before$1 (request) {
  if (isFunction(request.before)) {
    request.before.call(this, request);
  }
}

/**
 * HTTP method override Interceptor.
 */
function method (request) {
  if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {
    request.headers.set('X-HTTP-Method-Override', request.method);
    request.method = 'POST';
  }
}

/**
 * Header Interceptor.
 */
function header (request) {
  var headers = assign$1({}, Http.headers.common, !request.crossOrigin ? Http.headers.custom : {}, Http.headers[toLower(request.method)]);
  each(headers, function (value, name) {
    if (!request.headers.has(name)) {
      request.headers.set(name, value);
    }
  });
}

/**
 * XMLHttp client (Browser).
 */
function xhrClient (request) {
  return new PromiseObj(function (resolve) {
    var xhr = new XMLHttpRequest(),
        handler = function handler(event) {
      var response = request.respondWith('response' in xhr ? xhr.response : xhr.responseText, {
        status: xhr.status === 1223 ? 204 : xhr.status,
        // IE9 status bug
        statusText: xhr.status === 1223 ? 'No Content' : trim(xhr.statusText)
      });
      each(trim(xhr.getAllResponseHeaders()).split('\n'), function (row) {
        response.headers.append(row.slice(0, row.indexOf(':')), row.slice(row.indexOf(':') + 1));
      });
      resolve(response);
    };

    request.abort = function () {
      return xhr.abort();
    };

    xhr.open(request.method, request.getUrl(), true);

    if (request.timeout) {
      xhr.timeout = request.timeout;
    }

    if (request.responseType && 'responseType' in xhr) {
      xhr.responseType = request.responseType;
    }

    if (request.withCredentials || request.credentials) {
      xhr.withCredentials = true;
    }

    if (!request.crossOrigin) {
      request.headers.set('X-Requested-With', 'XMLHttpRequest');
    } // deprecated use downloadProgress


    if (isFunction(request.progress) && request.method === 'GET') {
      xhr.addEventListener('progress', request.progress);
    }

    if (isFunction(request.downloadProgress)) {
      xhr.addEventListener('progress', request.downloadProgress);
    } // deprecated use uploadProgress


    if (isFunction(request.progress) && /^(POST|PUT)$/i.test(request.method)) {
      xhr.upload.addEventListener('progress', request.progress);
    }

    if (isFunction(request.uploadProgress) && xhr.upload) {
      xhr.upload.addEventListener('progress', request.uploadProgress);
    }

    request.headers.forEach(function (value, name) {
      xhr.setRequestHeader(name, value);
    });
    xhr.onload = handler;
    xhr.onabort = handler;
    xhr.onerror = handler;
    xhr.ontimeout = handler;
    xhr.send(request.getBody());
  });
}

/**
 * Http client (Node).
 */
function nodeClient (request) {
  var client = require('got');

  return new PromiseObj(function (resolve) {
    var url = request.getUrl();
    var body = request.getBody();
    var method = request.method;
    var headers = {},
        handler;
    request.headers.forEach(function (value, name) {
      headers[name] = value;
    });
    client(url, {
      body: body,
      method: method,
      headers: headers
    }).then(handler = function handler(resp) {
      var response = request.respondWith(resp.body, {
        status: resp.statusCode,
        statusText: trim(resp.statusMessage)
      });
      each(resp.headers, function (value, name) {
        response.headers.set(name, value);
      });
      resolve(response);
    }, function (error$$1) {
      return handler(error$$1.response);
    });
  });
}

/**
 * Base client.
 */
function Client (context) {
  var reqHandlers = [sendRequest],
      resHandlers = [];

  if (!isObject$2(context)) {
    context = null;
  }

  function Client(request) {
    while (reqHandlers.length) {
      var handler = reqHandlers.pop();

      if (isFunction(handler)) {
        var _ret = function () {
          var response = void 0,
              next = void 0;
          response = handler.call(context, request, function (val) {
            return next = val;
          }) || next;

          if (isObject$2(response)) {
            return {
              v: new PromiseObj(function (resolve, reject) {
                resHandlers.forEach(function (handler) {
                  response = when(response, function (response) {
                    return handler.call(context, response) || response;
                  }, reject);
                });
                when(response, resolve, reject);
              }, context)
            };
          }

          if (isFunction(response)) {
            resHandlers.unshift(response);
          }
        }();

        if (typeof _ret === "object") return _ret.v;
      } else {
        warn$2("Invalid interceptor of type " + typeof handler + ", must be a function");
      }
    }
  }

  Client.use = function (handler) {
    reqHandlers.push(handler);
  };

  return Client;
}

function sendRequest(request) {
  var client = request.client || (inBrowser$1 ? xhrClient : nodeClient);
  return client(request);
}

/**
 * HTTP Headers.
 */

var Headers = /*#__PURE__*/function () {
  function Headers(headers) {
    var _this = this;

    this.map = {};
    each(headers, function (value, name) {
      return _this.append(name, value);
    });
  }

  var _proto = Headers.prototype;

  _proto.has = function has(name) {
    return getName(this.map, name) !== null;
  };

  _proto.get = function get(name) {
    var list = this.map[getName(this.map, name)];
    return list ? list.join() : null;
  };

  _proto.getAll = function getAll(name) {
    return this.map[getName(this.map, name)] || [];
  };

  _proto.set = function set(name, value) {
    this.map[normalizeName(getName(this.map, name) || name)] = [trim(value)];
  };

  _proto.append = function append(name, value) {
    var list = this.map[getName(this.map, name)];

    if (list) {
      list.push(trim(value));
    } else {
      this.set(name, value);
    }
  };

  _proto["delete"] = function _delete(name) {
    delete this.map[getName(this.map, name)];
  };

  _proto.deleteAll = function deleteAll() {
    this.map = {};
  };

  _proto.forEach = function forEach(callback, thisArg) {
    var _this2 = this;

    each(this.map, function (list, name) {
      each(list, function (value) {
        return callback.call(thisArg, value, name, _this2);
      });
    });
  };

  return Headers;
}();

function getName(map, name) {
  return Object.keys(map).reduce(function (prev, curr) {
    return toLower(name) === toLower(curr) ? curr : prev;
  }, null);
}

function normalizeName(name) {
  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name');
  }

  return trim(name);
}

/**
 * HTTP Response.
 */

var Response = /*#__PURE__*/function () {
  function Response(body, _ref) {
    var url = _ref.url,
        headers = _ref.headers,
        status = _ref.status,
        statusText = _ref.statusText;
    this.url = url;
    this.ok = status >= 200 && status < 300;
    this.status = status || 0;
    this.statusText = statusText || '';
    this.headers = new Headers(headers);
    this.body = body;

    if (isString(body)) {
      this.bodyText = body;
    } else if (isBlob(body)) {
      this.bodyBlob = body;

      if (isBlobText(body)) {
        this.bodyText = blobText(body);
      }
    }
  }

  var _proto = Response.prototype;

  _proto.blob = function blob() {
    return when(this.bodyBlob);
  };

  _proto.text = function text() {
    return when(this.bodyText);
  };

  _proto.json = function json() {
    return when(this.text(), function (text) {
      return JSON.parse(text);
    });
  };

  return Response;
}();
Object.defineProperty(Response.prototype, 'data', {
  get: function get() {
    return this.body;
  },
  set: function set(body) {
    this.body = body;
  }
});

function blobText(body) {
  return new PromiseObj(function (resolve) {
    var reader = new FileReader();
    reader.readAsText(body);

    reader.onload = function () {
      resolve(reader.result);
    };
  });
}

function isBlobText(body) {
  return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;
}

/**
 * HTTP Request.
 */

var Request = /*#__PURE__*/function () {
  function Request(options$$1) {
    this.body = null;
    this.params = {};
    assign$1(this, options$$1, {
      method: toUpper(options$$1.method || 'GET')
    });

    if (!(this.headers instanceof Headers)) {
      this.headers = new Headers(this.headers);
    }
  }

  var _proto = Request.prototype;

  _proto.getUrl = function getUrl() {
    return Url(this);
  };

  _proto.getBody = function getBody() {
    return this.body;
  };

  _proto.respondWith = function respondWith(body, options$$1) {
    return new Response(body, assign$1(options$$1 || {}, {
      url: this.getUrl()
    }));
  };

  return Request;
}();

/**
 * Service for sending network requests.
 */
var COMMON_HEADERS = {
  'Accept': 'application/json, text/plain, */*'
};
var JSON_CONTENT_TYPE = {
  'Content-Type': 'application/json;charset=utf-8'
};
function Http(options$$1) {
  var self = this || {},
      client = Client(self.$vm);
  defaults(options$$1 || {}, self.$options, Http.options);
  Http.interceptors.forEach(function (handler) {
    if (isString(handler)) {
      handler = Http.interceptor[handler];
    }

    if (isFunction(handler)) {
      client.use(handler);
    }
  });
  return client(new Request(options$$1)).then(function (response) {
    return response.ok ? response : PromiseObj.reject(response);
  }, function (response) {
    if (response instanceof Error) {
      error(response);
    }

    return PromiseObj.reject(response);
  });
}
Http.options = {};
Http.headers = {
  put: JSON_CONTENT_TYPE,
  post: JSON_CONTENT_TYPE,
  patch: JSON_CONTENT_TYPE,
  "delete": JSON_CONTENT_TYPE,
  common: COMMON_HEADERS,
  custom: {}
};
Http.interceptor = {
  before: before$1,
  method: method,
  jsonp: jsonp,
  json: json,
  form: form,
  header: header,
  cors: cors
};
Http.interceptors = ['before', 'method', 'jsonp', 'json', 'form', 'header', 'cors'];
['get', 'delete', 'head', 'jsonp'].forEach(function (method$$1) {
  Http[method$$1] = function (url, options$$1) {
    return this(assign$1(options$$1 || {}, {
      url: url,
      method: method$$1
    }));
  };
});
['post', 'put', 'patch'].forEach(function (method$$1) {
  Http[method$$1] = function (url, body, options$$1) {
    return this(assign$1(options$$1 || {}, {
      url: url,
      method: method$$1,
      body: body
    }));
  };
});

/**
 * Service for interacting with RESTful services.
 */
function Resource(url, params, actions, options$$1) {
  var self = this || {},
      resource = {};
  actions = assign$1({}, Resource.actions, actions);
  each(actions, function (action, name) {
    action = merge$1({
      url: url,
      params: assign$1({}, params)
    }, options$$1, action);

    resource[name] = function () {
      return (self.$http || Http)(opts$1(action, arguments));
    };
  });
  return resource;
}

function opts$1(action, args) {
  var options$$1 = assign$1({}, action),
      params = {},
      body;

  switch (args.length) {
    case 2:
      params = args[0];
      body = args[1];
      break;

    case 1:
      if (/^(POST|PUT|PATCH)$/i.test(options$$1.method)) {
        body = args[0];
      } else {
        params = args[0];
      }

      break;

    case 0:
      break;

    default:
      throw 'Expected up to 2 arguments [params, body], got ' + args.length + ' arguments';
  }

  options$$1.body = body;
  options$$1.params = assign$1({}, options$$1.params, params);
  return options$$1;
}

Resource.actions = {
  get: {
    method: 'GET'
  },
  save: {
    method: 'POST'
  },
  query: {
    method: 'GET'
  },
  update: {
    method: 'PUT'
  },
  remove: {
    method: 'DELETE'
  },
  "delete": {
    method: 'DELETE'
  }
};

/**
 * Install plugin.
 */

function plugin(Vue) {
  if (plugin.installed) {
    return;
  }

  Util(Vue);
  Vue.url = Url;
  Vue.http = Http;
  Vue.resource = Resource;
  Vue.Promise = PromiseObj;
  Object.defineProperties(Vue.prototype, {
    $url: {
      get: function get() {
        return options$1$1(Vue.url, this, this.$options.url);
      }
    },
    $http: {
      get: function get() {
        return options$1$1(Vue.http, this, this.$options.http);
      }
    },
    $resource: {
      get: function get() {
        return Vue.resource.bind(this);
      }
    },
    $promise: {
      get: function get() {
        var _this = this;

        return function (executor) {
          return new Vue.Promise(executor, _this);
        };
      }
    }
  });
}

if (typeof window !== 'undefined' && window.Vue && !window.Vue.resource) {
  window.Vue.use(plugin);
}

//
//
//
//
//
//
//
//

var script = {
	name: "VueCheckbox",
	props: {
		value: Boolean,
		disabled: {
			type: Boolean,
			default: function _default() {
				return false;
			}
		},

		callback: {
			type: Function,
			default: function _default() {}
		}

	},
	data: function data() {
		return {
			ck: this.value
		};
	},

	watch: {
		value: {
			handler: function handler(v) {
				this.ck = v;
			}
		}
	},
	methods: {
		checked: function checked() {
			if (this.disabled) {
				return;
			}
			this.ck = !this.ck;
			this.$emit("input", this.ck);
			this.callback(this.ck);
		}
	}
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

const isOldIE = typeof navigator !== 'undefined' &&
    /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
    return (id, style) => addStyle(id, style);
}
let HEAD;
const styles = {};
function addStyle(id, css) {
    const group = isOldIE ? css.media || 'default' : id;
    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
    if (!style.ids.has(id)) {
        style.ids.add(id);
        let code = css.source;
        if (css.map) {
            // https://developer.chrome.com/devtools/docs/javascript-debugging
            // this makes source maps inside style tags work properly in Chrome
            code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
            // http://stackoverflow.com/a/26603875
            code +=
                '\n/*# sourceMappingURL=data:application/json;base64,' +
                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                    ' */';
        }
        if (!style.element) {
            style.element = document.createElement('style');
            style.element.type = 'text/css';
            if (css.media)
                style.element.setAttribute('media', css.media);
            if (HEAD === undefined) {
                HEAD = document.head || document.getElementsByTagName('head')[0];
            }
            HEAD.appendChild(style.element);
        }
        if ('styleSheet' in style.element) {
            style.styles.push(code);
            style.element.styleSheet.cssText = style.styles
                .filter(Boolean)
                .join('\n');
        }
        else {
            const index = style.ids.size - 1;
            const textNode = document.createTextNode(code);
            const nodes = style.element.childNodes;
            if (nodes[index])
                style.element.removeChild(nodes[index]);
            if (nodes.length)
                style.element.insertBefore(textNode, nodes[index]);
            else
                style.element.appendChild(textNode);
        }
    }
}

/* script */
var __vue_script__ = script;

/* template */
var __vue_render__ = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-checkbox", on: { click: _vm.checked } }, [_c("span", {
    staticClass: "vue-checkbox-item iconfont icon-vue-checkbox ",
    class: { active: _vm.ck, disabled: _vm.disabled },
    attrs: { disabled: _vm.disabled }
  }), _vm._v(" "), _c("span", [_vm._t("default")], 2)]);
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

/* style */
var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-d503b612_0", { source: "\n\n/*# sourceMappingURL=vue-checkbox.vue.map */", map: { "version": 3, "sources": ["vue-checkbox.vue"], "names": [], "mappings": ";;AAEA,2CAA2C", "file": "vue-checkbox.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__ = undefined;
/* module identifier */
var __vue_module_identifier__ = undefined;
/* functional template */
var __vue_is_functional_template__ = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//

var script$1 = {
    name: 'VueCheckboxGroup',
    props: {
        list: {
            type: Array
        },
        value: {
            type: Array
        }
    },
    /*list:[
    {
    key:"js",     // 键
    value:"js",      // 值
    bl:false,  		// 是否选择
    disabled:false  // 禁用
    }
    */

    data: function data() {
        return {
            ckList: this.value || []
        };
    },

    methods: {
        ck: function ck(item) {
            var _this = this;

            if (item.disabled) {
                return;
            }
            item.bl = !item.bl;
            this.ckList = [];
            this.list.forEach(function (item) {
                if (item.bl) {
                    _this.ckList.push(item.value);
                }
            });

            this.$emit('input', this.ckList);
        }
    },
    components: {
        VueCheckbox: __vue_component__
    },

    mounted: function mounted() {
        var arrs = [];
        this.ckList = arrs;
        this.$emit('input', this.ckList);
    }

};

/* script */
var __vue_script__$1 = script$1;

/* template */
var __vue_render__$1 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-checkbox-group" }, _vm._l(_vm.list, function (item) {
    return _c("div", {
      key: item.value,
      staticClass: "vue-checkbox-group-item",
      on: {
        click: function click($event) {
          return _vm.ck(item);
        }
      }
    }, [_c("span", {
      staticClass: "vue-checkbox-item iconfont ",
      class: { active: item.bl, disabled: item.disabled },
      attrs: { "data-val": item.value }
    }), _vm._v(" "), _c("span", {
      staticClass: "vue-checkbox-text",
      class: { disabled: item.disabled }
    }, [_vm._v(_vm._s(item.key))])]);
  }), 0);
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;

/* style */
var __vue_inject_styles__$1 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-3a17003d_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "vue-checkbox-group.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$1 = undefined;
/* module identifier */
var __vue_module_identifier__$1 = undefined;
/* functional template */
var __vue_is_functional_template__$1 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$1 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 }, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//
//

/*
callback(){}  // 回调函数
*/
var script$2 = {
	name: "VueCheckbtn",
	props: {
		value: {
			type: Boolean,
			default: function _default() {
				return false;
			}
		},
		callback: {
			type: Function,
			default: function _default() {}
		}
	},
	data: function data() {
		return {
			checkValue: this.value
		};
	},

	watch: {
		value: {
			deep: true,
			handler: function handler(v) {
				this.checkValue = v;
			}
		}
	},
	methods: {
		ck: function ck() {
			this.checkValue = !this.checkValue;
			this.$emit("input", this.checkValue);
			this.callback(this.checkValue);
		}
	}
};

/* script */
var __vue_script__$2 = script$2;

/* template */
var __vue_render__$2 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-checkbtn" }, [_c("div", {
    staticClass: "vue-checkbtn-item ",
    class: { active: _vm.checkValue },
    attrs: { "data-val": "true" },
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.ck.apply(null, arguments);
      }
    }
  }, [_vm._t("default", function () {
    return [_vm._v("爱心")];
  })], 2)]);
};
var __vue_staticRenderFns__$2 = [];
__vue_render__$2._withStripped = true;

/* style */
var __vue_inject_styles__$2 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-fa706d1a_0", { source: "\n\n/*# sourceMappingURL=vue-checkbtn.vue.map */", map: { "version": 3, "sources": ["vue-checkbtn.vue"], "names": [], "mappings": ";;AAEA,2CAA2C", "file": "vue-checkbtn.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$2 = undefined;
/* module identifier */
var __vue_module_identifier__$2 = undefined;
/* functional template */
var __vue_is_functional_template__$2 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$2 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 }, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, createInjector, undefined, undefined);

//
//
//
//
//
//

/*
callback(){}  // 回调函数
*/

var script$3 = {
	name: "VueCheckbtnGroup",
	props: {
		list: {
			type: Array

		},
		value: {
			type: Array
		}

	},
	data: function data() {
		return {
			ckList: this.value || []

		};
	},

	methods: {
		ck: function ck(item) {
			var _this = this;

			item.bl = !item.bl;
			this.ckList = [];
			this.list.forEach(function (o) {
				if (o.bl) {
					_this.ckList.push(o.value);
				}
			});

			this.$emit("input", this.ckList);
		},
		mapList: function mapList() {
			var _this2 = this;

			this.value = this.value || [];
			this.value.forEach(function (item) {
				if (!item.bl) {
					item.bl = false;
				}
				return _this2.vlaue;
			});
		},
		testFn: function testFn() {
			return {
				name: "1234"
			};
		}
	},
	mounted: function mounted() {
		var _this3 = this;

		var arrs = [];
		this.list.forEach(function (item) {
			if (item.bl || _this3.ckList.filter(function (o) {
				return o == item.value;
			}).length > 0) {
				arrs.push(item.value);
				item.bl = true;
			}
		});
		this.ckList = arrs;
		this.$emit('input', this.ckList);
	}
};

/* script */
var __vue_script__$3 = script$3;

/* template */
var __vue_render__$3 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-checkbtn-group" }, _vm._l(_vm.list, function (item) {
    return _c("div", {
      key: item.key,
      staticClass: "vue-checkbtn-item ",
      class: { active: item.bl },
      attrs: { "data-val": item.value },
      on: {
        click: function click($event) {
          return _vm.ck(item);
        }
      }
    }, [_vm._v(_vm._s(item.key))]);
  }), 0);
};
var __vue_staticRenderFns__$3 = [];
__vue_render__$3._withStripped = true;

/* style */
var __vue_inject_styles__$3 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-03a5ab9a_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "vue-checkbtn-group.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$3 = undefined;
/* module identifier */
var __vue_module_identifier__$3 = undefined;
/* functional template */
var __vue_is_functional_template__$3 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$3 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 }, __vue_inject_styles__$3, __vue_script__$3, __vue_scope_id__$3, __vue_is_functional_template__$3, __vue_module_identifier__$3, false, createInjector, undefined, undefined);

//
//
//
//
//
//

/*
list:[
	{
		key:"js",     // 键
		value:"js",      // 值
		disabled:false  // 禁用
	}
	,

		{
		key:"jquery",
		value:"jquery",
		disabled:false

	}
]

选中的值为 v-model


*/
var script$4 = {
	name: "VueRadiobox",
	props: {
		list: {
			type: Array
		},
		value: {}
	},
	data: function data() {
		return {
			radioGroup: false,
			checkItem: this.value,
			isDisabled: false
		};
	},

	methods: {
		ck: function ck(item) {
			if (item.disabled) {
				return;
			}
			if (this.isDisabled) {
				return;
			}

			this.checkItem = item.value;
			this.$emit("input", this.checkItem);
		}
	},
	mounted: function mounted() {
		var _this = this;

		this.list.forEach(function (item) {
			if (_this.list.filter(function (item) {
				return item.disabled === true;
			}).length > 0 && item.value == _this.checkItem && item.disabled) {
				_this.isDisabled = true;
			}
		});
	}
};

/* script */
var __vue_script__$4 = script$4;

/* template */
var __vue_render__$4 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-radiobox" }, _vm._l(_vm.list, function (item) {
    return _c("span", {
      key: item.key,
      staticClass: "vue-radiobox-item iconfont",
      class: {
        active: item.value == _vm.checkItem,
        disabled: item.disabled
      },
      on: {
        click: function click($event) {
          return _vm.ck(item);
        }
      }
    }, [_vm._v(_vm._s(item.key))]);
  }), 0);
};
var __vue_staticRenderFns__$4 = [];
__vue_render__$4._withStripped = true;

/* style */
var __vue_inject_styles__$4 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-3a922e73_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: { "version": 3, "sources": [], "names": [], "mappings": "", "file": "vue-radiobox.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$4 = undefined;
/* module identifier */
var __vue_module_identifier__$4 = undefined;
/* functional template */
var __vue_is_functional_template__$4 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$4 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 }, __vue_inject_styles__$4, __vue_script__$4, __vue_scope_id__$4, __vue_is_functional_template__$4, __vue_module_identifier__$4, false, createInjector, undefined, undefined);

//
//
//
//
//

var script$5 = {
  name: "VueRadiobtn",
  props: {
    list: {
      type: Array
    },
    value: {}
  },
  data: function data() {
    return {
      radioValue: this.value
    };
  },

  methods: {
    ck: function ck(item) {
      this.radioValue = item.value;
      this.$emit("input", this.radioValue);
    }
  }
};

/* script */
var __vue_script__$5 = script$5;

/* template */
var __vue_render__$5 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-radiobtn" }, _vm._l(_vm.list, function (item) {
    return _c("div", {
      key: item.key,
      staticClass: "vue-radiobtn-item",
      class: { active: item.value === _vm.radioValue },
      attrs: { "data-val": item.value },
      on: {
        click: function click($event) {
          return _vm.ck(item);
        }
      }
    }, [_vm._v(_vm._s(item.key))]);
  }), 0);
};
var __vue_staticRenderFns__$5 = [];
__vue_render__$5._withStripped = true;

/* style */
var __vue_inject_styles__$5 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-539900f0_0", { source: "\n\n/*# sourceMappingURL=vue-radiobtn.vue.map */", map: { "version": 3, "sources": ["vue-radiobtn.vue"], "names": [], "mappings": ";;AAEA,2CAA2C", "file": "vue-radiobtn.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$5 = undefined;
/* module identifier */
var __vue_module_identifier__$5 = undefined;
/* functional template */
var __vue_is_functional_template__$5 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$5 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 }, __vue_inject_styles__$5, __vue_script__$5, __vue_scope_id__$5, __vue_is_functional_template__$5, __vue_module_identifier__$5, false, createInjector, undefined, undefined);

//
//
//
//
//
//

var script$6 = {
    name: "VueSwitch",
    props: {
        value: {
            type: Boolean,
            default: false
        },
        callback: {
            type: Function,
            default: function _default() {}
        }
    },
    data: function data() {
        return {
            ck: this.value
        };
    },

    watch: {
        value: {
            handler: function handler(v) {
                this.ck = v;
            }
        }
    },
    methods: {
        ck: function ck() {
            this.ck = !this.ck;
            this.$emit("input", this.ck);
            this.callback(this.ck);
        }
    }
};

/* script */
var __vue_script__$6 = script$6;

/* template */
var __vue_render__$6 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {
    staticClass: "vue-switch",
    class: { active: _vm.ck },
    on: { click: _vm.ck }
  }, [_c("div", { staticClass: "vue-switch-handler" })]);
};
var __vue_staticRenderFns__$6 = [];
__vue_render__$6._withStripped = true;

/* style */
var __vue_inject_styles__$6 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-5c5a9608_0", { source: "\n\n/*# sourceMappingURL=switch.vue.map */", map: { "version": 3, "sources": ["switch.vue"], "names": [], "mappings": ";;AAEA,qCAAqC", "file": "switch.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$6 = undefined;
/* module identifier */
var __vue_module_identifier__$6 = undefined;
/* functional template */
var __vue_is_functional_template__$6 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$6 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 }, __vue_inject_styles__$6, __vue_script__$6, __vue_scope_id__$6, __vue_is_functional_template__$6, __vue_module_identifier__$6, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//

var script$7 = {
    name: "VueNumber",
    props: {
        value: {
            type: Number
        },
        min: {
            type: Number,
            default: 0
        },
        max: {
            type: Number,
            default: 1000
        },
        step: {
            type: Number,
            default: 1
        }
    },
    data: function data() {
        return {
            val: this.value
        };
    },

    methods: {
        minus: function minus() {
            this.val = this.val - this.step;
            this.val = this.val < this.min ? this.min : this.val;
            this.$emit("input", this.val);
        },
        plus: function plus() {
            this.val = this.val + this.step;
            this.val = this.val > this.max ? this.max : this.val;
            this.$emit("input", this.val);
        },
        change: function change() {
            this.val = isNaN(this.val) ? this.min : this.val;
            this.val = this.val > this.max ? this.max : this.val;
            this.val = this.val < this.min ? this.min : this.val;
            this.val = this.val <= 0 ? 0 : this.val;
            this.$emit("input", this.val);
        }
    }
};

/* script */
var __vue_script__$7 = script$7;

/* template */
var __vue_render__$7 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-number" }, [_c("button", {
    staticClass: "minus btn",
    attrs: { type: "button" },
    on: { click: _vm.minus }
  }, [_vm._v("-")]), _vm._v(" "), _c("input", {
    directives: [{ name: "model", rawName: "v-model", value: _vm.val, expression: "val" }],
    staticClass: "num",
    attrs: { type: "text" },
    domProps: { value: _vm.val },
    on: {
      change: _vm.change,
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.val = $event.target.value;
      }
    }
  }), _vm._v(" "), _c("button", {
    staticClass: "plus btn",
    attrs: { type: "button" },
    on: { click: _vm.plus }
  }, [_vm._v("+")])]);
};
var __vue_staticRenderFns__$7 = [];
__vue_render__$7._withStripped = true;

/* style */
var __vue_inject_styles__$7 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-424b59dd_0", { source: "\n\n/*# sourceMappingURL=number.vue.map */", map: { "version": 3, "sources": ["number.vue"], "names": [], "mappings": ";;AAEA,qCAAqC", "file": "number.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$7 = undefined;
/* module identifier */
var __vue_module_identifier__$7 = undefined;
/* functional template */
var __vue_is_functional_template__$7 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$7 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 }, __vue_inject_styles__$7, __vue_script__$7, __vue_scope_id__$7, __vue_is_functional_template__$7, __vue_module_identifier__$7, false, createInjector, undefined, undefined);

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule$1(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};



















var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};





















var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var dom = createCommonjsModule$1(function (module) {
  /* Zepto v1.2.0 - zepto event ajax form ie - zeptojs.com/license */
  (function (global, factory) {
    //  cmd commonjs
    {
      module.exports = factory(global);
    }
  })(commonjsGlobal, function (window) {

    var Zepto = function () {
      var undefined,
          key,
          $,
          classList,
          emptyArray = [],
          _concat = emptyArray.concat,
          _filter = emptyArray.filter,
          _slice = emptyArray.slice,
          document = window.document,
          elementDisplay = {},
          classCache = {},
          cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1, 'opacity': 1, 'z-index': 1, 'zoom': 1 },
          fragmentRE = /^\s*<(\w+|!)[^>]*>/,
          singleTagRE = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
          tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
          rootNodeRE = /^(?:body|html)$/i,
          capitalRE = /([A-Z])/g,


      // special attributes that should be get/set via method calls
      methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],
          adjacencyOperators = ['after', 'prepend', 'before', 'append'],
          table = document.createElement('table'),
          tableRow = document.createElement('tr'),
          containers = {
        'tr': document.createElement('tbody'),
        'tbody': table, 'thead': table, 'tfoot': table,
        'td': tableRow, 'th': tableRow,
        '*': document.createElement('div')
      },
          readyRE = /complete|loaded|interactive/,
          simpleSelectorRE = /^[\w-]*$/,
          class2type = {},
          toString = class2type.toString,
          zepto = {},
          camelize,
          uniq,
          tempParent = document.createElement('div'),
          propMap = {
        'tabindex': 'tabIndex',
        'readonly': 'readOnly',
        'for': 'htmlFor',
        'class': 'className',
        'maxlength': 'maxLength',
        'cellspacing': 'cellSpacing',
        'cellpadding': 'cellPadding',
        'rowspan': 'rowSpan',
        'colspan': 'colSpan',
        'usemap': 'useMap',
        'frameborder': 'frameBorder',
        'contenteditable': 'contentEditable'
      },
          isArray = Array.isArray || function (object) {
        return object instanceof Array;
      };

      zepto.matches = function (element, selector) {
        if (!selector || !element || element.nodeType !== 1) return false;
        var matchesSelector = element.matches || element.webkitMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector || element.matchesSelector;
        if (matchesSelector) return matchesSelector.call(element, selector);
        // fall back to performing a selector:
        var match,
            parent = element.parentNode,
            temp = !parent;
        if (temp) (parent = tempParent).appendChild(element);
        match = ~zepto.qsa(parent, selector).indexOf(element);
        temp && tempParent.removeChild(element);
        return match;
      };

      function type(obj) {
        return obj == null ? String(obj) : class2type[toString.call(obj)] || "object";
      }

      function isFunction(value) {
        return type(value) == "function";
      }
      function isWindow(obj) {
        return obj != null && obj == obj.window;
      }
      function isDocument(obj) {
        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;
      }
      function isObject(obj) {
        return type(obj) == "object";
      }
      function isPlainObject(obj) {
        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;
      }

      function likeArray(obj) {
        var length = !!obj && 'length' in obj && obj.length,
            type = $.type(obj);

        return 'function' != type && !isWindow(obj) && ('array' == type || length === 0 || typeof length == 'number' && length > 0 && length - 1 in obj);
      }

      function compact(array) {
        return _filter.call(array, function (item) {
          return item != null;
        });
      }
      function flatten(array) {
        return array.length > 0 ? $.fn.concat.apply([], array) : array;
      }
      camelize = function camelize(str) {
        return str.replace(/-+(.)?/g, function (match, chr) {
          return chr ? chr.toUpperCase() : '';
        });
      };
      function dasherize(str) {
        return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
      }
      uniq = function uniq(array) {
        return _filter.call(array, function (item, idx) {
          return array.indexOf(item) == idx;
        });
      };

      function classRE(name) {
        return name in classCache ? classCache[name] : classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)');
      }

      function maybeAddPx(name, value) {
        return typeof value == "number" && !cssNumber[dasherize(name)] ? value + "px" : value;
      }

      function defaultDisplay(nodeName) {
        var element, display;
        if (!elementDisplay[nodeName]) {
          element = document.createElement(nodeName);
          document.body.appendChild(element);
          display = getComputedStyle(element, '').getPropertyValue("display");
          element.parentNode.removeChild(element);
          display == "none" && (display = "block");
          elementDisplay[nodeName] = display;
        }
        return elementDisplay[nodeName];
      }

      function _children(element) {
        return 'children' in element ? _slice.call(element.children) : $.map(element.childNodes, function (node) {
          if (node.nodeType == 1) return node;
        });
      }

      function Z(dom, selector) {
        var i,
            len = dom ? dom.length : 0;
        for (i = 0; i < len; i++) {
          this[i] = dom[i];
        }this.length = len;
        this.selector = selector || '';
      }

      // `$.zepto.fragment` takes a html string and an optional tag name
      // to generate DOM nodes from the given html string.
      // The generated DOM nodes are returned as an array.
      // This function can be overridden in plugins for example to make
      // it compatible with browsers that don't support the DOM fully.
      zepto.fragment = function (html, name, properties) {
        var dom, nodes, container;

        // A special case optimization for a single tag
        if (singleTagRE.test(html)) dom = $(document.createElement(RegExp.$1));

        if (!dom) {
          if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>");
          if (name === undefined) name = fragmentRE.test(html) && RegExp.$1;
          if (!(name in containers)) name = '*';

          container = containers[name];
          container.innerHTML = '' + html;
          dom = $.each(_slice.call(container.childNodes), function () {
            container.removeChild(this);
          });
        }

        if (isPlainObject(properties)) {
          nodes = $(dom);
          $.each(properties, function (key, value) {
            if (methodAttributes.indexOf(key) > -1) nodes[key](value);else nodes.attr(key, value);
          });
        }

        return dom;
      };

      // `$.zepto.Z` swaps out the prototype of the given `dom` array
      // of nodes with `$.fn` and thus supplying all the Zepto functions
      // to the array. This method can be overridden in plugins.
      zepto.Z = function (dom, selector) {
        return new Z(dom, selector);
      };

      // `$.zepto.isZ` should return `true` if the given object is a Zepto
      // collection. This method can be overridden in plugins.
      zepto.isZ = function (object) {
        return object instanceof zepto.Z;
      };

      // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
      // takes a CSS selector and an optional context (and handles various
      // special cases).
      // This method can be overridden in plugins.
      zepto.init = function (selector, context) {
        var dom;
        // If nothing given, return an empty Zepto collection
        if (!selector) return zepto.Z();
        // Optimize for string selectors
        else if (typeof selector == 'string') {
            selector = selector.trim();
            // If it's a html fragment, create nodes from it
            // Note: In both Chrome 21 and Firefox 15, DOM error 12
            // is thrown if the fragment doesn't begin with <
            if (selector[0] == '<' && fragmentRE.test(selector)) dom = zepto.fragment(selector, RegExp.$1, context), selector = null;
            // If there's a context, create a collection on that context first, and select
            // nodes from there
            else if (context !== undefined) return $(context).find(selector);
              // If it's a CSS selector, use it to select nodes.
              else dom = zepto.qsa(document, selector);
          }
          // If a function is given, call it when the DOM is ready
          else if (isFunction(selector)) return $(document).ready(selector);
            // If a Zepto collection is given, just return it
            else if (zepto.isZ(selector)) return selector;else {
                // normalize array if an array of nodes is given
                if (isArray(selector)) dom = compact(selector);
                // Wrap DOM nodes.
                else if (isObject(selector)) dom = [selector], selector = null;
                  // If it's a html fragment, create nodes from it
                  else if (fragmentRE.test(selector)) dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null;
                    // If there's a context, create a collection on that context first, and select
                    // nodes from there
                    else if (context !== undefined) return $(context).find(selector);
                      // And last but no least, if it's a CSS selector, use it to select nodes.
                      else dom = zepto.qsa(document, selector);
              }
        // create a new Zepto collection from the nodes found
        return zepto.Z(dom, selector);
      };

      // `$` will be the base `Zepto` object. When calling this
      // function just call `$.zepto.init, which makes the implementation
      // details of selecting nodes and creating Zepto collections
      // patchable in plugins.
      $ = function $(selector, context) {
        return zepto.init(selector, context);
      };

      function extend(target, source, deep) {
        for (key in source) {
          if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
            if (isPlainObject(source[key]) && !isPlainObject(target[key])) target[key] = {};
            if (isArray(source[key]) && !isArray(target[key])) target[key] = [];
            extend(target[key], source[key], deep);
          } else if (source[key] !== undefined) target[key] = source[key];
        }
      }

      // Copy all but undefined properties from one or more
      // objects to the `target` object.
      $.extend = function (target) {
        var deep,
            args = _slice.call(arguments, 1);
        if (typeof target == 'boolean') {
          deep = target;
          target = args.shift();
        }
        args.forEach(function (arg) {
          extend(target, arg, deep);
        });
        return target;
      };

      // `$.zepto.qsa` is Zepto's CSS selector implementation which
      // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
      // This method can be overridden in plugins.
      zepto.qsa = function (element, selector) {
        var found,
            maybeID = selector[0] == '#',
            maybeClass = !maybeID && selector[0] == '.',
            nameOnly = maybeID || maybeClass ? selector.slice(1) : selector,
            // Ensure that a 1 char tag name still gets checked
        isSimple = simpleSelectorRE.test(nameOnly);
        return element.getElementById && isSimple && maybeID ? // Safari DocumentFragment doesn't have getElementById
        (found = element.getElementById(nameOnly)) ? [found] : [] : element.nodeType !== 1 && element.nodeType !== 9 && element.nodeType !== 11 ? [] : _slice.call(isSimple && !maybeID && element.getElementsByClassName ? // DocumentFragment doesn't have getElementsByClassName/TagName
        maybeClass ? element.getElementsByClassName(nameOnly) : // If it's simple, it could be a class
        element.getElementsByTagName(selector) : // Or a tag
        element.querySelectorAll(selector) // Or it's not simple, and we need to query all
        );
      };

      function filtered(nodes, selector) {
        return selector == null ? $(nodes) : $(nodes).filter(selector);
      }

      $.contains = document.documentElement.contains ? function (parent, node) {
        return parent !== node && parent.contains(node);
      } : function (parent, node) {
        while (node && (node = node.parentNode)) {
          if (node === parent) return true;
        }return false;
      };

      function funcArg(context, arg, idx, payload) {
        return isFunction(arg) ? arg.call(context, idx, payload) : arg;
      }

      function setAttribute(node, name, value) {
        value == null ? node.removeAttribute(name) : node.setAttribute(name, value);
      }

      // access className property while respecting SVGAnimatedString
      function className(node, value) {
        var klass = node.className || '',
            svg = klass && klass.baseVal !== undefined;

        if (value === undefined) return svg ? klass.baseVal : klass;
        svg ? klass.baseVal = value : node.className = value;
      }

      // "true"  => true
      // "false" => false
      // "null"  => null
      // "42"    => 42
      // "42.5"  => 42.5
      // "08"    => "08"
      // JSON    => parse if valid
      // String  => self
      function deserializeValue(value) {
        try {
          return value ? value == "true" || (value == "false" ? false : value == "null" ? null : +value + "" == value ? +value : /^[\[\{]/.test(value) ? $.parseJSON(value) : value) : value;
        } catch (e) {
          return value;
        }
      }

      $.type = type;
      $.isFunction = isFunction;
      $.isWindow = isWindow;
      $.isArray = isArray;
      $.isPlainObject = isPlainObject;

      $.isEmptyObject = function (obj) {
        var name;
        for (name in obj) {
          return false;
        }return true;
      };

      $.isNumeric = function (val) {
        var num = Number(val),
            type = typeof val === 'undefined' ? 'undefined' : _typeof(val);
        return val != null && type != 'boolean' && (type != 'string' || val.length) && !isNaN(num) && isFinite(num) || false;
      };

      $.inArray = function (elem, array, i) {
        return emptyArray.indexOf.call(array, elem, i);
      };

      $.camelCase = camelize;
      $.trim = function (str) {
        return str == null ? "" : String.prototype.trim.call(str);
      };

      // plugin compatibility
      $.uuid = 0;
      $.support = {};
      $.expr = {};
      $.noop = function () {};

      $.map = function (elements, callback) {
        var value,
            values = [],
            i,
            key;
        if (likeArray(elements)) for (i = 0; i < elements.length; i++) {
          value = callback(elements[i], i);
          if (value != null) values.push(value);
        } else for (key in elements) {
          value = callback(elements[key], key);
          if (value != null) values.push(value);
        }
        return flatten(values);
      };

      $.each = function (elements, callback) {
        var i, key;
        if (likeArray(elements)) {
          for (i = 0; i < elements.length; i++) {
            if (callback.call(elements[i], i, elements[i]) === false) return elements;
          }
        } else {
          for (key in elements) {
            if (callback.call(elements[key], key, elements[key]) === false) return elements;
          }
        }

        return elements;
      };

      $.grep = function (elements, callback) {
        return _filter.call(elements, callback);
      };

      if (window.JSON) $.parseJSON = JSON.parse;

      // Populate the class2type map
      $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function (i, name) {
        class2type["[object " + name + "]"] = name.toLowerCase();
      });

      // Define methods that will be available on all
      // Zepto collections
      $.fn = {
        constructor: zepto.Z,
        length: 0,

        // Because a collection acts like an array
        // copy over these useful array functions.
        forEach: emptyArray.forEach,
        reduce: emptyArray.reduce,
        push: emptyArray.push,
        sort: emptyArray.sort,
        splice: emptyArray.splice,
        indexOf: emptyArray.indexOf,
        concat: function concat() {
          var i,
              value,
              args = [];
          for (i = 0; i < arguments.length; i++) {
            value = arguments[i];
            args[i] = zepto.isZ(value) ? value.toArray() : value;
          }
          return _concat.apply(zepto.isZ(this) ? this.toArray() : this, args);
        },

        // `map` and `slice` in the jQuery API work differently
        // from their array counterparts
        map: function map(fn) {
          return $($.map(this, function (el, i) {
            return fn.call(el, i, el);
          }));
        },
        slice: function slice() {
          return $(_slice.apply(this, arguments));
        },

        ready: function ready(callback) {
          // need to check if document.body exists for IE as that browser reports
          // document ready when it hasn't yet created the body element
          if (readyRE.test(document.readyState) && document.body) callback($);else document.addEventListener('DOMContentLoaded', function () {
            callback($);
          }, false);
          return this;
        },
        get: function get$$1(idx) {
          return idx === undefined ? _slice.call(this) : this[idx >= 0 ? idx : idx + this.length];
        },
        toArray: function toArray() {
          return this.get();
        },
        size: function size() {
          return this.length;
        },
        remove: function remove() {
          return this.each(function () {
            if (this.parentNode != null) this.parentNode.removeChild(this);
          });
        },
        each: function each(callback) {
          emptyArray.every.call(this, function (el, idx) {
            return callback.call(el, idx, el) !== false;
          });
          return this;
        },
        filter: function filter(selector) {
          if (isFunction(selector)) return this.not(this.not(selector));
          return $(_filter.call(this, function (element) {
            return zepto.matches(element, selector);
          }));
        },
        add: function add(selector, context) {
          return $(uniq(this.concat($(selector, context))));
        },
        is: function is(selector) {
          return this.length > 0 && zepto.matches(this[0], selector);
        },
        not: function not(selector) {
          var nodes = [];
          if (isFunction(selector) && selector.call !== undefined) this.each(function (idx) {
            if (!selector.call(this, idx)) nodes.push(this);
          });else {
            var excludes = typeof selector == 'string' ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? _slice.call(selector) : $(selector);
            this.forEach(function (el) {
              if (excludes.indexOf(el) < 0) nodes.push(el);
            });
          }
          return $(nodes);
        },
        has: function has(selector) {
          return this.filter(function () {
            return isObject(selector) ? $.contains(this, selector) : $(this).find(selector).size();
          });
        },
        eq: function eq(idx) {
          return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);
        },
        first: function first() {
          var el = this[0];
          return el && !isObject(el) ? el : $(el);
        },
        last: function last() {
          var el = this[this.length - 1];
          return el && !isObject(el) ? el : $(el);
        },
        find: function find(selector) {
          var result,
              $this = this;
          if (!selector) result = $();else if ((typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object') result = $(selector).filter(function () {
            var node = this;
            return emptyArray.some.call($this, function (parent) {
              return $.contains(parent, node);
            });
          });else if (this.length == 1) result = $(zepto.qsa(this[0], selector));else result = this.map(function () {
            return zepto.qsa(this, selector);
          });
          return result;
        },
        closest: function closest(selector, context) {
          var nodes = [],
              collection = (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) == 'object' && $(selector);
          this.each(function (_, node) {
            while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector))) {
              node = node !== context && !isDocument(node) && node.parentNode;
            }if (node && nodes.indexOf(node) < 0) nodes.push(node);
          });
          return $(nodes);
        },
        parents: function parents(selector) {
          var ancestors = [],
              nodes = this;
          while (nodes.length > 0) {
            nodes = $.map(nodes, function (node) {
              if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
                ancestors.push(node);
                return node;
              }
            });
          }return filtered(ancestors, selector);
        },
        parent: function parent(selector) {
          return filtered(uniq(this.pluck('parentNode')), selector);
        },
        children: function children(selector) {
          return filtered(this.map(function () {
            return _children(this);
          }), selector);
        },
        contents: function contents() {
          return this.map(function () {
            return this.contentDocument || _slice.call(this.childNodes);
          });
        },
        siblings: function siblings(selector) {
          return filtered(this.map(function (i, el) {
            return _filter.call(_children(el.parentNode), function (child) {
              return child !== el;
            });
          }), selector);
        },
        empty: function empty() {
          return this.each(function () {
            this.innerHTML = '';
          });
        },
        // `pluck` is borrowed from Prototype.js
        pluck: function pluck(property) {
          return $.map(this, function (el) {
            return el[property];
          });
        },
        show: function show() {
          return this.each(function () {
            this.style.display == "none" && (this.style.display = '');
            if (getComputedStyle(this, '').getPropertyValue("display") == "none") this.style.display = defaultDisplay(this.nodeName);
          });
        },
        replaceWith: function replaceWith(newContent) {
          return this.before(newContent).remove();
        },
        wrap: function wrap(structure) {
          var func = isFunction(structure);
          if (this[0] && !func) var dom = $(structure).get(0),
              clone = dom.parentNode || this.length > 1;

          return this.each(function (index) {
            $(this).wrapAll(func ? structure.call(this, index) : clone ? dom.cloneNode(true) : dom);
          });
        },
        wrapAll: function wrapAll(structure) {
          if (this[0]) {
            $(this[0]).before(structure = $(structure));
            var children;
            // drill down to the inmost element
            while ((children = structure.children()).length) {
              structure = children.first();
            }$(structure).append(this);
          }
          return this;
        },
        wrapInner: function wrapInner(structure) {
          var func = isFunction(structure);
          return this.each(function (index) {
            var self = $(this),
                contents = self.contents(),
                dom = func ? structure.call(this, index) : structure;
            contents.length ? contents.wrapAll(dom) : self.append(dom);
          });
        },
        unwrap: function unwrap() {
          this.parent().each(function () {
            $(this).replaceWith($(this).children());
          });
          return this;
        },
        clone: function clone() {
          return this.map(function () {
            return this.cloneNode(true);
          });
        },
        hide: function hide() {
          return this.css("display", "none");
        },
        toggle: function toggle(setting) {
          return this.each(function () {
            var el = $(this);(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide();
          });
        },
        prev: function prev(selector) {
          return $(this.pluck('previousElementSibling')).filter(selector || '*');
        },
        next: function next(selector) {
          return $(this.pluck('nextElementSibling')).filter(selector || '*');
        },
        html: function html(_html) {
          return 0 in arguments ? this.each(function (idx) {
            var originHtml = this.innerHTML;
            $(this).empty().append(funcArg(this, _html, idx, originHtml));
          }) : 0 in this ? this[0].innerHTML : null;
        },
        text: function text(_text) {
          return 0 in arguments ? this.each(function (idx) {
            var newText = funcArg(this, _text, idx, this.textContent);
            this.textContent = newText == null ? '' : '' + newText;
          }) : 0 in this ? this.pluck('textContent').join("") : null;
        },
        attr: function attr(name, value) {
          var result;
          return typeof name == 'string' && !(1 in arguments) ? 0 in this && this[0].nodeType == 1 && (result = this[0].getAttribute(name)) != null ? result : undefined : this.each(function (idx) {
            if (this.nodeType !== 1) return;
            if (isObject(name)) for (key in name) {
              setAttribute(this, key, name[key]);
            } else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)));
          });
        },
        removeAttr: function removeAttr(name) {
          return this.each(function () {
            this.nodeType === 1 && name.split(' ').forEach(function (attribute) {
              setAttribute(this, attribute);
            }, this);
          });
        },
        prop: function prop(name, value) {
          name = propMap[name] || name;
          return 1 in arguments ? this.each(function (idx) {
            this[name] = funcArg(this, value, idx, this[name]);
          }) : this[0] && this[0][name];
        },
        removeProp: function removeProp(name) {
          name = propMap[name] || name;
          return this.each(function () {
            delete this[name];
          });
        },
        data: function data(name, value) {
          var attrName = 'data-' + name.replace(capitalRE, '-$1').toLowerCase();

          var data = 1 in arguments ? this.attr(attrName, value) : this.attr(attrName);

          return data !== null ? deserializeValue(data) : undefined;
        },
        val: function val(value) {
          if (0 in arguments) {
            if (value == null) value = "";
            return this.each(function (idx) {
              this.value = funcArg(this, value, idx, this.value);
            });
          } else {
            return this[0] && (this[0].multiple ? $(this[0]).find('option').filter(function () {
              return this.selected;
            }).pluck('value') : this[0].value);
          }
        },
        offset: function offset(coordinates) {
          if (coordinates) return this.each(function (index) {
            var $this = $(this),
                coords = funcArg(this, coordinates, index, $this.offset()),
                parentOffset = $this.offsetParent().offset(),
                props = {
              top: coords.top - parentOffset.top,
              left: coords.left - parentOffset.left
            };

            if ($this.css('position') == 'static') props['position'] = 'relative';
            $this.css(props);
          });
          if (!this.length) return null;
          if (document.documentElement !== this[0] && !$.contains(document.documentElement, this[0])) return { top: 0, left: 0 };
          var obj = this[0].getBoundingClientRect();
          return {
            left: obj.left + window.pageXOffset,
            top: obj.top + window.pageYOffset,
            width: Math.round(obj.width),
            height: Math.round(obj.height)
          };
        },
        css: function css(property, value) {
          if (arguments.length < 2) {
            var element = this[0];
            if (typeof property == 'string') {
              if (!element) return;
              return element.style[camelize(property)] || getComputedStyle(element, '').getPropertyValue(property);
            } else if (isArray(property)) {
              if (!element) return;
              var props = {};
              var computedStyle = getComputedStyle(element, '');
              $.each(property, function (_, prop) {
                props[prop] = element.style[camelize(prop)] || computedStyle.getPropertyValue(prop);
              });
              return props;
            }
          }

          var css = '';
          if (type(property) == 'string') {
            if (!value && value !== 0) this.each(function () {
              this.style.removeProperty(dasherize(property));
            });else css = dasherize(property) + ":" + maybeAddPx(property, value);
          } else {
            for (key in property) {
              if (!property[key] && property[key] !== 0) this.each(function () {
                this.style.removeProperty(dasherize(key));
              });else css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';
            }
          }

          return this.each(function () {
            this.style.cssText += ';' + css;
          });
        },
        index: function index(element) {
          return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);
        },
        hasClass: function hasClass(name) {
          if (!name) return false;
          return emptyArray.some.call(this, function (el) {
            return this.test(className(el));
          }, classRE(name));
        },
        addClass: function addClass(name) {
          if (!name) return this;
          return this.each(function (idx) {
            if (!('className' in this)) return;
            classList = [];
            var cls = className(this),
                newName = funcArg(this, name, idx, cls);
            newName.split(/\s+/g).forEach(function (klass) {
              if (!$(this).hasClass(klass)) classList.push(klass);
            }, this);
            classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "));
          });
        },
        removeClass: function removeClass(name) {
          return this.each(function (idx) {
            if (!('className' in this)) return;
            if (name === undefined) return className(this, '');
            classList = className(this);
            funcArg(this, name, idx, classList).split(/\s+/g).forEach(function (klass) {
              classList = classList.replace(classRE(klass), " ");
            });
            className(this, classList.trim());
          });
        },
        toggleClass: function toggleClass(name, when) {
          if (!name) return this;
          return this.each(function (idx) {
            var $this = $(this),
                names = funcArg(this, name, idx, className(this));
            names.split(/\s+/g).forEach(function (klass) {
              (when === undefined ? !$this.hasClass(klass) : when) ? $this.addClass(klass) : $this.removeClass(klass);
            });
          });
        },
        scrollTop: function scrollTop(value) {
          if (!this.length) return;
          var hasScrollTop = 'scrollTop' in this[0];
          if (value === undefined) return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset;
          return this.each(hasScrollTop ? function () {
            this.scrollTop = value;
          } : function () {
            this.scrollTo(this.scrollX, value);
          });
        },
        scrollLeft: function scrollLeft(value) {
          if (!this.length) return;
          var hasScrollLeft = 'scrollLeft' in this[0];
          if (value === undefined) return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset;
          return this.each(hasScrollLeft ? function () {
            this.scrollLeft = value;
          } : function () {
            this.scrollTo(value, this.scrollY);
          });
        },
        position: function position() {
          if (!this.length) return;

          var elem = this[0],

          // Get *real* offsetParent
          offsetParent = this.offsetParent(),

          // Get correct offsets
          offset = this.offset(),
              parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

          // Subtract element margins
          // note: when an element has margin: auto the offsetLeft and marginLeft
          // are the same in Safari causing offset.left to incorrectly be 0
          offset.top -= parseFloat($(elem).css('margin-top')) || 0;
          offset.left -= parseFloat($(elem).css('margin-left')) || 0;

          // Add offsetParent borders
          parentOffset.top += parseFloat($(offsetParent[0]).css('border-top-width')) || 0;
          parentOffset.left += parseFloat($(offsetParent[0]).css('border-left-width')) || 0;

          // Subtract the two offsets
          return {
            top: offset.top - parentOffset.top,
            left: offset.left - parentOffset.left
          };
        },
        offsetParent: function offsetParent() {
          return this.map(function () {
            var parent = this.offsetParent || document.body;
            while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static") {
              parent = parent.offsetParent;
            }return parent;
          });
        }

        // for now
      };$.fn.detach = $.fn.remove

      // Generate the `width` and `height` functions
      ;['width', 'height'].forEach(function (dimension) {
        var dimensionProperty = dimension.replace(/./, function (m) {
          return m[0].toUpperCase();
        });

        $.fn[dimension] = function (value) {
          var offset,
              el = this[0];
          if (value === undefined) return isWindow(el) ? el['inner' + dimensionProperty] : isDocument(el) ? el.documentElement['scroll' + dimensionProperty] : (offset = this.offset()) && offset[dimension];else return this.each(function (idx) {
            el = $(this);
            el.css(dimension, funcArg(this, value, idx, el[dimension]()));
          });
        };
      });

      function traverseNode(node, fun) {
        fun(node);
        for (var i = 0, len = node.childNodes.length; i < len; i++) {
          traverseNode(node.childNodes[i], fun);
        }
      }

      // Generate the `after`, `prepend`, `before`, `append`,
      // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
      adjacencyOperators.forEach(function (operator, operatorIndex) {
        var inside = operatorIndex % 2; //=> prepend, append

        $.fn[operator] = function () {
          // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
          var argType,
              nodes = $.map(arguments, function (arg) {
            var arr = [];
            argType = type(arg);
            if (argType == "array") {
              arg.forEach(function (el) {
                if (el.nodeType !== undefined) return arr.push(el);else if ($.zepto.isZ(el)) return arr = arr.concat(el.get());
                arr = arr.concat(zepto.fragment(el));
              });
              return arr;
            }
            return argType == "object" || arg == null ? arg : zepto.fragment(arg);
          }),
              parent,
              copyByClone = this.length > 1;
          if (nodes.length < 1) return this;

          return this.each(function (_, target) {
            parent = inside ? target : target.parentNode;

            // convert all methods to a "before" operation
            target = operatorIndex == 0 ? target.nextSibling : operatorIndex == 1 ? target.firstChild : operatorIndex == 2 ? target : null;

            var parentInDocument = $.contains(document.documentElement, parent);

            nodes.forEach(function (node) {
              if (copyByClone) node = node.cloneNode(true);else if (!parent) return $(node).remove();

              parent.insertBefore(node, target);
              if (parentInDocument) traverseNode(node, function (el) {
                if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' && (!el.type || el.type === 'text/javascript') && !el.src) {
                  var target = el.ownerDocument ? el.ownerDocument.defaultView : window;
                  target['eval'].call(target, el.innerHTML);
                }
              });
            });
          });
        };

        // after    => insertAfter
        // prepend  => prependTo
        // before   => insertBefore
        // append   => appendTo
        $.fn[inside ? operator + 'To' : 'insert' + (operatorIndex ? 'Before' : 'After')] = function (html) {
          $(html)[operator](this);
          return this;
        };
      });

      zepto.Z.prototype = Z.prototype = $.fn;

      // Export internal API functions in the `$.zepto` namespace
      zepto.uniq = uniq;
      zepto.deserializeValue = deserializeValue;
      $.zepto = zepto;

      return $;
    }();

    window.Zepto = Zepto;
    window.$ === undefined && (window.$ = Zepto);(function ($) {
      var _zid = 1,
          undefined,
          slice = Array.prototype.slice,
          isFunction = $.isFunction,
          isString = function isString(obj) {
        return typeof obj == 'string';
      },
          handlers = {},
          specialEvents = {},
          focusinSupported = 'onfocusin' in window,
          focus = { focus: 'focusin', blur: 'focusout' },
          hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' };

      specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents';

      function zid(element) {
        return element._zid || (element._zid = _zid++);
      }
      function findHandlers(element, event, fn, selector) {
        event = parse(event);
        if (event.ns) var matcher = matcherFor(event.ns);
        return (handlers[zid(element)] || []).filter(function (handler) {
          return handler && (!event.e || handler.e == event.e) && (!event.ns || matcher.test(handler.ns)) && (!fn || zid(handler.fn) === zid(fn)) && (!selector || handler.sel == selector);
        });
      }
      function parse(event) {
        var parts = ('' + event).split('.');
        return { e: parts[0], ns: parts.slice(1).sort().join(' ') };
      }
      function matcherFor(ns) {
        return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');
      }

      function eventCapture(handler, captureSetting) {
        return handler.del && !focusinSupported && handler.e in focus || !!captureSetting;
      }

      function realEvent(type) {
        return hover[type] || focusinSupported && focus[type] || type;
      }

      function add(element, events, fn, data, selector, delegator, capture) {
        var id = zid(element),
            set = handlers[id] || (handlers[id] = []);
        events.split(/\s/).forEach(function (event) {
          if (event == 'ready') return $(document).ready(fn);
          var handler = parse(event);
          handler.fn = fn;
          handler.sel = selector;
          // emulate mouseenter, mouseleave
          if (handler.e in hover) fn = function fn(e) {
            var related = e.relatedTarget;
            if (!related || related !== this && !$.contains(this, related)) return handler.fn.apply(this, arguments);
          };
          handler.del = delegator;
          var callback = delegator || fn;
          handler.proxy = function (e) {
            e = compatible(e);
            if (e.isImmediatePropagationStopped()) return;
            e.data = data;
            var result = callback.apply(element, e._args == undefined ? [e] : [e].concat(e._args));
            if (result === false) e.preventDefault(), e.stopPropagation();
            return result;
          };
          handler.i = set.length;
          set.push(handler);
          if ('addEventListener' in element) element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
        });
      }
      function remove(element, events, fn, selector, capture) {
        var id = zid(element);(events || '').split(/\s/).forEach(function (event) {
          findHandlers(element, event, fn, selector).forEach(function (handler) {
            delete handlers[id][handler.i];
            if ('removeEventListener' in element) element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture));
          });
        });
      }

      $.event = { add: add, remove: remove };

      $.proxy = function (fn, context) {
        var args = 2 in arguments && slice.call(arguments, 2);
        if (isFunction(fn)) {
          var proxyFn = function proxyFn() {
            return fn.apply(context, args ? args.concat(slice.call(arguments)) : arguments);
          };
          proxyFn._zid = zid(fn);
          return proxyFn;
        } else if (isString(context)) {
          if (args) {
            args.unshift(fn[context], fn);
            return $.proxy.apply(null, args);
          } else {
            return $.proxy(fn[context], fn);
          }
        } else {
          throw new TypeError("expected function");
        }
      };

      $.fn.bind = function (event, data, callback) {
        return this.on(event, data, callback);
      };
      $.fn.unbind = function (event, callback) {
        return this.off(event, callback);
      };
      $.fn.one = function (event, selector, data, callback) {
        return this.on(event, selector, data, callback, 1);
      };

      var returnTrue = function returnTrue() {
        return true;
      },
          returnFalse = function returnFalse() {
        return false;
      },
          ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$|webkitMovement[XY]$)/,
          eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      };

      function compatible(event, source) {
        if (source || !event.isDefaultPrevented) {
          source || (source = event);

          $.each(eventMethods, function (name, predicate) {
            var sourceMethod = source[name];
            event[name] = function () {
              this[predicate] = returnTrue;
              return sourceMethod && sourceMethod.apply(source, arguments);
            };
            event[predicate] = returnFalse;
          });

          event.timeStamp || (event.timeStamp = Date.now());

          if (source.defaultPrevented !== undefined ? source.defaultPrevented : 'returnValue' in source ? source.returnValue === false : source.getPreventDefault && source.getPreventDefault()) event.isDefaultPrevented = returnTrue;
        }
        return event;
      }

      function createProxy(event) {
        var key,
            proxy = { originalEvent: event };
        for (key in event) {
          if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key];
        }return compatible(proxy, event);
      }

      $.fn.delegate = function (selector, event, callback) {
        return this.on(event, selector, callback);
      };
      $.fn.undelegate = function (selector, event, callback) {
        return this.off(event, selector, callback);
      };

      $.fn.live = function (event, callback) {
        $(document.body).delegate(this.selector, event, callback);
        return this;
      };
      $.fn.die = function (event, callback) {
        $(document.body).undelegate(this.selector, event, callback);
        return this;
      };

      $.fn.on = function (event, selector, data, callback, one) {
        var autoRemove,
            delegator,
            $this = this;
        if (event && !isString(event)) {
          $.each(event, function (type, fn) {
            $this.on(type, selector, data, fn, one);
          });
          return $this;
        }

        if (!isString(selector) && !isFunction(callback) && callback !== false) callback = data, data = selector, selector = undefined;
        if (callback === undefined || data === false) callback = data, data = undefined;

        if (callback === false) callback = returnFalse;

        return $this.each(function (_, element) {
          if (one) autoRemove = function autoRemove(e) {
            remove(element, e.type, callback);
            return callback.apply(this, arguments);
          };

          if (selector) delegator = function delegator(e) {
            var evt,
                match = $(e.target).closest(selector, element).get(0);
            if (match && match !== element) {
              evt = $.extend(createProxy(e), { currentTarget: match, liveFired: element });
              return (autoRemove || callback).apply(match, [evt].concat(slice.call(arguments, 1)));
            }
          };

          add(element, event, callback, data, selector, delegator || autoRemove);
        });
      };
      $.fn.off = function (event, selector, callback) {
        var $this = this;
        if (event && !isString(event)) {
          $.each(event, function (type, fn) {
            $this.off(type, selector, fn);
          });
          return $this;
        }

        if (!isString(selector) && !isFunction(callback) && callback !== false) callback = selector, selector = undefined;

        if (callback === false) callback = returnFalse;

        return $this.each(function () {
          remove(this, event, callback, selector);
        });
      };

      $.fn.trigger = function (event, args) {
        event = isString(event) || $.isPlainObject(event) ? $.Event(event) : compatible(event);
        event._args = args;
        return this.each(function () {
          // handle focus(), blur() by calling them directly
          if (event.type in focus && typeof this[event.type] == "function") this[event.type]();
          // items in the collection might not be DOM elements
          else if ('dispatchEvent' in this) this.dispatchEvent(event);else $(this).triggerHandler(event, args);
        });
      };

      // triggers event handlers on current element just as if an event occurred,
      // doesn't trigger an actual event, doesn't bubble
      $.fn.triggerHandler = function (event, args) {
        var e, result;
        this.each(function (i, element) {
          e = createProxy(isString(event) ? $.Event(event) : event);
          e._args = args;
          e.target = element;
          $.each(findHandlers(element, event.type || event), function (i, handler) {
            result = handler.proxy(e);
            if (e.isImmediatePropagationStopped()) return false;
          });
        });
        return result;
      }

      // shortcut methods for `.bind(event, fn)` for each event type
      ;('focusin focusout focus blur load resize scroll unload click dblclick ' + 'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' + 'change select keydown keypress keyup error').split(' ').forEach(function (event) {
        $.fn[event] = function (callback) {
          return 0 in arguments ? this.bind(event, callback) : this.trigger(event);
        };
      });

      $.Event = function (type, props) {
        if (!isString(type)) props = type, type = props.type;
        var event = document.createEvent(specialEvents[type] || 'Events'),
            bubbles = true;
        if (props) for (var name in props) {
          name == 'bubbles' ? bubbles = !!props[name] : event[name] = props[name];
        }event.initEvent(type, bubbles, true);
        return compatible(event);
      };
    })(Zepto);(function ($) {
      var jsonpID = +new Date(),
          document = window.document,
          key,
          name,
          rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
          scriptTypeRE = /^(?:text|application)\/javascript/i,
          xmlTypeRE = /^(?:text|application)\/xml/i,
          jsonType = 'application/json',
          htmlType = 'text/html',
          blankRE = /^\s*$/,
          originAnchor = document.createElement('a');

      originAnchor.href = window.location.href;

      // trigger a custom event and return false if it was cancelled
      function triggerAndReturn(context, eventName, data) {
        var event = $.Event(eventName);
        $(context).trigger(event, data);
        return !event.isDefaultPrevented();
      }

      // trigger an Ajax "global" event
      function triggerGlobal(settings, context, eventName, data) {
        if (settings.global) return triggerAndReturn(context || document, eventName, data);
      }

      // Number of active Ajax requests
      $.active = 0;

      function ajaxStart(settings) {
        if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart');
      }
      function ajaxStop(settings) {
        if (settings.global && ! --$.active) triggerGlobal(settings, null, 'ajaxStop');
      }

      // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
      function ajaxBeforeSend(xhr, settings) {
        var context = settings.context;
        if (settings.beforeSend.call(context, xhr, settings) === false || triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false) return false;

        triggerGlobal(settings, context, 'ajaxSend', [xhr, settings]);
      }
      function ajaxSuccess(data, xhr, settings, deferred) {
        var context = settings.context,
            status = 'success';
        settings.success.call(context, data, status, xhr);
        if (deferred) deferred.resolveWith(context, [data, status, xhr]);
        triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data]);
        ajaxComplete(status, xhr, settings);
      }
      // type: "timeout", "error", "abort", "parsererror"
      function ajaxError(error, type, xhr, settings, deferred) {
        var context = settings.context;
        settings.error.call(context, xhr, type, error);
        if (deferred) deferred.rejectWith(context, [xhr, type, error]);
        triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type]);
        ajaxComplete(type, xhr, settings);
      }
      // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
      function ajaxComplete(status, xhr, settings) {
        var context = settings.context;
        settings.complete.call(context, xhr, status);
        triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings]);
        ajaxStop(settings);
      }

      function ajaxDataFilter(data, type, settings) {
        if (settings.dataFilter == empty) return data;
        var context = settings.context;
        return settings.dataFilter.call(context, data, type);
      }

      // Empty function, used as default callback
      function empty() {}

      $.ajaxJSONP = function (options, deferred) {
        if (!('type' in options)) return $.ajax(options);

        var _callbackName = options.jsonpCallback,
            callbackName = ($.isFunction(_callbackName) ? _callbackName() : _callbackName) || 'Zepto' + jsonpID++,
            script = document.createElement('script'),
            originalCallback = window[callbackName],
            responseData,
            abort = function abort(errorType) {
          $(script).triggerHandler('error', errorType || 'abort');
        },
            xhr = { abort: abort },
            abortTimeout;

        if (deferred) deferred.promise(xhr);

        $(script).on('load error', function (e, errorType) {
          clearTimeout(abortTimeout);
          $(script).off().remove();

          if (e.type == 'error' || !responseData) {
            ajaxError(null, errorType || 'error', xhr, options, deferred);
          } else {
            ajaxSuccess(responseData[0], xhr, options, deferred);
          }

          window[callbackName] = originalCallback;
          if (responseData && $.isFunction(originalCallback)) originalCallback(responseData[0]);

          originalCallback = responseData = undefined;
        });

        if (ajaxBeforeSend(xhr, options) === false) {
          abort('abort');
          return xhr;
        }

        window[callbackName] = function () {
          responseData = arguments;
        };

        script.src = options.url.replace(/\?(.+)=\?/, '?$1=' + callbackName);
        document.head.appendChild(script);

        if (options.timeout > 0) abortTimeout = setTimeout(function () {
          abort('timeout');
        }, options.timeout);

        return xhr;
      };

      $.ajaxSettings = {
        // Default type of request
        type: 'GET',
        // Callback that is executed before request
        beforeSend: empty,
        // Callback that is executed if the request succeeds
        success: empty,
        // Callback that is executed the the server drops error
        error: empty,
        // Callback that is executed on request complete (both: error and success)
        complete: empty,
        // The context for the callbacks
        context: null,
        // Whether to trigger "global" Ajax events
        global: true,
        // Transport
        xhr: function xhr() {
          return new window.XMLHttpRequest();
        },
        // MIME types mapping
        // IIS returns Javascript as "application/x-javascript"
        accepts: {
          script: 'text/javascript, application/javascript, application/x-javascript',
          json: jsonType,
          xml: 'application/xml, text/xml',
          html: htmlType,
          text: 'text/plain'
        },
        // Whether the request is to another domain
        crossDomain: false,
        // Default timeout
        timeout: 0,
        // Whether data should be serialized to string
        processData: true,
        // Whether the browser should be allowed to cache GET responses
        cache: true,
        //Used to handle the raw response data of XMLHttpRequest.
        //This is a pre-filtering function to sanitize the response.
        //The sanitized response should be returned
        dataFilter: empty
      };

      function mimeToDataType(mime) {
        if (mime) mime = mime.split(';', 2)[0];
        return mime && (mime == htmlType ? 'html' : mime == jsonType ? 'json' : scriptTypeRE.test(mime) ? 'script' : xmlTypeRE.test(mime) && 'xml') || 'text';
      }

      function appendQuery(url, query) {
        if (query == '') return url;
        return (url + '&' + query).replace(/[&?]{1,2}/, '?');
      }

      // serialize payload and append it to the URL for GET requests
      function serializeData(options) {
        if (options.processData && options.data && $.type(options.data) != "string") options.data = $.param(options.data, options.traditional);
        if (options.data && (!options.type || options.type.toUpperCase() == 'GET' || 'jsonp' == options.dataType)) options.url = appendQuery(options.url, options.data), options.data = undefined;
      }

      $.ajax = function (options) {
        var settings = $.extend({}, options || {}),
            deferred = $.Deferred && $.Deferred(),
            urlAnchor,
            hashIndex;
        for (key in $.ajaxSettings) {
          if (settings[key] === undefined) settings[key] = $.ajaxSettings[key];
        }ajaxStart(settings);

        if (!settings.crossDomain) {
          urlAnchor = document.createElement('a');
          urlAnchor.href = settings.url;
          // cleans up URL for .href (IE only), see https://github.com/madrobby/zepto/pull/1049
          urlAnchor.href = urlAnchor.href;
          settings.crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
        }

        if (!settings.url) settings.url = window.location.toString();
        if ((hashIndex = settings.url.indexOf('#')) > -1) settings.url = settings.url.slice(0, hashIndex);
        serializeData(settings);

        var dataType = settings.dataType,
            hasPlaceholder = /\?.+=\?/.test(settings.url);
        if (hasPlaceholder) dataType = 'jsonp';

        if (settings.cache === false || (!options || options.cache !== true) && ('script' == dataType || 'jsonp' == dataType)) settings.url = appendQuery(settings.url, '_=' + Date.now());

        if ('jsonp' == dataType) {
          if (!hasPlaceholder) settings.url = appendQuery(settings.url, settings.jsonp ? settings.jsonp + '=?' : settings.jsonp === false ? '' : 'callback=?');
          return $.ajaxJSONP(settings, deferred);
        }

        var mime = settings.accepts[dataType],
            headers = {},
            setHeader = function setHeader(name, value) {
          headers[name.toLowerCase()] = [name, value];
        },
            protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
            xhr = settings.xhr(),
            nativeSetHeader = xhr.setRequestHeader,
            abortTimeout;

        if (deferred) deferred.promise(xhr);

        if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest');
        setHeader('Accept', mime || '*/*');
        if (mime = settings.mimeType || mime) {
          if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0];
          xhr.overrideMimeType && xhr.overrideMimeType(mime);
        }
        if (settings.contentType || settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET') setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded');

        if (settings.headers) for (name in settings.headers) {
          setHeader(name, settings.headers[name]);
        }xhr.setRequestHeader = setHeader;

        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
            xhr.onreadystatechange = empty;
            clearTimeout(abortTimeout);
            var result,
                error = false;
            if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304 || xhr.status == 0 && protocol == 'file:') {
              dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'));

              if (xhr.responseType == 'arraybuffer' || xhr.responseType == 'blob') result = xhr.response;else {
                result = xhr.responseText;

                try {
                  // http://perfectionkills.com/global-eval-what-are-the-options/
                  // sanitize response accordingly if data filter callback provided
                  result = ajaxDataFilter(result, dataType, settings);
                  if (dataType == 'script') (eval)(result);else if (dataType == 'xml') result = xhr.responseXML;else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result);
                } catch (e) {
                  error = e;
                }

                if (error) return ajaxError(error, 'parsererror', xhr, settings, deferred);
              }

              ajaxSuccess(result, xhr, settings, deferred);
            } else {
              ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred);
            }
          }
        };

        if (ajaxBeforeSend(xhr, settings) === false) {
          xhr.abort();
          ajaxError(null, 'abort', xhr, settings, deferred);
          return xhr;
        }

        var async = 'async' in settings ? settings.async : true;
        xhr.open(settings.type, settings.url, async, settings.username, settings.password);

        if (settings.xhrFields) for (name in settings.xhrFields) {
          xhr[name] = settings.xhrFields[name];
        }for (name in headers) {
          nativeSetHeader.apply(xhr, headers[name]);
        }if (settings.timeout > 0) abortTimeout = setTimeout(function () {
          xhr.onreadystatechange = empty;
          xhr.abort();
          ajaxError(null, 'timeout', xhr, settings, deferred);
        }, settings.timeout);

        // avoid sending empty string (#319)
        xhr.send(settings.data ? settings.data : null);
        return xhr;
      };

      // handle optional data/success arguments
      function parseArguments(url, data, success, dataType) {
        if ($.isFunction(data)) dataType = success, success = data, data = undefined;
        if (!$.isFunction(success)) dataType = success, success = undefined;
        return {
          url: url,
          data: data,
          success: success,
          dataType: dataType
        };
      }

      $.get = function () /* url, data, success, dataType */{
        return $.ajax(parseArguments.apply(null, arguments));
      };

      $.post = function () /* url, data, success, dataType */{
        var options = parseArguments.apply(null, arguments);
        options.type = 'POST';
        return $.ajax(options);
      };

      $.getJSON = function () /* url, data, success */{
        var options = parseArguments.apply(null, arguments);
        options.dataType = 'json';
        return $.ajax(options);
      };

      $.fn.load = function (url, data, success) {
        if (!this.length) return this;
        var self = this,
            parts = url.split(/\s/),
            selector,
            options = parseArguments(url, data, success),
            callback = options.success;
        if (parts.length > 1) options.url = parts[0], selector = parts[1];
        options.success = function (response) {
          self.html(selector ? $('<div>').html(response.replace(rscript, "")).find(selector) : response);
          callback && callback.apply(self, arguments);
        };
        $.ajax(options);
        return this;
      };

      var escape = encodeURIComponent;

      function serialize(params, obj, traditional, scope) {
        var type,
            array = $.isArray(obj),
            hash = $.isPlainObject(obj);
        $.each(obj, function (key, value) {
          type = $.type(value);
          if (scope) key = traditional ? scope : scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']';
          // handle data in serializeArray() format
          if (!scope && array) params.add(value.name, value.value);
          // recurse into nested objects
          else if (type == "array" || !traditional && type == "object") serialize(params, value, traditional, key);else params.add(key, value);
        });
      }

      $.param = function (obj, traditional) {
        var params = [];
        params.add = function (key, value) {
          if ($.isFunction(value)) value = value();
          if (value == null) value = "";
          this.push(escape(key) + '=' + escape(value));
        };
        serialize(params, obj, traditional);
        return params.join('&').replace(/%20/g, '+');
      };
    })(Zepto);(function ($) {
      $.fn.serializeArray = function () {
        var name,
            type,
            result = [],
            add = function add(value) {
          if (value.forEach) return value.forEach(add);
          result.push({ name: name, value: value });
        };
        if (this[0]) $.each(this[0].elements, function (_, field) {
          type = field.type, name = field.name;
          if (name && field.nodeName.toLowerCase() != 'fieldset' && !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' && (type != 'radio' && type != 'checkbox' || field.checked)) add($(field).val());
        });
        return result;
      };

      $.fn.serialize = function () {
        var result = [];
        this.serializeArray().forEach(function (elm) {
          result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value));
        });
        return result.join('&');
      };

      $.fn.submit = function (callback) {
        if (0 in arguments) this.bind('submit', callback);else if (this.length) {
          var event = $.Event('submit');
          this.eq(0).trigger(event);
          if (!event.isDefaultPrevented()) this.get(0).submit();
        }
        return this;
      };
    })(Zepto);(function () {
      // getComputedStyle shouldn't freak out when called
      // without a valid element as argument
      try {
        getComputedStyle(undefined);
      } catch (e) {
        var nativeGetComputedStyle = getComputedStyle;
        window.getComputedStyle = function (element, pseudoElement) {
          try {
            return nativeGetComputedStyle(element, pseudoElement);
          } catch (e) {
            return null;
          }
        };
      }
    })();
    return Zepto;
  });
});

var file = function ($) {
    var upload = function upload(option) {
        var p = $(option.el).parents(".vue-file");
        if ((typeof option === "undefined" ? "undefined" : _typeof(option)) !== 'object') {
            $(".vue-file-btn").show();
            $.alert("参数有误！");
            return;
        }

        if (option.size) {
            if (option.data.size > option.size) {
                $.alert("文件大于" + option.size / 1000000 + "M");
                $(".vue-file-btn").show();
                return;
            }
        } else {
            $.alert("参数没有设置文件大小值[size]");
            $(".vue-file-btn", p).show();
            return;
        }

        var data = new FormData();
        // name=file
        data.append('file', option.data);

        $.ajax({
            url: option.url,
            data: data,
            type: "post",
            timeout: option.outTime,
            dataType: 'json',
            cache: false,
            processData: false,
            contentType: option.contentType || false,
            enctype: 'multipart/form-data',
            withCredentials: true,
            xhrFields: {
                withCredentials: true
            },
            xhr: function xhr() {
                //获取ajaxSettings中的xhr对象，为它的upload属性绑定progress事件的处理函数
                var myXhr = $.ajaxSettings.xhr();

                if (myXhr.upload) {
                    //检查upload属性是否存在
                    //绑定progress事件的回调函数
                    myXhr.upload.onprogress = progressFunction;
                }
                return myXhr; //xhr对象返回给jQuery或zepto使用
            },
            success: option.success,
            error: option.error
        });

        //progress事件的回调函数
        function progressFunction(evt) {

            //var p = $(option.el).parents(".vue-file");
            var widthAll = $(".progress-all", p).width();
            var progressBar = $(".progress-all", p);
            var percentageDiv = $(".progress-now", p);
            var percentageNum = $(".progress-num", p);

            if (evt.lengthComputable) {
                progressBar.max = evt.total;
                progressBar.value = evt.loaded;
                $(percentageDiv).css("width", Math.round(evt.loaded / evt.total * widthAll) + "px");
                $(percentageNum).text(Math.ceil(evt.loaded / evt.total * 100) + "%");
                //          if (evt.loaded == evt.total) {
                //            //  console.log("上传完成100%");
                //          }
            }
        }
    };

    $.fn.VueFile = function (option) {
        var $this = this;
        $($this).on("click", ".vue-file-btn", function (e) {
            e.stopPropagation();
            e.preventDefault();
            var p = $(this).parents(".vue-file");
            // 点击文件上传框
            $(".fileUp", p).click();
        });

        // 文件上传框值变化
        $($this).on("change", ".fileUp", function (e) {
            fileupff(this);
        });

        var fileupff = function fileupff(obj) {
            var p = $(obj).parents(".vue-file");
            $(".vue-file-btn", p).hide();
            var $img = $(obj).closest(".vue-file").find(".img");
            var $propress = $(obj).closest(".vue-file").find(".progress-all");
            $propress.show();

            // 是否支持html5 文件上传
            if (typeof obj.files === "undefined") {
                $(".vue-file-btn", p).show();
                alert("不支持html5 文件上传,请升级你的浏览器  \n not support html5 ");
                return;
            }

            var file = obj.files[0];

            upload({
                data: file, //选择的文件
                url: option.url, //"./index.html", //上传网址
                outTime: 30000,
                el: $(obj), //当前element
                size: option.size * 1000000, //1m=1000000
                contentType: option.contentType, //false,
                success: function success(data) {
                    option.success(data, p);
                    $propress.hide();
                    obj.value = null;
                    $(".vue-file-btn", p).show();
                }, //成功回调
                error: function error(data) {
                    option.error(data, p);
                    $propress.hide();
                    obj.value = null;
                    $(".vue-file-btn", p).show();
                } //错误回调

            }); //调用上传接口
        };
    };
};

var _props;

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

file(dom);
var script$8 = {
  name: "VueFile",
  props: (_props = {
    value: {},
    url: {
      type: String,
      default: ""
    },
    name: {
      type: String,
      default: "vue-file-upload"
    }
  }, defineProperty(_props, "url", {
    type: String,
    default: ""
  }), defineProperty(_props, "fileType", {
    type: String,
    default: "*.*"
  }), defineProperty(_props, "size", {
    type: Number,
    default: 100
  }), defineProperty(_props, "timeout", {
    type: Number,
    default: 30
  }), defineProperty(_props, "btnClass", {
    type: String,
    default: "btn-primary"
  }), defineProperty(_props, "lineClass", {
    type: String,
    default: "text-primary"
  }), defineProperty(_props, "btnText", {
    type: String,
    default: "上传图片"
  }), defineProperty(_props, "ok", {
    type: Function,
    default: function _default() {}
  }), defineProperty(_props, "err", { type: Function,
    default: function _default() {} }), _props),
  mounted: function mounted() {
    /***文件上传  start***/
    dom("." + this.name).VueFile({
      url: this.url, //上传网址
      outTime: this.timeout * 1000,
      size: this.size * 1024, // 大小 m
      contentType: false,
      success: function (data, el) {
        this.$emit("input", data);
        this.ok(data, el);
      }.bind(this),
      error: function (err, el) {
        //  this.$emit("input", err);
        this.err(err, el);
      }.bind(this)
    });
  }
};

/* script */
var __vue_script__$8 = script$8;

/* template */
var __vue_render__$8 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "vue-file", class: _vm.name }, [_c("a", {
    staticClass: "vue-file-btn btn",
    class: _vm.btnClass,
    attrs: { name: "up", href: "javascript:" }
  }, [_c("span", { staticClass: "glyphicon glyphicon-upload" }), _vm._v("\n    " + _vm._s(_vm.btnText) + "\n  ")]), _vm._v(" "), _c("input", {
    staticClass: "fileUp v-hide-text",
    attrs: {
      type: "file",
      id: "fileUp",
      value: "",
      name: "file",
      accept: _vm.fileType
    }
  }), _vm._v(" "), _c("div", { staticClass: "progress-all v-hide" }, [_c("div", { staticClass: "progress-now", class: _vm.lineClass }), _vm._v(" "), _c("div", { staticClass: "progress-num" }, [_vm._v("0%")])])]);
};
var __vue_staticRenderFns__$8 = [];
__vue_render__$8._withStripped = true;

/* style */
var __vue_inject_styles__$8 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-f97d61b4_0", { source: ".vue-file {\n  display: flex;\n  align-items: center;\n  height: 34px;\n}\n.v-hide-text {\n  position: absolute !important;\n  display: inline-block !important;\n  text-indent: -99999px;\n  margin: -2px !important;\n  padding: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n  outline: none !important;\n}\n.vue-file-btn.btn-primary {\n  background: #2d80f6;\n}\n.vue-file-btn.btn-info {\n  background: #5bc0de;\n}\n.vue-file-btn.btn-success {\n  background: #5cb85c;\n}\n.vue-file-btn.btn-warning {\n  background: #f0ad4e;\n}\n.vue-file-btn.btn-danger {\n  background: #f05a00;\n}\n.progress-box {\n  position: relative;\n  margin-bottom: 10px;\n  background: #ccc;\n  border: 1px solid #ddd;\n  padding: 10px;\n}\n.progress-box img {\n  width: 300px;\n  height: 150px;\n}\n.progress-all {\n  position: relative;\n  clear: both;\n  width: 100%;\n  height: 3px;\n  margin-top: 1.5px;\n  background: #ddd;\n}\n.progress-now {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 3px;\n  padding: 0;\n}\n.progress-now.text-primary {\n  background: #2d80f6;\n}\n.progress-now.text-info {\n  background: #5bc0de;\n}\n.progress-now.text-success {\n  background: #5cb85c;\n}\n.progress-now.text-warning {\n  background: #f0ad4e;\n}\n.progress-now.text-danger {\n  background: #f05a00;\n}\n.progress-num {\n  position: relative;\n  top: -8px !important;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  text-align: center;\n  font-size: 12px;\n}\n\n/*# sourceMappingURL=file.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\components\\vue-share\\file\\file.vue", "file.vue"], "names": [], "mappings": "AAwFA;EACA,aAAA;EACA,mBAAA;EACA,YAAA;ACvFA;AD0FA;EACA,6BAAA;EACA,gCAAA;EACA,qBAAA;EACA,uBAAA;EACA,qBAAA;EACA,mBAAA;EACA,oBAAA;EACA,wBAAA;ACvFA;AD0FA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;AD2FA;EACA,kBAAA;EACA,mBAAA;EACA,gBAAA;EACA,sBAAA;EACA,aAAA;ACxFA;AD2FA;EACA,YAAA;EACA,aAAA;ACxFA;AD2FA;EACA,kBAAA;EACA,WAAA;EACA,WAAA;EACA,WAAA;EACA,iBAAA;EACA,gBAAA;ACxFA;AD2FA;EACA,kBAAA;EACA,MAAA;EACA,OAAA;EACA,QAAA;EACA,WAAA;EACA,UAAA;ACxFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;ADyFA;EACA,mBAAA;ACvFA;AD2FA;EACA,kBAAA;EACA,oBAAA;EACA,OAAA;EACA,WAAA;EACA,YAAA;EACA,kBAAA;EACA,eAAA;ACxFA;;AAEA,mCAAmC", "file": "file.vue", "sourcesContent": ["\r\n<template>\r\n  <div class=\"vue-file\" :class=\"name\">\r\n    <a class=\"vue-file-btn btn\" :class=\"btnClass\" name=\"up\" href=\"javascript:\">\r\n      <span class=\"glyphicon glyphicon-upload\"></span>\r\n      {{btnText}}\r\n    </a>\r\n    <input class=\"fileUp v-hide-text\" type=\"file\"  id=\"fileUp\" value name=\"file\"    :accept=\"fileType\"  >\r\n    <!--进度条-->\r\n    <div class=\"progress-all v-hide\">\r\n      <div class=\"progress-now\" :class=\"lineClass\"></div>\r\n      <div class=\"progress-num\">0%</div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport $ from \"../dom.js\";\r\nimport file from \"./file.js\";\r\nfile($);\r\nexport default {\r\n\tname:\"VueFile\",\r\n  props: {\r\n    value: {},\r\n     url: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n     name: {\r\n       type:String,\r\n       default:\"vue-file-upload\"\r\n     },\r\n     url: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    fileType: {\r\n      type: String,\r\n      default: \"*.*\"\r\n    },\r\n     size: {\r\n      type: Number,\r\n      default: 100\r\n    },\r\n     timeout: {\r\n      type: Number,\r\n      default: 30\r\n    },\r\n    btnClass: {\r\n      type: String,\r\n      default: \"btn-primary\"\r\n    },\r\n    lineClass: {\r\n      type: String,\r\n      default: \"text-primary\"\r\n    },\r\n    btnText: {\r\n      type: String,\r\n      default: \"上传图片\"\r\n    },\r\n    ok: {\r\n      type: Function,\r\n      default: function() {}\r\n    },\r\n    err: { type: Function,\r\n     default: function() {} }\r\n  },\r\n  mounted() {\r\n    /***文件上传  start***/\r\n    $(\".\"+this.name).VueFile({\r\n      url: this.url, //上传网址\r\n      outTime: this.timeout*1000,\r\n      size: this.size*1024, // 大小 m\r\n      contentType: false,\r\n      success: function(data, el) {\r\n        this.$emit(\"input\", data);\r\n        this.ok(data,el);\r\n      }.bind(this),\r\n      error: function(err, el) {\r\n      //  this.$emit(\"input\", err);\r\n        this.err(err,el);\r\n      }.bind(this)\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.vue-file {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 34px;\r\n}\r\n\r\n.v-hide-text {\r\n  position: absolute !important;\r\n  display: inline-block !important;\r\n  text-indent: -99999px;\r\n  margin: -2px !important;\r\n  padding: 0 !important;\r\n  width: 0 !important;\r\n  height: 0 !important;\r\n  outline: none !important;\r\n}\r\n.vue-file-btn {\r\n  &.btn-primary {\r\n    background: #2d80f6;\r\n  }\r\n  &.btn-info {\r\n    background: #5bc0de;\r\n  }\r\n  &.btn-success {\r\n    background: #5cb85c;\r\n  }\r\n  &.btn-warning {\r\n    background: #f0ad4e;\r\n  }\r\n  &.btn-danger {\r\n    background: #f05a00;\r\n  }\r\n}\r\n\r\n.progress-box {\r\n  position: relative;\r\n  margin-bottom: 10px;\r\n  background: #ccc;\r\n  border: 1px solid #ddd;\r\n  padding: 10px;\r\n}\r\n\r\n.progress-box img {\r\n  width: 300px;\r\n  height: 150px;\r\n}\r\n\r\n.progress-all {\r\n  position: relative;\r\n  clear: both;\r\n  width: 100%;\r\n  height: 3px;\r\n  margin-top: 1.5px;\r\n  background: #ddd;\r\n}\r\n\r\n.progress-now {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 0;\r\n  height: 3px;\r\n  padding: 0;\r\n  &.text-primary {\r\n    background: #2d80f6;\r\n  }\r\n  &.text-info {\r\n    background: #5bc0de;\r\n  }\r\n  &.text-success {\r\n    background: #5cb85c;\r\n  }\r\n  &.text-warning {\r\n    background: #f0ad4e;\r\n  }\r\n  &.text-danger {\r\n    background: #f05a00;\r\n  }\r\n}\r\n\r\n.progress-num {\r\n  position: relative;\r\n  top: -8px !important;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 10px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n}\r\n</style>\r\n", ".vue-file {\n  display: flex;\n  align-items: center;\n  height: 34px;\n}\n\n.v-hide-text {\n  position: absolute !important;\n  display: inline-block !important;\n  text-indent: -99999px;\n  margin: -2px !important;\n  padding: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n  outline: none !important;\n}\n\n.vue-file-btn.btn-primary {\n  background: #2d80f6;\n}\n.vue-file-btn.btn-info {\n  background: #5bc0de;\n}\n.vue-file-btn.btn-success {\n  background: #5cb85c;\n}\n.vue-file-btn.btn-warning {\n  background: #f0ad4e;\n}\n.vue-file-btn.btn-danger {\n  background: #f05a00;\n}\n\n.progress-box {\n  position: relative;\n  margin-bottom: 10px;\n  background: #ccc;\n  border: 1px solid #ddd;\n  padding: 10px;\n}\n\n.progress-box img {\n  width: 300px;\n  height: 150px;\n}\n\n.progress-all {\n  position: relative;\n  clear: both;\n  width: 100%;\n  height: 3px;\n  margin-top: 1.5px;\n  background: #ddd;\n}\n\n.progress-now {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 3px;\n  padding: 0;\n}\n.progress-now.text-primary {\n  background: #2d80f6;\n}\n.progress-now.text-info {\n  background: #5bc0de;\n}\n.progress-now.text-success {\n  background: #5cb85c;\n}\n.progress-now.text-warning {\n  background: #f0ad4e;\n}\n.progress-now.text-danger {\n  background: #f05a00;\n}\n\n.progress-num {\n  position: relative;\n  top: -8px !important;\n  left: 0;\n  width: 100%;\n  height: 10px;\n  text-align: center;\n  font-size: 12px;\n}\n\n/*# sourceMappingURL=file.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$8 = undefined;
/* module identifier */
var __vue_module_identifier__$8 = undefined;
/* functional template */
var __vue_is_functional_template__$8 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$8 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 }, __vue_inject_styles__$8, __vue_script__$8, __vue_scope_id__$8, __vue_is_functional_template__$8, __vue_module_identifier__$8, false, createInjector, undefined, undefined);

var eventBus = new Vue();

/*
 * 分页组件
 * */

var paging$1 = function paging($) {

	var page = {
		index: 0, //	当前页
		pageItem: 0, //  每页条数
		allItem: 0, //  总条数
		allPage: 0, //  总页数
		showCount: 0, //  显示的页码数目
		groupPage: 0, // 页码的分组数目
		selector: "", //分页元素的选择器
		isAnimation: false, //是否显示动画
		isShowSkip: false, // 是否显示跳转页
		isShowCount: false, // 是否显示总页数
		isShowAllItems: false, // 是否显示总条目


		prevText: "上一页",
		nextText: "下一页",

		firstText: "第一页",
		lastText: "后一页",

		prevGroupText: "...",
		nextGroupText: "...",

		// 页码是否显示
		isShowNumber: true, //是否显示数字
		isShowPrevNext: true, // 是否显示上下页
		isShowFirstLast: true, // 是否显示第一页和后一页
		isShowPrevNextGroup: true // 是否显示上下页组

	};

	function checkParameter(obj) {

		// 页码
		page.index = typeof obj.index === "number" ? obj.index : 0;
		page.pageItem = typeof obj.pageItem === "number" ? obj.pageItem : 0;
		page.allItem = typeof obj.allItem === "number" ? obj.allItem : 0;
		page.showCount = typeof obj.showCount === "number" ? obj.showCount : 0;
		page.selector = typeof obj.selector === "string" ? obj.selector : ".paning";
		page.isAnimation = typeof obj.isAnimation === "boolean" ? obj.isAnimation : false;
		page.isShowSkip = typeof obj.isShowSkip === "boolean" ? obj.isShowSkip : false;
		page.isShowCount = typeof obj.isShowCount === "boolean" ? obj.isShowCount : false;
		page.isShowAllItems = typeof obj.isShowAllItems === "boolean" ? obj.isShowAllItems : false;

		// 显示的文本
		page.prevText = typeof obj.prevText === "string" ? obj.prevText : page.prevText;
		page.nextText = typeof obj.nextText === "string" ? obj.nextText : page.nextText;
		page.firstText = typeof obj.firstText === "string" ? obj.firstText : page.firstText;
		page.lastText = typeof obj.lastText === "string" ? obj.lastText : page.lastText;
		page.prevGroupText = typeof obj.prevGroupText === "string" ? obj.prevGroupText : page.prevGroupText;
		page.nextGroupText = typeof obj.nextGroupText === "string" ? obj.nextGroupText : page.nextGroupText;

		// 是否显示项
		page.isShowNumber = typeof obj.isShowNumber === "boolean" ? obj.isShowNumber : page.isShowNumber;
		page.isShowPrevNext = typeof obj.isShowPrevNext === "boolean" ? obj.isShowPrevNext : page.isShowPrevNext;
		page.isShowFirstLast = typeof obj.isShowFirstLast === "boolean" ? obj.isShowFirstLast : page.isShowFirstLast;
		page.isShowPrevNextGroup = typeof obj.isShowPrevNextGroup === "boolean" ? obj.isShowPrevNextGroup : page.isShowPrevNextGroup;
		
	}
	// 初始化
	function _init(obj) {

		// 检测参数是否为对象
		if (!obj instanceof Object) {
			return "参数有误";
		}

		// 检查参数
		checkParameter(obj);

		// 设置总页数
		getAllPage();

		// 页码的分组数目
		getGroupPage();

		// 添加页码到页面元素里
		$(page.selector).html(_create(obj.index));
	}

	// 点击触发事件
	$(document).on("click", ".paging a.item", function (e) {
		e.stopPropagation();
		e.preventDefault();

		var id = $(this).attr("data-id");
		var p = $(this).parent(".paging");
		$(p).find(".skip-txt").val(id);
		//点击触发自定义事件
		$(this).trigger("paging_click", [id]);

		// 添加页码到页面元素里
		//$(page.selector).html(_create(id));
		//end(id);

		// 显示动画
		if (page.isAnimation) {
			$('html,body').animate({
				scrollTop: '0px'
			}, 400);
		}
	});

	// 点击跳转页 触发事件
	$(document).on("click", ".paging .skip-btn", function (e) {
		e.stopPropagation();
		e.preventDefault();
		var id = 1;
		var p = $(this).parent(".paging");
		var v = $(p).find(".skip-txt").val();
		v = v == "" ? 1 : v;
		if (!isNaN(Number(v))) {
			id = v;
		} else {
			id = 1;
		}

		// 最小值
		id = id <= 0 ? 1 : id;
		// 检查最大值
		id = id > page.allPage ? page.allPage : id;

		$(p).find(".skip-txt").val(id);
		//点击触发自定义事件
		$(this).trigger("paging_click", [id]);

		// 添加页码到页面元素里
		//$(p).html(_create(id));

		// 显示动画
		if (page.isAnimation) {
			$('html,body').animate({
				scrollTop: '0px'
			}, 400);
		}
	});

	// ajax加载完成调用
	function getAllPage() {
		if (page.pageItem > page.allItem) {

			page.allPage = 1;
		} else {
			if (page.allItem % page.pageItem === 0) {

				page.allPage = Math.floor(page.allItem / page.pageItem);
			} else {
				page.allPage = Math.floor(page.allItem / page.pageItem) + 1;
			}
		}
	}

	// 页码的分组数目
	function getGroupPage() {
		if (page.allPage > page.showCount) {
			if (page.allPage % page.showCount === 0) {
				page.groupPage = Math.floor(page.allPage / page.showCount);
			} else {
				page.groupPage = Math.floor(page.allPage / page.showCount) + 1;
			}
		} else {
			page.groupPage = 1;
		}
	}

	function _create(currentPage) {
		var num = "";
		var prev = "";
		var next = "";
		var first = "";
		var last = "";
		var prevGroup = "";
		var nextGroup = "";
		var skipBtn = "";
		var CountNum = "";
		var countItmes = "";
		currentPage = parseInt(currentPage);
		// 没有数据
		if (currentPage <= 0) {
			return "<span class='no-data'>没有相关数据</span>";
		}
		currentPage = currentPage > page.allPage ? page.allPage : currentPage;

		var setPageCount = 0; // 设置页码所在的数目
		if (currentPage > page.showCount) {
			setPageCount = Math.floor(currentPage / page.showCount);
			setPageCount = currentPage % page.showCount === 0 ? setPageCount - 1 : setPageCount;
		}

		page.tempId = 1;
		for (var i = setPageCount * page.showCount + 1; i <= page.allPage; i++) {
			if (i > page.allPage) {
				break;
			}
			if (page.tempId > page.showCount) {
				break;
			}

			// 当前页
			if (currentPage === i) {

				// 当前页样式
				var span = "<span class='item disabled num '>" + i + "</span>";

				num += span;
			} else {
				var a = "<a class='item active' data-id='" + i + "'>" + i + "</a>";
				num += a;
			}

			page.tempId++;
		}

		// 上一页
		if (currentPage === 1) {

			prev = "<span class='item disabled'>" + page.prevText + "</span>";
		} else {
			prev = "<a class='item active' data-id='" + (currentPage - 1) + "'>" + page.prevText + "</a>";
		}

		// 下一页
		if (currentPage === page.allPage) {

			next = "<span class='item disabled'>" + page.nextText + "</span>";
		} else {
			next = "<a class='item active' data-id='" + (currentPage + 1) + "'>" + page.nextText + "</a>";
		}

		// 第一页 
		if (currentPage === 1) {

			first = "<span class='item disabled'>" + page.firstText + "</span>";
		} else {
			first = "<a class='item active' data-id='" + 1 + "'>" + page.firstText + "</a>";
		}

		//  最后一页
		if (currentPage === page.allPage) {

			last = "<span class='item disabled'>" + page.lastText + "</span>";
		} else {
			last = "<a class='item active' data-id='" + page.allPage + "'>" + page.lastText + "</a>";
		}

		// 前一组
		if (setPageCount > 0) {
			var temp_prev_num = (setPageCount - 1) * page.showCount + 1;
			prevGroup = "<a class='item active' data-id='" + temp_prev_num + "'>" + page.prevGroupText + "</a>";
		} else {
			prevGroup = "";
		}

		// 下一组
		if (setPageCount + 1 < page.groupPage) {
			var temp_next_num = (setPageCount + 1) * page.showCount + 1;
			nextGroup = "<a class='item active ' data-id='" + temp_next_num + "'>" + page.nextGroupText + "</a>";
		} else {
			nextGroup = "";
		}

		// 跳转页
		if (page.isShowSkip) {
			skipBtn = "<input type='text' class='skip-txt' value='" + currentPage + "' /> <input type='button' class='skip-btn' value='跳转' />";
		}

		// 总条目数
		if (page.isShowAllItems) {
			countItmes = "<span class='count-items'>总共<strong>" + page.allItem + "</strong>条记录,每页<strong>" + page.pageItem + "</strong>条</span>";
		}

		// 总页数
		if (page.isShowCount) {
			CountNum = "<span class='count-num'>总共<strong>" + page.allPage + "</strong>页</span>";
		}

		return GetAllText(first, prev, prevGroup, num, nextGroup, next, last, skipBtn, countItmes, CountNum);
	}

	// 连接文本
	function GetAllText(first, prev, prevGroup, num, nextGroup, next, last, skipBtn, countItmes, CountNum) {
		var allText = "";
		// 1
		if (page.isShowFirstLast) {
			allText += first;
		}

		// 2
		if (page.isShowPrevNext) {
			allText += prev;
		}

		// 3
		if (page.isShowPrevNextGroup) {
			allText += prevGroup;
		}

		// 4
		if (page.isShowNumber) {
			allText += num;
		}

		// 3
		if (page.isShowPrevNextGroup) {
			allText += nextGroup;
		}
		// 2
		if (page.isShowPrevNext) {
			allText += next;
		}
		// 1
		if (page.isShowFirstLast) {
			allText += last;
		}

		// 跳转页
		if (page.isShowSkip) {
			allText += skipBtn;
		}

		// 总共页
		if (page.isShowAllItems) {
			allText += countItmes;
		}

		// 总共页
		if (page.isShowCount) {
			allText += CountNum;
		}

		return allText;
	}

	// 返回结果
	return {

		init: _init,
		pageObj: page,
		create: _create

	};
};

var paginger = function ($) {
	return paging$1($);
};

//
//
//
//


var paging = paginger(dom);
var script$9 = {
  name: "VuePaging",
  props: {
    pageClick: {
      type: Function,
      default: function _default() {}
    },
    textClass: {
      type: String,
      default: "text-center"
    }

  },
  created: function created() {
    eventBus.$on("initPage", function (obj) {
      paging.init(obj);
    });
  },
  mounted: function mounted() {
    //点击事件
    dom(document).on("paging_click", function (event, id) {
      this.pageClick(id);
    }.bind(this));
  }
};

/* script */
var __vue_script__$9 = script$9;

/* template */
var __vue_render__$9 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "paging ", class: _vm.textClass });
};
var __vue_staticRenderFns__$9 = [];
__vue_render__$9._withStripped = true;

/* style */
var __vue_inject_styles__$9 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-4ba4ef5f_0", { source: "@charset \"UTF-8\";\n.paging {\n  width: 100%;\n  padding: 10px;\n}\n.paging .item {\n  padding: 5px 8px;\n  border: 1px solid #ddd;\n  border-radius: 0;\n  background: #fff;\n  vertical-align: middle;\n}\n\n/*鼠标移动的样式 */\n.paging a:hover {\n  cursor: pointer;\n  color: #fff !important;\n  border: 1px solid #467bbe;\n  border-radius: 0;\n  background: #467bbe;\n}\n\n/*激活的样式*/\n.paging a.active {\n  color: #3d6fae;\n  border: 1px solid #467bbe;\n}\n\n/*禁用的样式*/\n.paging span.disabled {\n  color: #777;\n}\n\n/*数字禁用的样式*/\n.paging .disabled.num {\n  color: #666;\n  border: none;\n  background: transparent;\n}\n.paging .item + .item {\n  margin-left: 10px;\n}\n\n/*跳转页*/\n.paging .skip-txt {\n  width: 50px;\n  margin-left: 10px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 0;\n  text-indent: 5px;\n}\n.paging .skip-btn {\n  margin-left: 3px;\n  padding: 5px 10px !important;\n  color: #fff;\n  border: 1px solid #fff;\n  border-radius: 0;\n  background: #3d6fae;\n}\n.paging .skip-btn:hover {\n  color: #fff;\n  border: 1px solid #fff;\n  border-radius: 0;\n  background: #305788;\n}\n.paging .count-items {\n  margin-left: 10px;\n}\n.paging .count-items strong {\n  color: #666;\n}\n\n/*总页数*/\n.paging .count-num {\n  margin-left: 10px;\n}\n.paging .count-num strong {\n  color: #666;\n}\n\n/*# sourceMappingURL=paging.vue.map */", map: { "version": 3, "sources": ["paging.vue", "D:\\dev\\express-admin\\html\\src\\components\\vue-share\\paging\\paging.vue"], "names": [], "mappings": "AAAA,gBAAgB;AC8ChB;EACA,WAAA;EACA,aAAA;AD5CA;ACqDA;EACA,gBAAA;EACA,sBAAA;EACA,gBAPA;EAQA,gBAAA;EACA,sBAAA;ADlDA;;ACqDA,WAAA;AAEA;EACA,eAAA;EACA,sBAAA;EACA,yBAAA;EACA,gBAlBA;EAmBA,mBAAA;ADnDA;;ACsDA,QAAA;AAEA;EACA,cApCA;EAqCA,yBAAA;ADpDA;;ACuDA,QAAA;AAEA;EACA,WAAA;ADrDA;;ACwDA,UAAA;AAEA;EACA,WAAA;EACA,YAAA;EACA,uBAAA;ADtDA;ACyDA;EACA,iBAAA;ADtDA;;ACyDA,MAAA;AAEA;EACA,WAAA;EACA,iBAAA;EACA,YAAA;EACA,sBAAA;EACA,gBAtDA;EAuDA,gBAAA;ADvDA;AC0DA;EACA,gBAAA;EACA,4BAAA;EAEA,WAAA;EACA,sBAAA;EACA,gBAhEA;EAiEA,mBA5EA;ADoBA;AC2DA;EACA,WAAA;EACA,sBAAA;EACA,gBAvEA;EAwEA,mBAAA;ADxDA;AC4DA;EACA,iBAAA;ADzDA;AC4DA;EACA,WA/EA;ADsBA;;AC4DA,MAAA;AAEA;EACA,iBAAA;AD1DA;AC6DA;EACA,WAzFA;AD+BA;;AAEA,qCAAqC", "file": "paging.vue", "sourcesContent": ["@charset \"UTF-8\";\n.paging {\n  width: 100%;\n  padding: 10px;\n}\n\n.paging .item {\n  padding: 5px 8px;\n  border: 1px solid #ddd;\n  border-radius: 0;\n  background: #fff;\n  vertical-align: middle;\n}\n\n/*鼠标移动的样式 */\n.paging a:hover {\n  cursor: pointer;\n  color: #fff !important;\n  border: 1px solid #467bbe;\n  border-radius: 0;\n  background: #467bbe;\n}\n\n/*激活的样式*/\n.paging a.active {\n  color: #3d6fae;\n  border: 1px solid #467bbe;\n}\n\n/*禁用的样式*/\n.paging span.disabled {\n  color: #777;\n}\n\n/*数字禁用的样式*/\n.paging .disabled.num {\n  color: #666;\n  border: none;\n  background: transparent;\n}\n\n.paging .item + .item {\n  margin-left: 10px;\n}\n\n/*跳转页*/\n.paging .skip-txt {\n  width: 50px;\n  margin-left: 10px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 0;\n  text-indent: 5px;\n}\n\n.paging .skip-btn {\n  margin-left: 3px;\n  padding: 5px 10px !important;\n  color: #fff;\n  border: 1px solid #fff;\n  border-radius: 0;\n  background: #3d6fae;\n}\n\n.paging .skip-btn:hover {\n  color: #fff;\n  border: 1px solid #fff;\n  border-radius: 0;\n  background: #305788;\n}\n\n.paging .count-items {\n  margin-left: 10px;\n}\n\n.paging .count-items strong {\n  color: #666;\n}\n\n/*总页数*/\n.paging .count-num {\n  margin-left: 10px;\n}\n\n.paging .count-num strong {\n  color: #666;\n}\n\n/*# sourceMappingURL=paging.vue.map */", "<template>\r\n  <!-- 分页-->\r\n  <div class=\"paging \" :class=\"textClass\"></div>\r\n</template>\r\n<script>\r\n\r\nimport {eventBus} from \"../../eventBus.js\";\r\nimport $ from \"../dom.js\";\r\nimport paginger from \"./paging.js\";\r\nvar paging = paginger($);\r\nexport default {\r\n  \tname:\"VuePaging\",\r\n  props: {\r\n    pageClick: {\r\n      type: Function,\r\n      default: function() {}\r\n    },\r\n    textClass: {\r\n      type: String,\r\n      default:\"text-center\"   \r\n       },\r\n    \r\n  },\r\n  created() {\r\n    eventBus.$on(\"initPage\",(obj)=>{\r\n         paging.init(obj);\r\n    })\r\n    \r\n  },\r\n  mounted() {\r\n    //点击事件\r\n    $(document).on(\r\n      \"paging_click\",\r\n      function(event, id) {\r\n        this.pageClick(id);\r\n      }.bind(this)\r\n    );\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n$bg-head: rgb(61, 111, 174);\r\n\r\n$text-blue: $bg-head;\r\n\r\n.paging {\r\n  width: 100%;\r\n  padding: 10px;\r\n}\r\n\r\n$paing-color: $bg-head;\r\n\r\n$ping-rd: 0;\r\n\r\n$count-item-color: #666;\r\n\r\n.paging .item {\r\n  padding: 5px 8px;\r\n  border: 1px solid #ddd;\r\n  border-radius: $ping-rd;\r\n  background: #fff;\r\n  vertical-align: middle;\r\n}\r\n\r\n/*鼠标移动的样式 */\r\n\r\n.paging a:hover {\r\n  cursor: pointer;\r\n  color: #fff !important;\r\n  border: 1px solid lighten($bg-head, 5%);\r\n  border-radius: $ping-rd;\r\n  background: lighten($bg-head, 5%);\r\n}\r\n\r\n/*激活的样式*/\r\n\r\n.paging a.active {\r\n  color: $paing-color;\r\n  border: 1px solid lighten($bg-head, 5%);\r\n}\r\n\r\n/*禁用的样式*/\r\n\r\n.paging span.disabled {\r\n  color: #777;\r\n}\r\n\r\n/*数字禁用的样式*/\r\n\r\n.paging .disabled.num {\r\n  color: #666;\r\n  border: none;\r\n  background: transparent;\r\n}\r\n\r\n.paging .item + .item {\r\n  margin-left: 10px;\r\n}\r\n\r\n/*跳转页*/\r\n\r\n.paging .skip-txt {\r\n  width: 50px;\r\n  margin-left: 10px;\r\n  padding: 5px;\r\n  border: 1px solid #ddd;\r\n  border-radius: $ping-rd;\r\n  text-indent: 5px;\r\n}\r\n\r\n.paging .skip-btn {\r\n  margin-left: 3px;\r\n  padding: 5px 10px !important;\r\n\r\n  color: #fff;\r\n  border: 1px solid #fff;\r\n  border-radius: $ping-rd;\r\n  background: $bg-head;\r\n}\r\n\r\n.paging .skip-btn:hover {\r\n  color: #fff;\r\n  border: 1px solid #fff;\r\n  border-radius: $ping-rd;\r\n  background: darken($bg-head, 10%);\r\n}\r\n\r\n// 总记录\r\n.paging .count-items {\r\n  margin-left: 10px;\r\n}\r\n\r\n.paging .count-items strong {\r\n  color: $count-item-color;\r\n}\r\n\r\n/*总页数*/\r\n\r\n.paging .count-num {\r\n  margin-left: 10px;\r\n}\r\n\r\n.paging .count-num strong {\r\n  color: $count-item-color;\r\n}\r\n</style>\r\n\r\n\r\n"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$9 = undefined;
/* module identifier */
var __vue_module_identifier__$9 = undefined;
/* functional template */
var __vue_is_functional_template__$9 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$9 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 }, __vue_inject_styles__$9, __vue_script__$9, __vue_scope_id__$9, __vue_is_functional_template__$9, __vue_module_identifier__$9, false, createInjector, undefined, undefined);

var info = function (type, mess) {

    mess = mess || "信息提示框";
    dom(".messageinfo").remove();
    var _class = "default";
    if (typeof type === "number") {
        switch (type) {
            case 0:
                _class = "default";
                break;
            case 1:
                _class = "success";
                break;
            case 2:
                _class = "warning";
                break;
            case 3:
                _class = "danger";
                break;
            default:
                _class = "default";
        }
    } else if (typeof type === "string") {
        switch (type) {
            case "default":
                _class = "default";
                break;
            case "success":
                _class = "success";
                break;
            case "warning":
                _class = "warning";
                break;
            case "danger":
                _class = "danger";
                break;
            default:
                _class = "default";
        }
    }

    // 创建message
    var message = document.createElement("div");
    message.setAttribute("class", "messageinfo");

    var message_box = document.createElement("div");
    message_box.setAttribute("class", "info-box");

    var ttl = document.createElement("h4");
    ttl.setAttribute("class", "ttl " + _class);
    ttl.innerText = mess;

    message_box.appendChild(ttl);
    message.appendChild(message_box);

    var elm = document.body || document.documentElement;
    elm.appendChild(message);

    var setTimeoutId = setTimeout(function () {
        // $(".messageinfo").addClass("info-hide");
        clearTimeout(setTimeoutId);
        dom(".messageinfo").remove();
    }, 2000);
};

/*loading 插件*/

var loading = function (bl, el, loadingText) {

    var bl2 = true;
    var body = "body";
    var _loadingText = "正在加载数据...";

    if (arguments.length === 1) {
        if (typeof bl === "boolean") {
            bl2 = bl;
        } else {
            _loadingText = bl;
            bl2 = true;
        }
    }
    if (arguments.length === 2) {
        bl2 = bl;
        _loadingText = el;
    }
    if (arguments.length === 3) {
        bl2 = bl;
        body = el;
        _loadingText = loadingText;
    }

    if (bl2) {

        var text = " <div class=\"loading-box\">\n               <div class=\"loading-content\">\n                    <span  class=\"iconfont icon-loading spin\"></span>\n                    <span class=\"loading-text\">" + _loadingText + "</span>\n                  </div>\n                                        \n    \t</div>";

        $(body).append(text);
    } else {
        $(".loading-box", el).remove();
    }
};

// vue 插件

var components = [__vue_component__, __vue_component__$1, __vue_component__$2, __vue_component__$3, __vue_component__$4, __vue_component__$5, __vue_component__$6, __vue_component__$7, __vue_component__$8, __vue_component__$9];

// 实例方法
var VueComponent = function (Vue) {
	components.forEach(function (item) {
		Vue.component(item.name, item);
	});

	Vue.prototype.$info = info;

	Vue.prototype.$loading = loading;
};

function isExist(obj) {
  return typeof obj !== 'undefined' && obj !== null;
}

function isFunction$1(obj) {
  return typeof obj === 'function';
}

function isNumber(obj) {
  return typeof obj === 'number';
}

function isString$1(obj) {
  return typeof obj === 'string';
}

function isBoolean$1(obj) {
  return typeof obj === 'boolean';
}

function isPromiseSupported() {
  return typeof window !== 'undefined' && isExist(window.Promise);
}

var Carousel = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "carousel slide", attrs: { "data-ride": "carousel" }, on: { "mouseenter": _vm.stopInterval, "mouseleave": _vm.startInterval } }, [_vm.indicators ? _vm._t("indicators", [_c('ol', { staticClass: "carousel-indicators" }, _vm._l(_vm.slides, function (slide, index) {
      return _c('li', { class: { active: index === _vm.activeIndex }, on: { "click": function click($event) {
            _vm.select(index);
          } } });
    }))], { select: _vm.select, activeIndex: _vm.activeIndex }) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "carousel-inner", attrs: { "role": "listbox" } }, [_vm._t("default")], 2), _vm._v(" "), _vm.controls ? _c('a', { staticClass: "left carousel-control", attrs: { "href": "#", "role": "button" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.prev();
        } } }, [_c('span', { class: _vm.iconControlLeft, attrs: { "aria-hidden": "true" } }), _vm._v(" "), _c('span', { staticClass: "sr-only" }, [_vm._v("Previous")])]) : _vm._e(), _vm._v(" "), _vm.controls ? _c('a', { staticClass: "right carousel-control", attrs: { "href": "#", "role": "button" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.next();
        } } }, [_c('span', { class: _vm.iconControlRight, attrs: { "aria-hidden": "true" } }), _vm._v(" "), _c('span', { staticClass: "sr-only" }, [_vm._v("Next")])]) : _vm._e()], 2);
  }, staticRenderFns: [],
  props: {
    value: Number,
    indicators: {
      type: Boolean,
      default: true
    },
    controls: {
      type: Boolean,
      default: true
    },
    interval: {
      type: Number,
      default: 5000
    },
    iconControlLeft: {
      type: String,
      default: 'glyphicon glyphicon-chevron-left'
    },
    iconControlRight: {
      type: String,
      default: 'glyphicon glyphicon-chevron-right'
    }
  },
  data: function data() {
    return {
      slides: [],
      activeIndex: 0, // Make v-model not required
      timeoutId: 0,
      intervalId: 0
    };
  },

  watch: {
    interval: function interval() {
      this.startInterval();
    },
    value: function value(index, oldValue) {
      this.run(index, oldValue);
      this.activeIndex = index;
    }
  },
  mounted: function mounted() {
    if (isExist(this.value)) {
      this.activeIndex = this.value;
    }
    if (this.slides.length > 0) {
      this.$select(this.activeIndex);
    }
    this.startInterval();
  },
  beforeDestroy: function beforeDestroy() {
    this.stopInterval();
  },

  methods: {
    run: function run(newIndex, oldIndex) {
      var _this = this;

      var currentActiveIndex = oldIndex || 0;
      var direction = void 0;
      if (newIndex > currentActiveIndex) {
        direction = ['next', 'left'];
      } else {
        direction = ['prev', 'right'];
      }
      this.slides[newIndex].slideClass[direction[0]] = true;
      this.$nextTick(function () {
        _this.slides[newIndex].$el.offsetHeight;
        _this.slides.forEach(function (slide, i) {
          if (i === currentActiveIndex) {
            slide.slideClass.active = true;
            slide.slideClass[direction[1]] = true;
          } else if (i === newIndex) {
            slide.slideClass[direction[1]] = true;
          }
        });
        _this.timeoutId = setTimeout(function () {
          _this.$select(newIndex);
          _this.$emit('change', newIndex);
          _this.timeoutId = 0;
        }, 600);
      });
    },
    startInterval: function startInterval() {
      var _this2 = this;

      this.stopInterval();
      if (this.interval > 0) {
        this.intervalId = setInterval(function () {
          _this2.next();
        }, this.interval);
      }
    },
    stopInterval: function stopInterval() {
      clearInterval(this.intervalId);
      this.intervalId = 0;
    },
    resetAllSlideClass: function resetAllSlideClass() {
      this.slides.forEach(function (slide) {
        slide.slideClass.active = false;
        slide.slideClass.left = false;
        slide.slideClass.right = false;
        slide.slideClass.next = false;
        slide.slideClass.prev = false;
      });
    },
    $select: function $select(index) {
      this.resetAllSlideClass();
      this.slides[index].slideClass.active = true;
    },
    select: function select(index) {
      if (this.timeoutId !== 0 || index === this.activeIndex) {
        return;
      }
      if (isExist(this.value)) {
        this.$emit('input', index);
      } else {
        this.run(index, this.activeIndex);
        this.activeIndex = index;
      }
    },
    prev: function prev() {
      this.select(this.activeIndex === 0 ? this.slides.length - 1 : this.activeIndex - 1);
    },
    next: function next() {
      this.select(this.activeIndex === this.slides.length - 1 ? 0 : this.activeIndex + 1);
    }
  }
};

function spliceIfExist(arr, item) {
  if (Array.isArray(arr)) {
    var index = arr.indexOf(item);
    if (index >= 0) {
      arr.splice(index, 1);
    }
  }
}

function range(end) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  var arr = [];
  for (var i = start; i < end; i += step) {
    arr.push(i);
  }
  return arr;
}

function nodeListToArray(nodeList) {
  return Array.prototype.slice.call(nodeList || []);
}

function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
}

var Slide = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "item", class: _vm.slideClass }, [_vm._t("default")], 2);
  }, staticRenderFns: [],
  data: function data() {
    return {
      slideClass: {
        active: false,
        prev: false,
        next: false,
        left: false,
        right: false
      }
    };
  },
  created: function created() {
    try {
      this.$parent.slides.push(this);
    } catch (e) {
      throw new Error('Slide parent must be Carousel.');
    }
  },
  beforeDestroy: function beforeDestroy() {
    var slides = this.$parent && this.$parent.slides;
    spliceIfExist(slides, this);
  }
};

var EVENTS = {
  MOUSE_ENTER: 'mouseenter',
  MOUSE_LEAVE: 'mouseleave',
  FOCUS: 'focus',
  BLUR: 'blur',
  CLICK: 'click',
  INPUT: 'input',
  KEY_DOWN: 'keydown',
  KEY_UP: 'keyup',
  KEY_PRESS: 'keypress',
  RESIZE: 'resize',
  SCROLL: 'scroll',
  TOUCH_START: 'touchstart',
  TOUCH_END: 'touchend'
};

var TRIGGERS = {
  CLICK: 'click',
  HOVER: 'hover',
  FOCUS: 'focus',
  HOVER_FOCUS: 'hover-focus',
  OUTSIDE_CLICK: 'outside-click',
  MANUAL: 'manual'
};

var PLACEMENTS = {
  TOP: 'top',
  RIGHT: 'right',
  BOTTOM: 'bottom',
  LEFT: 'left'
};

function isIE11() {
  return !!window.MSInputMethodContext && !!document.documentMode;
}

function isIE10() {
  return window.navigator.appVersion.indexOf('MSIE 10') !== -1;
}

function getComputedStyle$1(el) {
  return window.getComputedStyle(el);
}

function getViewportSize() {
  var width = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
  var height = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
  return { width: width, height: height };
}

var scrollbarWidth = null;
var savedScreenSize = null;

function getScrollbarWidth() {
  var recalculate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  var screenSize = getViewportSize();
  // return directly when already calculated & not force recalculate & screen size not changed
  if (scrollbarWidth !== null && !recalculate && screenSize.height === savedScreenSize.height && screenSize.width === savedScreenSize.width) {
    return scrollbarWidth;
  }
  if (document.readyState === 'loading') {
    return null;
  }
  var div1 = document.createElement('div');
  var div2 = document.createElement('div');
  div1.style.width = div2.style.width = div1.style.height = div2.style.height = '100px';
  div1.style.overflow = 'scroll';
  div2.style.overflow = 'hidden';
  document.body.appendChild(div1);
  document.body.appendChild(div2);
  scrollbarWidth = Math.abs(div1.scrollHeight - div2.scrollHeight);
  document.body.removeChild(div1);
  document.body.removeChild(div2);
  // save new screen size
  savedScreenSize = screenSize;
  return scrollbarWidth;
}

function on(element, event, handler) {
  element.addEventListener(event, handler);
}

function off(element, event, handler) {
  element.removeEventListener(event, handler);
}

function isElement(el) {
  return el && el.nodeType === Node.ELEMENT_NODE;
}

function removeFromDom(el) {
  isElement(el) && isElement(el.parentNode) && el.parentNode.removeChild(el);
}

function ensureElementMatchesFunction() {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
      var matches = (this.document || this.ownerDocument).querySelectorAll(s);
      var i = matches.length;
      while (--i >= 0 && matches.item(i) !== this) {}
      return i > -1;
    };
  }
}

function addClass$2(el, className) {
  if (!isElement(el)) {
    return;
  }
  if (el.className) {
    var classes = el.className.split(' ');
    if (classes.indexOf(className) < 0) {
      classes.push(className);
      el.className = classes.join(' ');
    }
  } else {
    el.className = className;
  }
}

function removeClass$2(el, className) {
  if (!isElement(el)) {
    return;
  }
  if (el.className) {
    var classes = el.className.split(' ');
    var newClasses = [];
    for (var i = 0, l = classes.length; i < l; i++) {
      if (classes[i] !== className) {
        newClasses.push(classes[i]);
      }
    }
    el.className = newClasses.join(' ');
  }
}

function hasClass$1(el, className) {
  if (!isElement(el)) {
    return false;
  }
  var classes = el.className.split(' ');
  for (var i = 0, l = classes.length; i < l; i++) {
    if (classes[i] === className) {
      return true;
    }
  }
  return false;
}

function setDropdownPosition(dropdown, trigger) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var doc = document.documentElement;
  var containerScrollLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
  var containerScrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
  var rect = trigger.getBoundingClientRect();
  var dropdownRect = dropdown.getBoundingClientRect();
  dropdown.style.right = 'auto';
  dropdown.style.bottom = 'auto';
  if (options.menuRight) {
    dropdown.style.left = containerScrollLeft + rect.left + rect.width - dropdownRect.width + 'px';
  } else {
    dropdown.style.left = containerScrollLeft + rect.left + 'px';
  }
  if (options.dropup) {
    dropdown.style.top = containerScrollTop + rect.top - dropdownRect.height - 4 + 'px';
  } else {
    dropdown.style.top = containerScrollTop + rect.top + rect.height + 'px';
  }
}

function isAvailableAtPosition(trigger, popup, placement) {
  var triggerRect = trigger.getBoundingClientRect();
  var popupRect = popup.getBoundingClientRect();
  var viewPortSize = getViewportSize();
  var top = true;
  var right = true;
  var bottom = true;
  var left = true;
  switch (placement) {
    case PLACEMENTS.TOP:
      top = triggerRect.top >= popupRect.height;
      left = triggerRect.left + triggerRect.width / 2 >= popupRect.width / 2;
      right = triggerRect.right - triggerRect.width / 2 + popupRect.width / 2 <= viewPortSize.width;
      break;
    case PLACEMENTS.BOTTOM:
      bottom = triggerRect.bottom + popupRect.height <= viewPortSize.height;
      left = triggerRect.left + triggerRect.width / 2 >= popupRect.width / 2;
      right = triggerRect.right - triggerRect.width / 2 + popupRect.width / 2 <= viewPortSize.width;
      break;
    case PLACEMENTS.RIGHT:
      right = triggerRect.right + popupRect.width <= viewPortSize.width;
      top = triggerRect.top + triggerRect.height / 2 >= popupRect.height / 2;
      bottom = triggerRect.bottom - triggerRect.height / 2 + popupRect.height / 2 <= viewPortSize.height;
      break;
    case PLACEMENTS.LEFT:
      left = triggerRect.left >= popupRect.width;
      top = triggerRect.top + triggerRect.height / 2 >= popupRect.height / 2;
      bottom = triggerRect.bottom - triggerRect.height / 2 + popupRect.height / 2 <= viewPortSize.height;
      break;
  }
  return top && right && bottom && left;
}

function setTooltipPosition(tooltip, trigger, placement, auto, appendToSelector) {
  var container = void 0;
  var containerScrollTop = void 0;
  var containerScrollLeft = void 0;
  if (!isExist(appendToSelector) || appendToSelector === 'body') {
    container = document.body;
    var doc = document.documentElement;
    containerScrollLeft = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
    containerScrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
  } else {
    container = document.querySelector(appendToSelector);
    containerScrollLeft = container.scrollLeft;
    containerScrollTop = container.scrollTop;
  }
  // auto adjust placement
  if (auto) {
    // Try: right -> bottom -> left -> top
    // Cause the default placement is top
    var placements = [PLACEMENTS.RIGHT, PLACEMENTS.BOTTOM, PLACEMENTS.LEFT, PLACEMENTS.TOP];
    // The class switch helper function
    var changePlacementClass = function changePlacementClass(placement) {
      // console.log(placement)
      placements.forEach(function (placement) {
        removeClass$2(tooltip, placement);
      });
      addClass$2(tooltip, placement);
    };
    // No need to adjust if the default placement fits
    if (!isAvailableAtPosition(trigger, tooltip, placement)) {
      for (var i = 0, l = placements.length; i < l; i++) {
        // Re-assign placement class
        changePlacementClass(placements[i]);
        // Break if new placement fits
        if (isAvailableAtPosition(trigger, tooltip, placements[i])) {
          placement = placements[i];
          break;
        }
      }
      changePlacementClass(placement);
    }
  }
  // fix left and top for tooltip
  var rect = trigger.getBoundingClientRect();
  var tooltipRect = tooltip.getBoundingClientRect();
  if (placement === PLACEMENTS.BOTTOM) {
    tooltip.style.top = containerScrollTop + rect.top + rect.height + 'px';
    tooltip.style.left = containerScrollLeft + rect.left + rect.width / 2 - tooltipRect.width / 2 + 'px';
  } else if (placement === PLACEMENTS.LEFT) {
    tooltip.style.top = containerScrollTop + rect.top + rect.height / 2 - tooltipRect.height / 2 + 'px';
    tooltip.style.left = containerScrollLeft + rect.left - tooltipRect.width + 'px';
  } else if (placement === PLACEMENTS.RIGHT) {
    tooltip.style.top = containerScrollTop + rect.top + rect.height / 2 - tooltipRect.height / 2 + 'px';
    tooltip.style.left = containerScrollLeft + rect.left + rect.width + 'px';
  } else {
    tooltip.style.top = containerScrollTop + rect.top - tooltipRect.height + 'px';
    tooltip.style.left = containerScrollLeft + rect.left + rect.width / 2 - tooltipRect.width / 2 + 'px';
  }
}

function hasScrollbar(el) {
  var SCROLL = 'scroll';
  var hasVScroll = el.scrollHeight > el.clientHeight;
  var style = getComputedStyle$1(el);
  return hasVScroll || style.overflow === SCROLL || style.overflowY === SCROLL;
}

function toggleBodyOverflow(enable) {
  var MODAL_OPEN = 'modal-open';
  var body = document.body;
  if (enable) {
    removeClass$2(body, MODAL_OPEN);
    body.style.paddingRight = null;
  } else {
    var browsersWithFloatingScrollbar = isIE10() || isIE11();
    var documentHasScrollbar = hasScrollbar(document.documentElement) || hasScrollbar(document.body);
    if (documentHasScrollbar && !browsersWithFloatingScrollbar) {
      body.style.paddingRight = getScrollbarWidth() + 'px';
    }
    addClass$2(body, MODAL_OPEN);
  }
}

function getClosest(el, selector) {
  ensureElementMatchesFunction();
  var parent = void 0;
  var _el = el;
  while (_el) {
    parent = _el.parentElement;
    if (parent && parent.matches(selector)) {
      return parent;
    }
    _el = parent;
  }
  return null;
}

function getParents(el, selector) {
  var until = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  ensureElementMatchesFunction();
  var parents = [];
  var parent = el.parentElement;
  while (parent) {
    if (parent.matches(selector)) {
      parents.push(parent);
    } else if (until && (until === parent || parent.matches(until))) {
      break;
    }
    parent = parent.parentElement;
  }
  return parents;
}

function focus(el) {
  if (!isElement(el)) {
    return;
  }
  el.getAttribute('tabindex') ? null : el.setAttribute('tabindex', '-1');
  el.focus();
}

var COLLAPSE = 'collapse';
var IN = 'in';
var COLLAPSING = 'collapsing';

var Collapse = {
  render: function render(h) {
    return h(this.tag, {}, this.$slots.default);
  },

  props: {
    tag: {
      type: String,
      default: 'div'
    },
    value: {
      type: Boolean,
      default: false
    },
    transitionDuration: {
      type: Number,
      default: 350
    }
  },
  data: function data() {
    return {
      timeoutId: 0
    };
  },

  watch: {
    value: function value(show) {
      this.toggle(show);
    }
  },
  mounted: function mounted() {
    var el = this.$el;
    addClass$2(el, COLLAPSE);
    if (this.value) {
      addClass$2(el, IN);
    }
  },

  methods: {
    toggle: function toggle(show) {
      var _this = this;

      clearTimeout(this.timeoutId);
      var el = this.$el;
      if (show) {
        this.$emit('show');
        removeClass$2(el, COLLAPSE);
        el.style.height = 'auto';
        var height = window.getComputedStyle(el).height;
        el.style.height = null;
        addClass$2(el, COLLAPSING);
        el.offsetHeight; // force repaint
        el.style.height = height;
        this.timeoutId = setTimeout(function () {
          removeClass$2(el, COLLAPSING);
          addClass$2(el, COLLAPSE);
          addClass$2(el, IN);
          el.style.height = null;
          _this.timeoutId = 0;
          _this.$emit('shown');
        }, this.transitionDuration);
      } else {
        this.$emit('hide');
        el.style.height = window.getComputedStyle(el).height;
        removeClass$2(el, IN);
        removeClass$2(el, COLLAPSE);
        el.offsetHeight;
        el.style.height = null;
        addClass$2(el, COLLAPSING);
        this.timeoutId = setTimeout(function () {
          addClass$2(el, COLLAPSE);
          removeClass$2(el, COLLAPSING);
          el.style.height = null;
          _this.timeoutId = 0;
          _this.$emit('hidden');
        }, this.transitionDuration);
      }
    }
  }
};

var DEFAULT_TAG = 'div';

var Dropdown = {
  render: function render(h) {
    return h(this.tag, {
      class: {
        'btn-group': this.tag === DEFAULT_TAG,
        dropdown: !this.dropup,
        dropup: this.dropup,
        open: this.show
      }
    }, [this.$slots.default, h('ul', {
      class: {
        'dropdown-menu': true,
        'dropdown-menu-right': this.menuRight
      },
      ref: 'dropdown'
    }, [this.$slots.dropdown])]);
  },

  props: {
    tag: {
      type: String,
      default: DEFAULT_TAG
    },
    appendToBody: {
      type: Boolean,
      default: false
    },
    value: Boolean,
    dropup: {
      type: Boolean,
      default: false
    },
    menuRight: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    notCloseElements: Array,
    positionElement: null
  },
  data: function data() {
    return {
      show: false,
      triggerEl: undefined
    };
  },

  watch: {
    value: function value(v) {
      this.toggle(v);
    }
  },
  mounted: function mounted() {
    this.initTrigger();
    if (this.triggerEl) {
      on(this.triggerEl, EVENTS.CLICK, this.toggle);
      on(this.triggerEl, EVENTS.KEY_DOWN, this.onKeyPress);
    }
    on(this.$refs.dropdown, EVENTS.KEY_DOWN, this.onKeyPress);
    on(window, EVENTS.CLICK, this.windowClicked);
    on(window, EVENTS.TOUCH_END, this.windowClicked);
    if (this.value) {
      this.toggle(true);
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.removeDropdownFromBody();
    if (this.triggerEl) {
      off(this.triggerEl, EVENTS.CLICK, this.toggle);
      off(this.triggerEl, EVENTS.KEY_DOWN, this.onKeyPress);
    }
    off(this.$refs.dropdown, EVENTS.KEY_DOWN, this.onKeyPress);
    off(window, EVENTS.CLICK, this.windowClicked);
    off(window, EVENTS.TOUCH_END, this.windowClicked);
  },

  methods: {
    onKeyPress: function onKeyPress(event) {
      if (this.show) {
        var dropdownEl = this.$refs.dropdown;
        var keyCode = event.keyCode || event.which;
        if (keyCode === 27) {
          this.toggle(false);
          this.triggerEl && this.triggerEl.focus();
        } else if (keyCode === 13) {
          var currentFocus = dropdownEl.querySelector('li > a:focus');
          currentFocus && currentFocus.click();
        } else if (keyCode === 38 || keyCode === 40) {
          event.preventDefault();
          event.stopPropagation();
          var _currentFocus = dropdownEl.querySelector('li > a:focus');
          var items = dropdownEl.querySelectorAll('li:not(.disabled) > a');
          if (!_currentFocus) {
            focus(items[0]);
          } else {
            for (var i = 0; i < items.length; i++) {
              if (_currentFocus === items[i]) {
                if (keyCode === 38 && i < items.length > 0) {
                  focus(items[i - 1]);
                } else if (keyCode === 40 && i < items.length - 1) {
                  focus(items[i + 1]);
                }
                break;
              }
            }
          }
        }
      }
    },
    initTrigger: function initTrigger() {
      var trigger = this.$el.querySelector('[data-role="trigger"]') || this.$el.querySelector('.dropdown-toggle') || this.$el.firstChild;
      this.triggerEl = trigger && trigger !== this.$refs.dropdown ? trigger : null;
    },
    toggle: function toggle(show) {
      if (this.disabled) {
        return;
      }
      if (isBoolean$1(show)) {
        this.show = show;
      } else {
        this.show = !this.show;
      }
      if (this.appendToBody) {
        this.show ? this.appendDropdownToBody() : this.removeDropdownFromBody();
      }
      this.$emit('input', this.show);
    },
    windowClicked: function windowClicked(event) {
      var target = event.target;
      if (this.show && target) {
        var targetInNotCloseElements = false;
        if (this.notCloseElements) {
          for (var i = 0, l = this.notCloseElements.length; i < l; i++) {
            var isTargetInElement = this.notCloseElements[i].contains(target);
            var shouldBreak = isTargetInElement;
            if (this.appendToBody) {
              var isTargetInDropdown = this.$refs.dropdown.contains(target);
              var isElInElements = this.notCloseElements.indexOf(this.$el) >= 0;
              shouldBreak = isTargetInElement || isTargetInDropdown && isElInElements;
            }
            if (shouldBreak) {
              targetInNotCloseElements = true;
              break;
            }
          }
        }
        var targetInDropdownBody = this.$refs.dropdown.contains(target);
        var targetInTrigger = this.$el.contains(target) && !targetInDropdownBody;
        // normally, a dropdown select event is handled by @click that trigger after @touchend
        // then @touchend event have to be ignore in this case
        var targetInDropdownAndIsTouchEvent = targetInDropdownBody && event.type === 'touchend';
        if (!targetInTrigger && !targetInNotCloseElements && !targetInDropdownAndIsTouchEvent) {
          this.toggle(false);
        }
      }
    },
    appendDropdownToBody: function appendDropdownToBody() {
      try {
        var el = this.$refs.dropdown;
        el.style.display = 'block';
        document.body.appendChild(el);
        var positionElement = this.positionElement || this.$el;
        setDropdownPosition(el, positionElement, this);
      } catch (e) {
        // Silent
      }
    },
    removeDropdownFromBody: function removeDropdownFromBody() {
      try {
        var el = this.$refs.dropdown;
        el.removeAttribute('style');
        this.$el.appendChild(el);
      } catch (e) {
        // Silent
      }
    }
  }
};

var defaultLang = {
  uiv: {
    datePicker: {
      clear: 'Clear',
      today: 'Today',
      month: 'Month',
      month1: 'January',
      month2: 'February',
      month3: 'March',
      month4: 'April',
      month5: 'May',
      month6: 'June',
      month7: 'July',
      month8: 'August',
      month9: 'September',
      month10: 'October',
      month11: 'November',
      month12: 'December',
      year: 'Year',
      week1: 'Mon',
      week2: 'Tue',
      week3: 'Wed',
      week4: 'Thu',
      week5: 'Fri',
      week6: 'Sat',
      week7: 'Sun'
    },
    timePicker: {
      am: 'AM',
      pm: 'PM'
    },
    modal: {
      cancel: 'Cancel',
      ok: 'OK'
    },
    multiSelect: {
      placeholder: 'Select...',
      filterPlaceholder: 'Search...'
    }
  }
};

// https://github.com/ElemeFE/element/blob/dev/src/locale/index.js
var lang = defaultLang;

var i18nHandler = function i18nHandler() {
  var vuei18n = Object.getPrototypeOf(this).$t;
  if (isFunction$1(vuei18n)) {
    try {
      return vuei18n.apply(this, arguments);
    } catch (err) {
      //  vuei18n.apply doesn't work with 7.3.3 of vue-i18n
      return this.$t.apply(this, arguments);
    }
  }
};

var t = function t(path, options) {
  options = options || {};

  var value = i18nHandler.apply(this, arguments);
  if (isExist(value) && !options.$$locale) {
    return value;
  }
  var array = path.split('.');
  var current = options.$$locale || lang;

  for (var i = 0, j = array.length; i < j; i++) {
    var property = array[i];
    value = current[property];
    if (i === j - 1) return value;
    if (!value) return '';
    current = value;
  }
  return '';
};

var use = function use(l) {
  lang = l || lang;
};

var i18n = function i18n(fn) {
  i18nHandler = fn || i18nHandler;
};

var locale$1$1 = { use: use, t: t, i18n: i18n };

var defineProperty$1 = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var Local = {
  methods: {
    t: function t$$1() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      args[1] = _extends$1({ $$locale: this.locale }, args[1]);
      return t.apply(this, args);
    }
  },
  props: {
    locale: Object
  }
};

function mergeData$1() {
  for (var e, a, s = {}, t = arguments.length; t--;) {
    for (var r = 0, c = Object.keys(arguments[t]); r < c.length; r++) {
      switch (e = c[r]) {case "class":case "style":case "directives":
          Array.isArray(s[e]) || (s[e] = []), s[e] = s[e].concat(arguments[t][e]);break;case "staticClass":
          if (!arguments[t][e]) break;void 0 === s[e] && (s[e] = ""), s[e] && (s[e] += " "), s[e] += arguments[t][e].trim();break;case "on":case "nativeOn":
          s[e] || (s[e] = {});for (var o = 0, n = Object.keys(arguments[t][e]); o < n.length; o++) {
            a = n[o], s[e][a] ? s[e][a] = [].concat(s[e][a], arguments[t][e][a]) : s[e][a] = arguments[t][e][a];
          }break;case "attrs":case "props":case "domProps":case "scopedSlots":case "staticStyle":case "hook":case "transition":
          s[e] || (s[e] = {}), s[e] = __assign({}, arguments[t][e], s[e]);break;case "slot":case "key":case "ref":case "tag":case "show":case "keepAlive":default:
          s[e] || (s[e] = arguments[t][e]);}
    }
  }return s;
}var __assign = Object.assign || function (e) {
  for (var a, s = 1, t = arguments.length; s < t; s++) {
    a = arguments[s];for (var r in a) {
      Object.prototype.hasOwnProperty.call(a, r) && (e[r] = a[r]);
    }
  }return e;
};

var linkMixin = {
  props: {
    // <a> props
    href: String,
    target: String,
    // <router-link> props
    to: null,
    replace: {
      type: Boolean,
      default: false
    },
    append: {
      type: Boolean,
      default: false
    },
    exact: {
      type: Boolean,
      default: false
    }
  }
};

var BtnGroup = {
  functional: true,
  render: function render(h, _ref) {
    var props = _ref.props,
        children = _ref.children,
        data = _ref.data;

    return h('div', mergeData$1(data, {
      class: defineProperty$1({
        'btn-group': !props.vertical,
        'btn-group-vertical': props.vertical,
        'btn-group-justified': props.justified
      }, 'btn-group-' + props.size, props.size),
      attrs: {
        role: 'group',
        'data-toggle': 'buttons'
      }
    }), children);
  },

  props: {
    size: String,
    vertical: {
      type: Boolean,
      default: false
    },
    justified: {
      type: Boolean,
      default: false
    }
  }
};

var INPUT_TYPE_CHECKBOX = 'checkbox';
var INPUT_TYPE_RADIO = 'radio';

var Btn = {
  functional: true,
  mixins: [linkMixin],
  render: function render(h, _ref) {
    var _classes;

    var children = _ref.children,
        props = _ref.props,
        data = _ref.data;

    // event listeners
    var listeners = data.on || {};
    // checkbox: model contain inputValue
    // radio: model === inputValue
    var isInputActive = props.inputType === INPUT_TYPE_CHECKBOX ? props.value.indexOf(props.inputValue) >= 0 : props.value === props.inputValue;
    // button class
    var classes = (_classes = {
      btn: true,
      active: props.inputType ? isInputActive : props.active,
      disabled: props.disabled,
      'btn-block': props.block
    }, defineProperty$1(_classes, 'btn-' + props.type, Boolean(props.type)), defineProperty$1(_classes, 'btn-' + props.size, Boolean(props.size)), _classes);
    // prevent event for disabled links
    var on = {
      click: function click(e) {
        if (props.disabled && e instanceof Event) {
          e.preventDefault();
          e.stopPropagation();
        }
      }
    };
    // render params
    var tag = void 0,
        options = void 0,
        slot = void 0;

    if (props.href) {
      // is native link
      tag = 'a';
      slot = children;
      options = mergeData$1(data, {
        on: on,
        class: classes,
        attrs: {
          role: 'button',
          href: props.href,
          target: props.target
        }
      });
    } else if (props.to) {
      // is vue router link
      tag = 'router-link';
      slot = children;
      options = mergeData$1(data, {
        nativeOn: on,
        class: classes,
        props: {
          event: props.disabled ? '' : 'click', // prevent nav while disabled
          to: props.to,
          replace: props.replace,
          append: props.append,
          exact: props.exact
        },
        attrs: {
          role: 'button'
        }
      });
    } else if (props.inputType) {
      // is input checkbox or radio
      tag = 'label';
      options = mergeData$1(data, {
        on: on,
        class: classes
      });
      slot = [h('input', {
        attrs: {
          autocomplete: 'off',
          type: props.inputType,
          checked: isInputActive ? 'checked' : null,
          disabled: props.disabled
        },
        domProps: {
          checked: isInputActive // required
        },
        on: {
          change: function change() {
            if (props.inputType === INPUT_TYPE_CHECKBOX) {
              var valueCopied = props.value.slice();
              if (isInputActive) {
                valueCopied.splice(valueCopied.indexOf(props.inputValue), 1);
              } else {
                valueCopied.push(props.inputValue);
              }
              listeners['input'](valueCopied);
            } else {
              listeners['input'](props.inputValue);
            }
          }
        }
      }), children];
    } else if (props.justified) {
      // is in justified btn-group
      tag = BtnGroup;
      options = {};
      slot = [h('button', mergeData$1(data, {
        on: on,
        class: classes,
        attrs: {
          type: props.nativeType,
          disabled: props.disabled
        }
      }), children)];
    } else {
      // is button
      tag = 'button';
      slot = children;
      options = mergeData$1(data, {
        on: on,
        class: classes,
        attrs: {
          type: props.nativeType,
          disabled: props.disabled
        }
      });
    }

    return h(tag, options, slot);
  },

  props: {
    justified: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      default: 'default'
    },
    nativeType: {
      type: String,
      default: 'button'
    },
    size: String,
    block: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    // <input> props
    value: null,
    inputValue: null,
    inputType: {
      type: String,
      validator: function validator(value) {
        return value === INPUT_TYPE_CHECKBOX || value === INPUT_TYPE_RADIO;
      }
    }
  }
};

var MODAL_BACKDROP = 'modal-backdrop';
var IN$1 = 'in';
var getOpenModals = function getOpenModals() {
  return document.querySelectorAll('.' + MODAL_BACKDROP);
};
var getOpenModalNum = function getOpenModalNum() {
  return getOpenModals().length;
};

var Modal = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "modal", class: { fade: _vm.transitionDuration > 0 }, attrs: { "tabindex": "-1", "role": "dialog" }, on: { "click": function click($event) {
          if ($event.target !== $event.currentTarget) {
            return null;
          }_vm.backdropClicked($event);
        } } }, [_c('div', { ref: "dialog", staticClass: "modal-dialog", class: _vm.modalSizeClass, attrs: { "role": "document" } }, [_c('div', { staticClass: "modal-content" }, [_vm.header ? _c('div', { staticClass: "modal-header" }, [_vm._t("header", [_vm.dismissBtn ? _c('button', { staticClass: "close", staticStyle: { "position": "relative", "z-index": "1060" }, attrs: { "type": "button", "aria-label": "Close" }, on: { "click": function click($event) {
          _vm.toggle(false);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("×")])]) : _vm._e(), _vm._v(" "), _c('h4', { staticClass: "modal-title" }, [_vm._t("title", [_vm._v(_vm._s(_vm.title))])], 2)])], 2) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "modal-body" }, [_vm._t("default")], 2), _vm._v(" "), _vm.footer ? _c('div', { staticClass: "modal-footer" }, [_vm._t("footer", [_c('btn', { attrs: { "type": _vm.cancelType }, on: { "click": function click($event) {
          _vm.toggle(false, 'cancel');
        } } }, [_c('span', [_vm._v(_vm._s(_vm.cancelText || _vm.t('uiv.modal.cancel')))])]), _vm._v(" "), _c('btn', { attrs: { "type": _vm.okType, "data-action": "auto-focus" }, on: { "click": function click($event) {
          _vm.toggle(false, 'ok');
        } } }, [_c('span', [_vm._v(_vm._s(_vm.okText || _vm.t('uiv.modal.ok')))])])])], 2) : _vm._e()])]), _vm._v(" "), _c('div', { ref: "backdrop", staticClass: "modal-backdrop", class: { fade: _vm.transitionDuration > 0 } })]);
  }, staticRenderFns: [],
  mixins: [Local],
  components: { Btn: Btn },
  props: {
    value: {
      type: Boolean,
      default: false
    },
    title: String,
    size: String,
    backdrop: {
      type: Boolean,
      default: true
    },
    footer: {
      type: Boolean,
      default: true
    },
    header: {
      type: Boolean,
      default: true
    },
    cancelText: String,
    cancelType: {
      type: String,
      default: 'default'
    },
    okText: String,
    okType: {
      type: String,
      default: 'primary'
    },
    dismissBtn: {
      type: Boolean,
      default: true
    },
    transitionDuration: {
      type: Number,
      default: 150
    },
    autoFocus: {
      type: Boolean,
      default: false
    },
    keyboard: {
      type: Boolean,
      default: true
    },
    beforeClose: Function,
    zOffset: {
      type: Number,
      default: 20
    },
    appendToBody: {
      type: Boolean,
      default: false
    },
    displayStyle: {
      type: String,
      default: 'block'
    }
  },
  data: function data() {
    return {
      msg: '',
      timeoutId: 0
    };
  },

  computed: {
    modalSizeClass: function modalSizeClass() {
      return defineProperty$1({}, 'modal-' + this.size, Boolean(this.size));
    }
  },
  watch: {
    value: function value(v) {
      this.$toggle(v);
    }
  },
  mounted: function mounted() {
    removeFromDom(this.$refs.backdrop);
    on(window, EVENTS.KEY_UP, this.onKeyPress);
    if (this.value) {
      this.$toggle(true);
    }
  },
  beforeDestroy: function beforeDestroy() {
    clearTimeout(this.timeoutId);
    removeFromDom(this.$refs.backdrop);
    removeFromDom(this.$el);
    if (getOpenModalNum() === 0) {
      toggleBodyOverflow(true);
    }
    off(window, EVENTS.KEY_UP, this.onKeyPress);
  },

  methods: {
    onKeyPress: function onKeyPress(event) {
      if (this.keyboard && this.value && event.keyCode === 27) {
        var thisModal = this.$refs.backdrop;
        var thisZIndex = thisModal.style.zIndex;
        thisZIndex = thisZIndex && thisZIndex !== 'auto' ? parseInt(thisZIndex) : 0;
        // Find out if this modal is the top most one.
        var modals = getOpenModals();
        var modalsLength = modals.length;
        for (var i = 0; i < modalsLength; i++) {
          if (modals[i] !== thisModal) {
            var zIndex = modals[i].style.zIndex;
            zIndex = zIndex && zIndex !== 'auto' ? parseInt(zIndex) : 0;
            // if any existing modal has higher zIndex, ignore
            if (zIndex > thisZIndex) {
              return;
            }
          }
        }
        this.toggle(false);
      }
    },
    toggle: function toggle(show, msg) {
      // skip the hiding while show===false & beforeClose returning falsely value
      if (!show && isFunction$1(this.beforeClose) && !this.beforeClose(msg)) {
        return;
      }
      this.msg = msg;
      this.$emit('input', show);
    },
    $toggle: function $toggle(show) {
      var _this = this;

      var modal = this.$el;
      var backdrop = this.$refs.backdrop;
      clearTimeout(this.timeoutId);
      if (show) {
        var alreadyOpenModalNum = getOpenModalNum();
        document.body.appendChild(backdrop);
        if (this.appendToBody) {
          document.body.appendChild(modal);
        }
        modal.style.display = this.displayStyle;
        modal.scrollTop = 0;
        backdrop.offsetHeight; // force repaint
        toggleBodyOverflow(false);
        addClass$2(backdrop, IN$1);
        addClass$2(modal, IN$1);
        // fix z-index for nested modals
        // no need to calculate if no modal is already open
        if (alreadyOpenModalNum > 0) {
          var modalBaseZ = parseInt(getComputedStyle$1(modal).zIndex) || 1050; // 1050 is default modal z-Index
          var backdropBaseZ = parseInt(getComputedStyle$1(backdrop).zIndex) || 1040; // 1040 is default backdrop z-Index
          var offset = alreadyOpenModalNum * this.zOffset;
          modal.style.zIndex = '' + (modalBaseZ + offset);
          backdrop.style.zIndex = '' + (backdropBaseZ + offset);
        }
        // z-index fix end
        this.timeoutId = setTimeout(function () {
          if (_this.autoFocus) {
            var btn = _this.$el.querySelector('[data-action="auto-focus"]');
            if (btn) {
              btn.focus();
            }
          }
          _this.$emit('show');
          _this.timeoutId = 0;
        }, this.transitionDuration);
      } else {
        removeClass$2(backdrop, IN$1);
        removeClass$2(modal, IN$1);
        this.timeoutId = setTimeout(function () {
          modal.style.display = 'none';
          removeFromDom(backdrop);
          if (_this.appendToBody) {
            removeFromDom(modal);
          }
          if (getOpenModalNum() === 0) {
            toggleBodyOverflow(true);
          }
          _this.$emit('hide', _this.msg || 'dismiss');
          _this.msg = '';
          _this.timeoutId = 0;
          // restore z-index for nested modals
          modal.style.zIndex = '';
          backdrop.style.zIndex = '';
          // z-index fix end
        }, this.transitionDuration);
      }
    },
    backdropClicked: function backdropClicked(event) {
      if (this.backdrop) {
        this.toggle(false);
      }
    }
  }
};

var ACTIVE_CLASS = 'active';
var IN_CLASS = 'in';

var Tab = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "tab-pane", class: { fade: _vm.transition > 0 }, attrs: { "role": "tabpanel" } }, [_vm._t("default")], 2);
  }, staticRenderFns: [],
  props: {
    title: {
      type: String,
      default: 'Tab Title'
    },
    htmlTitle: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    'tab-classes': {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    group: String,
    pullRight: {
      type: Boolean,
      default: false
    }
  },
  data: function data() {
    return {
      active: true,
      transition: 150
    };
  },

  watch: {
    active: function active(_active) {
      var _this = this;

      if (_active) {
        setTimeout(function () {
          addClass$2(_this.$el, ACTIVE_CLASS);
          _this.$el.offsetHeight;
          addClass$2(_this.$el, IN_CLASS);
          try {
            _this.$parent.$emit('after-change', _this.$parent.activeIndex);
          } catch (e) {
            throw new Error('<tab> parent must be <tabs>.');
          }
        }, this.transition);
      } else {
        removeClass$2(this.$el, IN_CLASS);
        setTimeout(function () {
          removeClass$2(_this.$el, ACTIVE_CLASS);
        }, this.transition);
      }
    }
  },
  created: function created() {
    try {
      this.$parent.tabs.push(this);
    } catch (e) {
      throw new Error('<tab> parent must be <tabs>.');
    }
  },
  beforeDestroy: function beforeDestroy() {
    var tabs = this.$parent && this.$parent.tabs;
    spliceIfExist(tabs, this);
  },

  methods: {
    show: function show() {
      var _this2 = this;

      this.$nextTick(function () {
        addClass$2(_this2.$el, ACTIVE_CLASS);
        addClass$2(_this2.$el, IN_CLASS);
      });
    }
  }
};

var BEFORE_CHANGE_EVENT = 'before-change';

var Tabs = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', [_c('ul', { class: _vm.navClasses, attrs: { "role": "tablist" } }, [_vm._l(_vm.groupedTabs, function (tab, index) {
      return [tab.tabs ? _c('dropdown', { class: _vm.getTabClasses(tab), attrs: { "role": "presentation", "tag": "li" } }, [_c('a', { staticClass: "dropdown-toggle", attrs: { "role": "tab", "href": "#" }, on: { "click": function click($event) {
            $event.preventDefault();
          } } }, [_vm._v(_vm._s(tab.group) + " "), _c('span', { staticClass: "caret" })]), _vm._v(" "), _c('template', { slot: "dropdown" }, _vm._l(tab.tabs, function (subTab) {
        return _c('li', { class: _vm.getTabClasses(subTab, true) }, [_c('a', { attrs: { "href": "#" }, on: { "click": function click($event) {
              $event.preventDefault();_vm.select(_vm.tabs.indexOf(subTab));
            } } }, [_vm._v(_vm._s(subTab.title))])]);
      }))], 2) : _c('li', { class: _vm.getTabClasses(tab), attrs: { "role": "presentation" } }, [_c('a', { attrs: { "role": "tab", "href": "#" }, on: { "click": function click($event) {
            $event.preventDefault();_vm.select(_vm.tabs.indexOf(tab));
          } } }, [tab.htmlTitle ? _c('span', { domProps: { "innerHTML": _vm._s(tab.title) } }) : [_vm._v(_vm._s(tab.title))]], 2)])];
    }), _vm._v(" "), !_vm.justified && _vm.$slots['nav-right'] ? _c('li', { staticClass: "pull-right" }, [_vm._t("nav-right")], 2) : _vm._e()], 2), _vm._v(" "), _c('div', { staticClass: "tab-content" }, [_vm._t("default")], 2)]);
  }, staticRenderFns: [],
  components: { Dropdown: Dropdown },
  props: {
    value: {
      type: Number,
      validator: function validator(v) {
        return v >= 0;
      }
    },
    transitionDuration: {
      type: Number,
      default: 150
    },
    justified: Boolean,
    pills: Boolean,
    stacked: Boolean
  },
  data: function data() {
    return {
      tabs: [],
      activeIndex: 0 // Make v-model not required
    };
  },

  watch: {
    value: {
      immediate: true,
      handler: function handler(value) {
        if (isNumber(value)) {
          this.activeIndex = value;
          this.selectCurrent();
        }
      }
    },
    tabs: function tabs(_tabs) {
      var _this = this;

      _tabs.forEach(function (tab, index) {
        tab.transition = _this.transitionDuration;
        if (index === _this.activeIndex) {
          tab.show();
        }
      });
      this.selectCurrent();
    }
  },
  computed: {
    navClasses: function navClasses() {
      return {
        nav: true,
        'nav-justified': this.justified,
        'nav-tabs': !this.pills,
        'nav-pills': this.pills,
        'nav-stacked': this.stacked && this.pills
      };
    },
    groupedTabs: function groupedTabs() {
      var tabs = [];
      var hash = {};
      this.tabs.forEach(function (tab) {
        if (tab.group) {
          if (hash.hasOwnProperty(tab.group)) {
            tabs[hash[tab.group]].tabs.push(tab);
          } else {
            tabs.push({
              tabs: [tab],
              group: tab.group
            });
            hash[tab.group] = tabs.length - 1;
          }
          if (tab.active) {
            tabs[hash[tab.group]].active = true;
          }
          if (tab.pullRight) {
            tabs[hash[tab.group]].pullRight = true;
          }
        } else {
          tabs.push(tab);
        }
      });
      return tabs;
    }
  },
  methods: {
    getTabClasses: function getTabClasses(tab) {
      var isSubTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var defaultClasses = {
        active: tab.active,
        disabled: tab.disabled,
        'pull-right': tab.pullRight && !isSubTab

        // return with new classes added to tab
      };return _extends$1(defaultClasses, tab['tabClasses']);
    },
    selectCurrent: function selectCurrent() {
      var _this2 = this;

      var found = false;
      this.tabs.forEach(function (tab, index) {
        if (index === _this2.activeIndex) {
          found = !tab.active;
          tab.active = true;
        } else {
          tab.active = false;
        }
      });
      if (found) {
        this.$emit('change', this.activeIndex);
      }
    },
    selectValidate: function selectValidate(index) {
      var _this3 = this;

      if (isFunction$1(this.$listeners[BEFORE_CHANGE_EVENT])) {
        this.$emit(BEFORE_CHANGE_EVENT, this.activeIndex, index, function (result) {
          if (!isExist(result)) {
            _this3.$select(index);
          }
        });
      } else {
        this.$select(index);
      }
    },
    select: function select(index) {
      if (!this.tabs[index].disabled && index !== this.activeIndex) {
        this.selectValidate(index);
      }
    },
    $select: function $select(index) {
      if (isNumber(this.value)) {
        this.$emit('input', index);
      } else {
        this.activeIndex = index;
        this.selectCurrent();
      }
    }
  }
};

function pad(value, num) {
  value = value + '';
  for (var i = num - value.length; i > 0; i--) {
    value = '0' + value;
  }
  return value;
}

var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

function daysInMonth(month, year) {
  return new Date(year, month + 1, 0).getDate();
}

function stringify(date, format) {
  try {
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var monthName = monthNames[month - 1];
    return format.replace(/yyyy/g, year).replace(/MMMM/g, monthName).replace(/MMM/g, monthName.substring(0, 3)).replace(/MM/g, pad(month, 2)).replace(/dd/g, pad(day, 2)).replace(/yy/g, year).replace(/M(?!a)/g, month).replace(/d/g, day);
  } catch (e) {
    return '';
  }
}

function convertDateToUTC(date) {
  return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
}

/* https://stackoverflow.com/questions/6117814/get-week-of-year-in-javascript-like-in-php
 *
 * For a given date, get the ISO week number
 *
 * Based on information at:
 *
 *    http://www.merlyn.demon.co.uk/weekcalc.htm#WNR
 *
 * Algorithm is to find nearest thursday, it's year
 * is the year of the week number. Then get weeks
 * between that date and the first day of that year.
 *
 * Note that dates in one year can be weeks of previous
 * or next year, overlap is up to 3 days.
 *
 * e.g. 2014/12/29 is Monday in week  1 of 2015
 *      2012/1/1   is Sunday in week 52 of 2011
 */
function getWeekNumber(d) {
  // Copy date so don't modify original
  d = new Date(Date.UTC(d.year, d.month, d.date));
  // Set to nearest Thursday: current date + 4 - current day number
  // Make Sunday's day number 7
  d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
  // Get first day of year
  var yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  // Calculate full weeks to nearest Thursday
  return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
}

var DateView = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('table', { staticStyle: { "width": "100%" }, attrs: { "role": "grid" } }, [_c('thead', [_c('tr', [_c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goPrevMonth } }, [_c('i', { class: _vm.iconControlLeft })])], 1), _vm._v(" "), _c('td', { attrs: { "colspan": _vm.weekNumbers ? 6 : 5 } }, [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.changeView } }, [_c('b', [_vm._v(_vm._s(_vm.yearMonthStr))])])], 1), _vm._v(" "), _c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goNextMonth } }, [_c('i', { class: _vm.iconControlRight })])], 1)]), _vm._v(" "), _c('tr', { attrs: { "align": "center" } }, [_vm.weekNumbers ? _c('td') : _vm._e(), _vm._v(" "), _vm._l(_vm.weekDays, function (day) {
      return _c('td', { attrs: { "width": "14.2857142857%" } }, [_c('small', [_vm._v(_vm._s(_vm.tWeekName(day === 0 ? 7 : day)))])]);
    })], 2)]), _vm._v(" "), _c('tbody', _vm._l(_vm.monthDayRows, function (row) {
      return _c('tr', [_vm.weekNumbers ? _c('td', { staticClass: "text-center", staticStyle: { "border-right": "1px solid #eee" } }, [_c('small', { staticClass: "text-muted" }, [_vm._v(_vm._s(_vm.getWeekNumber(row[_vm.weekStartsWith])))])]) : _vm._e(), _vm._v(" "), _vm._l(row, function (date) {
        return _c('td', [_c('btn', { class: date.classes, staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm", "data-action": "select", "type": _vm.getBtnType(date), "disabled": date.disabled }, on: { "click": function click($event) {
              _vm.select(date);
            } } }, [_c('span', { class: { 'text-muted': _vm.month !== date.month }, attrs: { "data-action": "select" } }, [_vm._v(_vm._s(date.date))])])], 1);
      })], 2);
    }))]);
  }, staticRenderFns: [],
  mixins: [Local],
  props: {
    month: Number,
    year: Number,
    date: Date,
    today: Date,
    limit: Object,
    weekStartsWith: Number,
    iconControlLeft: String,
    iconControlRight: String,
    dateClass: Function,
    yearMonthFormatter: Function,
    weekNumbers: Boolean
  },
  components: { Btn: Btn },
  computed: {
    weekDays: function weekDays() {
      var days = [];
      var firstDay = this.weekStartsWith;
      while (days.length < 7) {
        days.push(firstDay++);
        if (firstDay > 6) {
          firstDay = 0;
        }
      }
      return days;
    },
    yearMonthStr: function yearMonthStr() {
      if (this.yearMonthFormatter) {
        return this.yearMonthFormatter(this.year, this.month);
      } else {
        return isExist(this.month) ? this.year + ' ' + this.t('uiv.datePicker.month' + (this.month + 1)) : this.year;
      }
    },
    monthDayRows: function monthDayRows() {
      var rows = [];
      var firstDay = new Date(this.year, this.month, 1);
      var prevMonthLastDate = new Date(this.year, this.month, 0).getDate();
      var startIndex = firstDay.getDay();
      // console.log(startIndex)
      var daysNum = daysInMonth(this.month, this.year);
      var weekOffset = 0;
      if (this.weekStartsWith > startIndex) {
        weekOffset = 7 - this.weekStartsWith;
      } else {
        weekOffset = 0 - this.weekStartsWith;
      }
      // console.log(prevMonthLastDate, startIndex, daysNum)
      for (var i = 0; i < 6; i++) {
        rows.push([]);
        for (var j = 0 - weekOffset; j < 7 - weekOffset; j++) {
          var currentIndex = i * 7 + j;
          var date = { year: this.year, disabled: false
            // date in and not in current month
          };if (currentIndex < startIndex) {
            date.date = prevMonthLastDate - startIndex + currentIndex + 1;
            if (this.month > 0) {
              date.month = this.month - 1;
            } else {
              date.month = 11;
              date.year--;
            }
          } else if (currentIndex < startIndex + daysNum) {
            date.date = currentIndex - startIndex + 1;
            date.month = this.month;
          } else {
            date.date = currentIndex - startIndex - daysNum + 1;
            if (this.month < 11) {
              date.month = this.month + 1;
            } else {
              date.month = 0;
              date.year++;
            }
          }
          // process limit dates
          var dateObj = new Date(date.year, date.month, date.date);
          var afterFrom = true;
          var beforeTo = true;
          if (this.limit && this.limit.from) {
            afterFrom = dateObj >= this.limit.from;
          }
          if (this.limit && this.limit.to) {
            beforeTo = dateObj < this.limit.to;
          }
          date.disabled = !afterFrom || !beforeTo;
          date.classes = isFunction$1(this.dateClass) ? this.dateClass(dateObj) : '';
          rows[i].push(date);
        }
      }
      return rows;
    }
  },
  methods: {
    getWeekNumber: getWeekNumber,
    tWeekName: function tWeekName(index) {
      return this.t('uiv.datePicker.week' + index);
    },
    getBtnType: function getBtnType(date) {
      if (this.date && date.date === this.date.getDate() && date.month === this.date.getMonth() && date.year === this.date.getFullYear()) {
        return 'primary';
      } else if (date.date === this.today.getDate() && date.month === this.today.getMonth() && date.year === this.today.getFullYear()) {
        return 'info';
      } else {
        return 'default';
      }
    },
    select: function select(date) {
      this.$emit('date-change', date);
    },
    goPrevMonth: function goPrevMonth() {
      var month = this.month;
      var year = this.year;
      if (this.month > 0) {
        month--;
      } else {
        month = 11;
        year--;
        this.$emit('year-change', year);
      }
      this.$emit('month-change', month);
    },
    goNextMonth: function goNextMonth() {
      var month = this.month;
      var year = this.year;
      if (this.month < 11) {
        month++;
      } else {
        month = 0;
        year++;
        this.$emit('year-change', year);
      }
      this.$emit('month-change', month);
    },
    changeView: function changeView() {
      this.$emit('view-change', 'm');
    }
  }
};

var MonthView = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('table', { staticStyle: { "width": "100%" }, attrs: { "role": "grid" } }, [_c('thead', [_c('tr', [_c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goPrevYear } }, [_c('i', { class: _vm.iconControlLeft })])], 1), _vm._v(" "), _c('td', { attrs: { "colspan": "4" } }, [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": function click($event) {
          _vm.changeView();
        } } }, [_c('b', [_vm._v(_vm._s(_vm.year))])])], 1), _vm._v(" "), _c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goNextYear } }, [_c('i', { class: _vm.iconControlRight })])], 1)])]), _vm._v(" "), _c('tbody', _vm._l(_vm.rows, function (row, i) {
      return _c('tr', _vm._l(row, function (month, j) {
        return _c('td', { attrs: { "colspan": "2", "width": "33.333333%" } }, [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm", "type": _vm.getBtnClass(i * 3 + j) }, on: { "click": function click($event) {
              _vm.changeView(i * 3 + j);
            } } }, [_c('span', [_vm._v(_vm._s(_vm.tCell(month)))])])], 1);
      }));
    }))]);
  }, staticRenderFns: [],
  components: { Btn: Btn },
  mixins: [Local],
  props: {
    month: Number,
    year: Number,
    iconControlLeft: String,
    iconControlRight: String
  },
  data: function data() {
    return {
      rows: []
    };
  },
  mounted: function mounted() {
    for (var i = 0; i < 4; i++) {
      this.rows.push([]);
      for (var j = 0; j < 3; j++) {
        this.rows[i].push(i * 3 + j + 1);
      }
    }
  },

  methods: {
    tCell: function tCell(cell) {
      return this.t('uiv.datePicker.month' + cell);
    },
    getBtnClass: function getBtnClass(month) {
      if (month === this.month) {
        return 'primary';
      } else {
        return 'default';
      }
    },
    goPrevYear: function goPrevYear() {
      this.$emit('year-change', this.year - 1);
    },
    goNextYear: function goNextYear() {
      this.$emit('year-change', this.year + 1);
    },
    changeView: function changeView(monthIndex) {
      if (isExist(monthIndex)) {
        this.$emit('month-change', monthIndex);
        this.$emit('view-change', 'd');
      } else {
        this.$emit('view-change', 'y');
      }
    }
  }
};

var YearView = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('table', { staticStyle: { "width": "100%" }, attrs: { "role": "grid" } }, [_c('thead', [_c('tr', [_c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goPrevYear } }, [_c('i', { class: _vm.iconControlLeft })])], 1), _vm._v(" "), _c('td', { attrs: { "colspan": "3" } }, [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" } }, [_c('b', [_vm._v(_vm._s(_vm.yearStr))])])], 1), _vm._v(" "), _c('td', [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm" }, on: { "click": _vm.goNextYear } }, [_c('i', { class: _vm.iconControlRight })])], 1)])]), _vm._v(" "), _c('tbody', _vm._l(_vm.rows, function (row) {
      return _c('tr', _vm._l(row, function (year) {
        return _c('td', { attrs: { "width": "20%" } }, [_c('btn', { staticStyle: { "border": "none" }, attrs: { "block": "", "size": "sm", "type": _vm.getBtnClass(year) }, on: { "click": function click($event) {
              _vm.changeView(year);
            } } }, [_c('span', [_vm._v(_vm._s(year))])])], 1);
      }));
    }))]);
  }, staticRenderFns: [],
  components: { Btn: Btn },
  props: {
    year: Number,
    iconControlLeft: String,
    iconControlRight: String
  },
  computed: {
    rows: function rows() {
      var rows = [];
      var yearGroupStart = this.year - this.year % 20;
      for (var i = 0; i < 4; i++) {
        rows.push([]);
        for (var j = 0; j < 5; j++) {
          rows[i].push(yearGroupStart + i * 5 + j);
        }
      }
      return rows;
    },
    yearStr: function yearStr() {
      var start = this.year - this.year % 20;
      return start + ' ~ ' + (start + 19);
    }
  },
  methods: {
    getBtnClass: function getBtnClass(year) {
      if (year === this.year) {
        return 'primary';
      } else {
        return 'default';
      }
    },
    goPrevYear: function goPrevYear() {
      this.$emit('year-change', this.year - 20);
    },
    goNextYear: function goNextYear() {
      this.$emit('year-change', this.year + 20);
    },
    changeView: function changeView(year) {
      this.$emit('year-change', year);
      this.$emit('view-change', 'm');
    }
  }
};

var DatePicker = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { style: _vm.pickerStyle, attrs: { "data-role": "date-picker" }, on: { "click": _vm.onPickerClick } }, [_c('date-view', { directives: [{ name: "show", rawName: "v-show", value: _vm.view === 'd', expression: "view==='d'" }], attrs: { "month": _vm.currentMonth, "year": _vm.currentYear, "date": _vm.valueDateObj, "today": _vm.now, "limit": _vm.limit, "week-starts-with": _vm.weekStartsWith, "icon-control-left": _vm.iconControlLeft, "icon-control-right": _vm.iconControlRight, "date-class": _vm.dateClass, "year-month-formatter": _vm.yearMonthFormatter, "week-numbers": _vm.weekNumbers, "locale": _vm.locale }, on: { "month-change": _vm.onMonthChange, "year-change": _vm.onYearChange, "date-change": _vm.onDateChange, "view-change": _vm.onViewChange } }), _vm._v(" "), _c('month-view', { directives: [{ name: "show", rawName: "v-show", value: _vm.view === 'm', expression: "view==='m'" }], attrs: { "month": _vm.currentMonth, "year": _vm.currentYear, "icon-control-left": _vm.iconControlLeft, "icon-control-right": _vm.iconControlRight, "locale": _vm.locale }, on: { "month-change": _vm.onMonthChange, "year-change": _vm.onYearChange, "view-change": _vm.onViewChange } }), _vm._v(" "), _c('year-view', { directives: [{ name: "show", rawName: "v-show", value: _vm.view === 'y', expression: "view==='y'" }], attrs: { "year": _vm.currentYear, "icon-control-left": _vm.iconControlLeft, "icon-control-right": _vm.iconControlRight }, on: { "year-change": _vm.onYearChange, "view-change": _vm.onViewChange } }), _vm._v(" "), _vm.todayBtn || _vm.clearBtn ? _c('div', [_c('br'), _vm._v(" "), _c('div', { staticClass: "text-center" }, [_vm.todayBtn ? _c('btn', { attrs: { "data-action": "select", "type": "info", "size": "sm" }, domProps: { "textContent": _vm._s(_vm.t('uiv.datePicker.today')) }, on: { "click": _vm.selectToday } }) : _vm._e(), _vm._v(" "), _vm.clearBtn ? _c('btn', { attrs: { "data-action": "select", "size": "sm" }, domProps: { "textContent": _vm._s(_vm.t('uiv.datePicker.clear')) }, on: { "click": _vm.clearSelect } }) : _vm._e()], 1)]) : _vm._e()], 1);
  }, staticRenderFns: [],
  mixins: [Local],
  components: { DateView: DateView, MonthView: MonthView, YearView: YearView, Btn: Btn },
  props: {
    value: null,
    width: {
      type: Number,
      default: 270
    },
    todayBtn: {
      type: Boolean,
      default: true
    },
    clearBtn: {
      type: Boolean,
      default: true
    },
    closeOnSelected: {
      type: Boolean,
      default: true
    },
    limitFrom: null,
    limitTo: null,
    format: {
      type: String,
      default: 'yyyy-MM-dd'
    },
    initialView: {
      type: String,
      default: 'd'
    },
    dateParser: {
      type: Function,
      default: Date.parse
    },
    dateClass: Function,
    yearMonthFormatter: Function,
    weekStartsWith: {
      type: Number,
      default: 0,
      validator: function validator(value) {
        return value >= 0 && value <= 6;
      }
    },
    weekNumbers: Boolean,
    iconControlLeft: {
      type: String,
      default: 'glyphicon glyphicon-chevron-left'
    },
    iconControlRight: {
      type: String,
      default: 'glyphicon glyphicon-chevron-right'
    }
  },
  data: function data() {
    return {
      show: false,
      now: new Date(),
      currentMonth: 0,
      currentYear: 0,
      view: 'd'
    };
  },

  computed: {
    valueDateObj: function valueDateObj() {
      var ts = this.dateParser(this.value);
      if (isNaN(ts)) {
        return null;
      } else {
        var date = new Date(ts);
        if (date.getHours() !== 0) {
          date = new Date(ts + date.getTimezoneOffset() * 60 * 1000);
        }
        return date;
      }
    },
    pickerStyle: function pickerStyle() {
      return {
        width: this.width + 'px'
      };
    },
    limit: function limit() {
      var limit = {};
      if (this.limitFrom) {
        var limitFrom = this.dateParser(this.limitFrom);
        if (!isNaN(limitFrom)) {
          limitFrom = convertDateToUTC(new Date(limitFrom));
          limitFrom.setHours(0, 0, 0, 0);
          limit.from = limitFrom;
        }
      }
      if (this.limitTo) {
        var limitTo = this.dateParser(this.limitTo);
        if (!isNaN(limitTo)) {
          limitTo = convertDateToUTC(new Date(limitTo));
          limitTo.setHours(0, 0, 0, 0);
          limit.to = limitTo;
        }
      }
      return limit;
    }
  },
  mounted: function mounted() {
    if (this.value) {
      this.setMonthAndYearByValue(this.value);
    } else {
      this.currentMonth = this.now.getMonth();
      this.currentYear = this.now.getFullYear();
      this.view = this.initialView;
    }
  },

  watch: {
    value: function value(val, oldVal) {
      this.setMonthAndYearByValue(val, oldVal);
    }
  },
  methods: {
    setMonthAndYearByValue: function setMonthAndYearByValue(val, oldVal) {
      var ts = this.dateParser(val);
      if (!isNaN(ts)) {
        var date = new Date(ts);
        if (date.getHours() !== 0) {
          date = new Date(ts + date.getTimezoneOffset() * 60 * 1000);
        }
        if (this.limit && (this.limit.from && date < this.limit.from || this.limit.to && date >= this.limit.to)) {
          this.$emit('input', oldVal || '');
        } else {
          this.currentMonth = date.getMonth();
          this.currentYear = date.getFullYear();
        }
      }
    },
    onMonthChange: function onMonthChange(month) {
      this.currentMonth = month;
    },
    onYearChange: function onYearChange(year) {
      this.currentYear = year;
      this.currentMonth = undefined;
    },
    onDateChange: function onDateChange(date) {
      if (date && isNumber(date.date) && isNumber(date.month) && isNumber(date.year)) {
        var _date = new Date(date.year, date.month, date.date);
        this.$emit('input', stringify(_date, this.format));
        // if the input event trigger nothing (same value)
        // manually correct
        this.currentMonth = date.month;
        this.currentYear = date.year;
      } else {
        this.$emit('input', '');
      }
    },
    onViewChange: function onViewChange(view) {
      this.view = view;
    },
    selectToday: function selectToday() {
      this.view = 'd';
      this.onDateChange({
        date: this.now.getDate(),
        month: this.now.getMonth(),
        year: this.now.getFullYear()
      });
    },
    clearSelect: function clearSelect() {
      this.currentMonth = this.now.getMonth();
      this.currentYear = this.now.getFullYear();
      this.view = this.initialView;
      this.onDateChange();
    },
    onPickerClick: function onPickerClick(event) {
      if (event.target.getAttribute('data-action') !== 'select' || !this.closeOnSelected) {
        event.stopPropagation();
      }
    }
  }
};

var HANDLER = '_uiv_scroll_handler';
var events$1 = [EVENTS.RESIZE, EVENTS.SCROLL];

var bind$1 = function bind(el, binding) {
  var callback = binding.value;
  if (!isFunction$1(callback)) {
    return;
  }
  unbind(el);
  el[HANDLER] = callback;
  events$1.forEach(function (event) {
    on(window, event, el[HANDLER]);
  });
};

var unbind = function unbind(el) {
  events$1.forEach(function (event) {
    off(window, event, el[HANDLER]);
  });
  delete el[HANDLER];
};

var update = function update(el, binding) {
  if (binding.value !== binding.oldValue) {
    bind$1(el, binding);
  }
};

var scroll = { bind: bind$1, unbind: unbind, update: update };

var Affix = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { staticClass: "hidden-print" }, [_c('div', { directives: [{ name: "scroll", rawName: "v-scroll", value: _vm.onScroll, expression: "onScroll" }], class: _vm.classes, style: _vm.styles }, [_vm._t("default")], 2)]);
  }, staticRenderFns: [],
  directives: {
    scroll: scroll
  },
  props: {
    offset: {
      type: Number,
      default: 0
    }
  },
  data: function data() {
    return {
      affixed: false
    };
  },

  computed: {
    classes: function classes() {
      return {
        affix: this.affixed
      };
    },
    styles: function styles() {
      return {
        top: this.affixed ? this.offset + 'px' : null
      };
    }
  },
  methods: {
    // from https://github.com/ant-design/ant-design/blob/master/components/affix/index.jsx#L20
    onScroll: function onScroll() {
      var _this = this;

      // if is hidden don't calculate anything
      if (!(this.$el.offsetWidth || this.$el.offsetHeight || this.$el.getClientRects().length)) {
        return;
      }
      // get window scroll and element position to detect if have to be normal or affixed
      var scroll$$1 = {};
      var element = {};
      var rect = this.$el.getBoundingClientRect();
      var body = document.body;
      var _arr = ['Top', 'Left'];
      for (var _i = 0; _i < _arr.length; _i++) {
        var type = _arr[_i];
        var t = type.toLowerCase();
        scroll$$1[t] = window['page' + (type === 'Top' ? 'Y' : 'X') + 'Offset'];
        element[t] = scroll$$1[t] + rect[t] - (this.$el['client' + type] || body['client' + type] || 0);
      }
      var fix = scroll$$1.top > element.top - this.offset;
      if (this.affixed !== fix) {
        this.affixed = fix;
        if (this.affixed) {
          this.$emit('affix');
          this.$nextTick(function () {
            _this.$emit('affixed');
          });
        }
      }
    }
  }
};

var Alert = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('div', { class: _vm.alertClass, attrs: { "role": "alert" } }, [_vm.dismissible ? _c('button', { staticClass: "close", attrs: { "type": "button", "aria-label": "Close" }, on: { "click": _vm.closeAlert } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("×")])]) : _vm._e(), _vm._v(" "), _vm._t("default")], 2);
  }, staticRenderFns: [],
  props: {
    dismissible: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 0
    },
    type: {
      type: String,
      default: 'info'
    }
  },
  data: function data() {
    return {
      timeout: 0
    };
  },

  computed: {
    alertClass: function alertClass() {
      var _ref;

      return _ref = {
        'alert': true
      }, defineProperty$1(_ref, "alert-" + this.type, Boolean(this.type)), defineProperty$1(_ref, 'alert-dismissible', this.dismissible), _ref;
    }
  },
  methods: {
    closeAlert: function closeAlert() {
      clearTimeout(this.timeout);
      this.$emit('dismissed');
    }
  },
  mounted: function mounted() {
    if (this.duration > 0) {
      this.timeout = setTimeout(this.closeAlert, this.duration);
    }
  },
  destroyed: function destroyed() {
    clearTimeout(this.timeout);
  }
};

var Pagination = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('nav', { class: _vm.navClasses, attrs: { "aria-label": "Page navigation" } }, [_c('ul', { staticClass: "pagination", class: _vm.classes }, [_vm.boundaryLinks ? _c('li', { class: { disabled: _vm.value <= 1 || _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "First" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.onPageChange(1);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("«")])])]) : _vm._e(), _vm._v(" "), _vm.directionLinks ? _c('li', { class: { disabled: _vm.value <= 1 || _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "Previous" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.onPageChange(_vm.value - 1);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("‹")])])]) : _vm._e(), _vm._v(" "), _vm.sliceStart > 0 ? _c('li', { class: { disabled: _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "Previous group" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.toPage(1);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("…")])])]) : _vm._e(), _vm._v(" "), _vm._l(_vm.sliceArray, function (item) {
      return _c('li', { key: item, class: { active: _vm.value === item + 1, disabled: _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button" }, on: { "click": function click($event) {
            $event.preventDefault();_vm.onPageChange(item + 1);
          } } }, [_vm._v(_vm._s(item + 1))])]);
    }), _vm._v(" "), _vm.sliceStart < _vm.totalPage - _vm.maxSize ? _c('li', { class: { disabled: _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "Next group" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.toPage(0);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("…")])])]) : _vm._e(), _vm._v(" "), _vm.directionLinks ? _c('li', { class: { disabled: _vm.value >= _vm.totalPage || _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "Next" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.onPageChange(_vm.value + 1);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("›")])])]) : _vm._e(), _vm._v(" "), _vm.boundaryLinks ? _c('li', { class: { disabled: _vm.value >= _vm.totalPage || _vm.disabled } }, [_c('a', { attrs: { "href": "#", "role": "button", "aria-label": "Last" }, on: { "click": function click($event) {
          $event.preventDefault();_vm.onPageChange(_vm.totalPage);
        } } }, [_c('span', { attrs: { "aria-hidden": "true" } }, [_vm._v("»")])])]) : _vm._e()], 2)]);
  }, staticRenderFns: [],
  props: {
    value: {
      type: Number,
      required: true,
      validator: function validator(v) {
        return v >= 1;
      }
    },
    boundaryLinks: {
      type: Boolean,
      default: false
    },
    directionLinks: {
      type: Boolean,
      default: true
    },
    size: String,
    align: String,
    totalPage: {
      type: Number,
      required: true,
      validator: function validator(v) {
        return v >= 0;
      }
    },
    maxSize: {
      type: Number,
      default: 5,
      validator: function validator(v) {
        return v >= 0;
      }
    },
    disabled: Boolean
  },
  data: function data() {
    return {
      sliceStart: 0
    };
  },

  computed: {
    navClasses: function navClasses() {
      return defineProperty$1({}, 'text-' + this.align, Boolean(this.align));
    },
    classes: function classes() {
      return defineProperty$1({}, 'pagination-' + this.size, Boolean(this.size));
    },
    sliceArray: function sliceArray() {
      return range(this.totalPage).slice(this.sliceStart, this.sliceStart + this.maxSize);
    }
  },
  methods: {
    calculateSliceStart: function calculateSliceStart() {
      var currentPage = this.value;
      var chunkSize = this.maxSize;
      var currentChunkStart = this.sliceStart;
      var currentChunkEnd = currentChunkStart + chunkSize;
      if (currentPage > currentChunkEnd) {
        var lastChunkStart = this.totalPage - chunkSize;
        if (currentPage > lastChunkStart) {
          this.sliceStart = lastChunkStart;
        } else {
          this.sliceStart = currentPage - 1;
        }
      } else if (currentPage < currentChunkStart + 1) {
        if (currentPage > chunkSize) {
          this.sliceStart = currentPage - chunkSize;
        } else {
          this.sliceStart = 0;
        }
      }
    },
    onPageChange: function onPageChange(page) {
      if (!this.disabled && page > 0 && page <= this.totalPage && page !== this.value) {
        this.$emit('input', page);
        this.$emit('change', page);
      }
    },
    toPage: function toPage(pre) {
      if (this.disabled) {
        return;
      }
      var chunkSize = this.maxSize;
      var currentChunkStart = this.sliceStart;
      var lastChunkStart = this.totalPage - chunkSize;
      var start = pre ? currentChunkStart - chunkSize : currentChunkStart + chunkSize;
      if (start < 0) {
        this.sliceStart = 0;
      } else if (start > lastChunkStart) {
        this.sliceStart = lastChunkStart;
      } else {
        this.sliceStart = start;
      }
    }
  },
  created: function created() {
    this.$watch(function (vm) {
      return [vm.value, vm.maxSize, vm.totalPage].join();
    }, this.calculateSliceStart, {
      immediate: true
    });
  }
};

var SHOW_CLASS = 'in';

var popupMixin = {
  props: {
    value: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: 'span'
    },
    placement: {
      type: String,
      default: PLACEMENTS.TOP
    },
    autoPlacement: {
      type: Boolean,
      default: true
    },
    appendTo: {
      type: String,
      default: 'body'
    },
    transitionDuration: {
      type: Number,
      default: 150
    },
    enable: {
      type: Boolean,
      default: true
    },
    enterable: {
      type: Boolean,
      default: true
    },
    target: null
  },
  data: function data() {
    return {
      triggerEl: null,
      timeoutId: 0
    };
  },

  watch: {
    value: function value(v) {
      v ? this.show() : this.hide();
    },
    trigger: function trigger() {
      this.clearListeners();
      this.initListeners();
    },
    target: function target(value) {
      this.clearListeners();
      this.initTriggerElByTarget(value);
      this.initListeners();
    },
    allContent: function allContent(value) {
      var _this = this;

      // can not use value because it can not detect slot changes
      if (this.isNotEmpty()) {
        // reset position while content changed & is shown
        // nextTick is required
        this.$nextTick(function () {
          if (_this.isShown()) {
            _this.resetPosition();
          }
        });
      } else {
        this.hide();
      }
    },
    enable: function enable(value) {
      // hide if enable changed to false
      if (!value) {
        this.hide();
      }
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    ensureElementMatchesFunction();
    removeFromDom(this.$refs.popup);
    this.$nextTick(function () {
      _this2.initTriggerElByTarget(_this2.target);
      _this2.initListeners();
      if (_this2.value) {
        _this2.show();
      }
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.clearListeners();
    removeFromDom(this.$refs.popup);
  },

  methods: {
    initTriggerElByTarget: function initTriggerElByTarget(target) {
      if (target) {
        // target exist
        if (isString$1(target)) {
          // is selector
          this.triggerEl = document.querySelector(target);
        } else if (isElement(target)) {
          // is element
          this.triggerEl = target;
        } else if (isElement(target.$el)) {
          // is component
          this.triggerEl = target.$el;
        }
      } else {
        // find special element
        var trigger = this.$el.querySelector('[data-role="trigger"]');
        if (trigger) {
          this.triggerEl = trigger;
        } else {
          // use the first child
          var firstChild = this.$el.firstChild;
          this.triggerEl = firstChild === this.$refs.popup ? null : firstChild;
        }
      }
    },
    initListeners: function initListeners() {
      if (this.triggerEl) {
        if (this.trigger === TRIGGERS.HOVER) {
          on(this.triggerEl, EVENTS.MOUSE_ENTER, this.show);
          on(this.triggerEl, EVENTS.MOUSE_LEAVE, this.hide);
        } else if (this.trigger === TRIGGERS.FOCUS) {
          on(this.triggerEl, EVENTS.FOCUS, this.show);
          on(this.triggerEl, EVENTS.BLUR, this.hide);
        } else if (this.trigger === TRIGGERS.HOVER_FOCUS) {
          on(this.triggerEl, EVENTS.MOUSE_ENTER, this.handleAuto);
          on(this.triggerEl, EVENTS.MOUSE_LEAVE, this.handleAuto);
          on(this.triggerEl, EVENTS.FOCUS, this.handleAuto);
          on(this.triggerEl, EVENTS.BLUR, this.handleAuto);
        } else if (this.trigger === TRIGGERS.CLICK || this.trigger === TRIGGERS.OUTSIDE_CLICK) {
          on(this.triggerEl, EVENTS.CLICK, this.toggle);
        }
      }
      on(window, EVENTS.CLICK, this.windowClicked);
    },
    clearListeners: function clearListeners() {
      if (this.triggerEl) {
        off(this.triggerEl, EVENTS.FOCUS, this.show);
        off(this.triggerEl, EVENTS.BLUR, this.hide);
        off(this.triggerEl, EVENTS.MOUSE_ENTER, this.show);
        off(this.triggerEl, EVENTS.MOUSE_LEAVE, this.hide);
        off(this.triggerEl, EVENTS.CLICK, this.toggle);
        off(this.triggerEl, EVENTS.MOUSE_ENTER, this.handleAuto);
        off(this.triggerEl, EVENTS.MOUSE_LEAVE, this.handleAuto);
        off(this.triggerEl, EVENTS.FOCUS, this.handleAuto);
        off(this.triggerEl, EVENTS.BLUR, this.handleAuto);
      }
      off(window, EVENTS.CLICK, this.windowClicked);
    },
    resetPosition: function resetPosition() {
      var popup = this.$refs.popup;
      setTooltipPosition(popup, this.triggerEl, this.placement, this.autoPlacement, this.appendTo);
      popup.offsetHeight;
    },
    hideOnLeave: function hideOnLeave() {
      if (this.trigger === TRIGGERS.HOVER || this.trigger === TRIGGERS.HOVER_FOCUS && !this.triggerEl.matches(':focus')) {
        this.$hide();
      }
    },
    toggle: function toggle() {
      if (this.isShown()) {
        this.hide();
      } else {
        this.show();
      }
    },
    show: function show() {
      if (this.enable && this.triggerEl && this.isNotEmpty() && !this.isShown()) {
        var popup = this.$refs.popup;
        if (this.timeoutId > 0) {
          clearTimeout(this.timeoutId);
          this.timeoutId = 0;
        } else {
          popup.className = this.name + ' ' + this.placement + ' fade';
          var container = document.querySelector(this.appendTo);
          container.appendChild(popup);
          this.resetPosition();
        }
        addClass$2(popup, SHOW_CLASS);
        this.$emit('input', true);
        this.$emit('show');
      }
    },
    hide: function hide() {
      var _this3 = this;

      if (!this.isShown()) {
        return;
      }
      if (this.enterable && (this.trigger === TRIGGERS.HOVER || this.trigger === TRIGGERS.HOVER_FOCUS)) {
        setTimeout(function () {
          if (!_this3.$refs.popup.matches(':hover')) {
            _this3.$hide();
          }
        }, 100);
      } else {
        this.$hide();
      }
    },
    $hide: function $hide() {
      var _this4 = this;

      if (this.isShown()) {
        clearTimeout(this.timeoutId);
        removeClass$2(this.$refs.popup, SHOW_CLASS);
        this.timeoutId = setTimeout(function () {
          removeFromDom(_this4.$refs.popup);
          _this4.timeoutId = 0;
          _this4.$emit('input', false);
          _this4.$emit('hide');
        }, this.transitionDuration);
      }
    },
    isShown: function isShown() {
      return hasClass$1(this.$refs.popup, SHOW_CLASS);
    },
    windowClicked: function windowClicked(event) {
      if (this.triggerEl && !this.triggerEl.contains(event.target) && this.trigger === TRIGGERS.OUTSIDE_CLICK && !this.$refs.popup.contains(event.target) && this.isShown()) {
        this.hide();
      }
    },
    handleAuto: function handleAuto() {
      var _this5 = this;

      setTimeout(function () {
        if (_this5.triggerEl.matches(':hover, :focus')) {
          _this5.show();
        } else {
          _this5.hide();
        }
      }, 20); // 20ms make firefox happy
    }
  }
};

var Tooltip = {
  mixins: [popupMixin],
  data: function data() {
    return {
      name: 'tooltip'
    };
  },
  render: function render(h) {
    return h(this.tag, [this.$slots.default, h('div', {
      ref: 'popup',
      attrs: {
        role: 'tooltip'
      },
      on: {
        mouseleave: this.hideOnLeave
      }
    }, [h('div', { 'class': 'tooltip-arrow' }), h('div', {
      'class': 'tooltip-inner',
      domProps: { innerHTML: this.text }
    })])]);
  },

  props: {
    text: {
      type: String,
      default: ''
    },
    trigger: {
      type: String,
      default: TRIGGERS.HOVER_FOCUS
    }
  },
  computed: {
    allContent: function allContent() {
      return this.text;
    }
  },
  methods: {
    isNotEmpty: function isNotEmpty() {
      return this.text;
    }
  }
};

var Popover = {
  mixins: [popupMixin],
  data: function data() {
    return {
      name: 'popover'
    };
  },
  render: function render(h) {
    return h(this.tag, [this.$slots.default, h('div', {
      style: {
        display: 'block'
      },
      ref: 'popup',
      on: {
        mouseleave: this.hideOnLeave
      }
    }, [h('div', { 'class': 'arrow' }), h('h3', {
      'class': 'popover-title',
      directives: [{ name: 'show', value: this.title }]
    }, this.title), h('div', { 'class': 'popover-content' }, [this.content || this.$slots.popover])])]);
  },

  props: {
    title: {
      type: String,
      default: ''
    },
    content: {
      type: String,
      default: ''
    },
    trigger: {
      type: String,
      default: TRIGGERS.OUTSIDE_CLICK
    }
  },
  computed: {
    allContent: function allContent() {
      return this.title + this.content;
    }
  },
  methods: {
    isNotEmpty: function isNotEmpty() {
      return this.title || this.content || this.$slots.popover;
    }
  }
};

var maxHours = 23;
var zero = 0;
var maxMinutes = 59;
var cutUpAmAndPm = 12;

var TimePicker = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('section', { on: { "click": function click($event) {
          $event.stopPropagation();
        } } }, [_c('table', [_c('tbody', [_vm.controls ? _c('tr', { staticClass: "text-center" }, [_c('td', [_c('btn', { attrs: { "type": "link", "size": "sm", "disabled": _vm.readonly }, on: { "click": function click($event) {
          _vm.changeTime(1, 1);
        } } }, [_c('i', { class: _vm.iconControlUp })])], 1), _vm._v(" "), _c('td', [_vm._v(" ")]), _vm._v(" "), _c('td', [_c('btn', { attrs: { "type": "link", "size": "sm", "disabled": _vm.readonly }, on: { "click": function click($event) {
          _vm.changeTime(0, 1);
        } } }, [_c('i', { class: _vm.iconControlUp })])], 1), _vm._v(" "), _vm.showMeridian ? _c('td') : _vm._e()]) : _vm._e(), _vm._v(" "), _c('tr', [_c('td', { staticClass: "form-group" }, [_c('input', { directives: [{ name: "model", rawName: "v-model.lazy", value: _vm.hoursText, expression: "hoursText", modifiers: { "lazy": true } }], ref: "hoursInput", staticClass: "form-control text-center", staticStyle: { "width": "50px" }, attrs: { "type": "tel", "pattern": "\\d*", "placeholder": "HH", "readonly": _vm.readonly, "maxlength": "2", "size": "2" }, domProps: { "value": _vm.hoursText }, on: { "mouseup": _vm.selectInputValue, "keydown": [function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "up", 38, $event.key)) {
            return null;
          }$event.preventDefault();_vm.changeTime(1, 1);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40, $event.key)) {
            return null;
          }$event.preventDefault();_vm.changeTime(1, 0);
        }], "wheel": function wheel($event) {
          _vm.onWheel($event, true);
        }, "change": function change($event) {
          _vm.hoursText = $event.target.value;
        } } })]), _vm._v(" "), _vm._m(0), _vm._v(" "), _c('td', { staticClass: "form-group" }, [_c('input', { directives: [{ name: "model", rawName: "v-model.lazy", value: _vm.minutesText, expression: "minutesText", modifiers: { "lazy": true } }], ref: "minutesInput", staticClass: "form-control text-center", staticStyle: { "width": "50px" }, attrs: { "type": "tel", "pattern": "\\d*", "placeholder": "MM", "readonly": _vm.readonly, "maxlength": "2", "size": "2" }, domProps: { "value": _vm.minutesText }, on: { "mouseup": _vm.selectInputValue, "keydown": [function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "up", 38, $event.key)) {
            return null;
          }$event.preventDefault();_vm.changeTime(0, 1);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40, $event.key)) {
            return null;
          }$event.preventDefault();_vm.changeTime(0, 0);
        }], "wheel": function wheel($event) {
          _vm.onWheel($event, false);
        }, "change": function change($event) {
          _vm.minutesText = $event.target.value;
        } } })]), _vm._v(" "), _vm.showMeridian ? _c('td', [_vm._v("   "), _c('btn', { attrs: { "data-action": "toggleMeridian", "disabled": _vm.readonly }, domProps: { "textContent": _vm._s(_vm.meridian ? _vm.t('uiv.timePicker.am') : _vm.t('uiv.timePicker.pm')) }, on: { "click": _vm.toggleMeridian } })], 1) : _vm._e()]), _vm._v(" "), _vm.controls ? _c('tr', { staticClass: "text-center" }, [_c('td', [_c('btn', { attrs: { "type": "link", "size": "sm", "disabled": _vm.readonly }, on: { "click": function click($event) {
          _vm.changeTime(1, 0);
        } } }, [_c('i', { class: _vm.iconControlDown })])], 1), _vm._v(" "), _c('td', [_vm._v(" ")]), _vm._v(" "), _c('td', [_c('btn', { attrs: { "type": "link", "size": "sm", "disabled": _vm.readonly }, on: { "click": function click($event) {
          _vm.changeTime(0, 0);
        } } }, [_c('i', { class: _vm.iconControlDown })])], 1), _vm._v(" "), _vm.showMeridian ? _c('td') : _vm._e()]) : _vm._e()])])]);
  }, staticRenderFns: [function () {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('td', [_vm._v(" "), _c('b', [_vm._v(":")]), _vm._v(" ")]);
  }],
  components: { Btn: Btn },
  mixins: [Local],
  props: {
    value: {
      type: Date,
      required: true
    },
    showMeridian: {
      type: Boolean,
      default: true
    },
    min: Date,
    max: Date,
    hourStep: {
      type: Number,
      default: 1
    },
    minStep: {
      type: Number,
      default: 1
    },
    readonly: {
      type: Boolean,
      default: false
    },
    controls: {
      type: Boolean,
      default: true
    },
    iconControlUp: {
      type: String,
      default: 'glyphicon glyphicon-chevron-up'
    },
    iconControlDown: {
      type: String,
      default: 'glyphicon glyphicon-chevron-down'
    }
  },
  data: function data() {
    return {
      hours: 0,
      minutes: 0,
      meridian: true,
      hoursText: '',
      minutesText: ''
    };
  },
  mounted: function mounted() {
    this.updateByValue(this.value);
  },

  watch: {
    value: function value(_value) {
      this.updateByValue(_value);
    },
    showMeridian: function showMeridian(value) {
      this.setTime();
    },
    hoursText: function hoursText(value) {
      if (this.hours === 0 && value === '') {
        // Prevent a runtime reset from being overwritten
        return;
      }
      var hour = parseInt(value);
      if (this.showMeridian) {
        if (hour >= 1 && hour <= cutUpAmAndPm) {
          if (this.meridian) {
            this.hours = hour === cutUpAmAndPm ? 0 : hour;
          } else {
            this.hours = hour === cutUpAmAndPm ? cutUpAmAndPm : hour + cutUpAmAndPm;
          }
        }
      } else if (hour >= zero && hour <= maxHours) {
        this.hours = hour;
      }
      this.setTime();
    },
    minutesText: function minutesText(value) {
      if (this.minutes === 0 && value === '') {
        // Prevent a runtime reset from being overwritten
        return;
      }
      var minutesStr = parseInt(value);
      if (minutesStr >= zero && minutesStr <= maxMinutes) {
        this.minutes = minutesStr;
      }
      this.setTime();
    }
  },
  methods: {
    updateByValue: function updateByValue(value) {
      if (isNaN(value.getTime())) {
        this.hours = 0;
        this.minutes = 0;
        this.hoursText = '';
        this.minutesText = '';
        this.meridian = true;
        return;
      }
      this.hours = value.getHours();
      this.minutes = value.getMinutes();
      if (!this.showMeridian) {
        this.hoursText = pad(this.hours, 2);
      } else {
        if (this.hours >= cutUpAmAndPm) {
          if (this.hours === cutUpAmAndPm) {
            this.hoursText = this.hours + '';
          } else {
            this.hoursText = pad(this.hours - cutUpAmAndPm, 2);
          }
          this.meridian = false;
        } else {
          if (this.hours === zero) {
            this.hoursText = cutUpAmAndPm.toString();
          } else {
            this.hoursText = pad(this.hours, 2);
          }
          this.meridian = true;
        }
      }
      this.minutesText = pad(this.minutes, 2);
      // lazy model won't update when using keyboard up/down
      this.$refs.hoursInput.value = this.hoursText;
      this.$refs.minutesInput.value = this.minutesText;
    },
    addHour: function addHour(step) {
      step = step || this.hourStep;
      this.hours = this.hours >= maxHours ? zero : this.hours + step;
    },
    reduceHour: function reduceHour(step) {
      step = step || this.hourStep;
      this.hours = this.hours <= zero ? maxHours : this.hours - step;
    },
    addMinute: function addMinute() {
      if (this.minutes >= maxMinutes) {
        this.minutes = zero;
        this.addHour(1);
      } else {
        this.minutes += this.minStep;
      }
    },
    reduceMinute: function reduceMinute() {
      if (this.minutes <= zero) {
        this.minutes = maxMinutes + 1 - this.minStep;
        this.reduceHour(1);
      } else {
        this.minutes -= this.minStep;
      }
    },
    changeTime: function changeTime(isHour, isPlus) {
      if (!this.readonly) {
        if (isHour && isPlus) {
          this.addHour();
        } else if (isHour && !isPlus) {
          this.reduceHour();
        } else if (!isHour && isPlus) {
          this.addMinute();
        } else {
          this.reduceMinute();
        }
        this.setTime();
      }
    },
    toggleMeridian: function toggleMeridian() {
      this.meridian = !this.meridian;
      if (this.meridian) {
        this.hours -= cutUpAmAndPm;
      } else {
        this.hours += cutUpAmAndPm;
      }
      this.setTime();
    },
    onWheel: function onWheel(e, isHour) {
      if (!this.readonly) {
        e.preventDefault();
        this.changeTime(isHour, e.deltaY < 0);
      }
    },
    setTime: function setTime() {
      var time = this.value;
      if (isNaN(time.getTime())) {
        time = new Date();
        time.setHours(0);
        time.setMinutes(0);
      }
      time.setHours(this.hours);
      time.setMinutes(this.minutes);
      if (this.max) {
        var max = new Date(time);
        max.setHours(this.max.getHours());
        max.setMinutes(this.max.getMinutes());
        time = time > max ? max : time;
      }
      if (this.min) {
        var min = new Date(time);
        min.setHours(this.min.getHours());
        min.setMinutes(this.min.getMinutes());
        time = time < min ? min : time;
      }
      this.$emit('input', new Date(time));
    },
    selectInputValue: function selectInputValue(e) {
      // mouseup should be prevented!
      // See various comments in https://stackoverflow.com/questions/3272089/programmatically-selecting-text-in-an-input-field-on-ios-devices-mobile-safari
      e.target.setSelectionRange(0, 2);
    }
  }
};

function getRequest(url) {
  var request = new window.XMLHttpRequest();
  var data = {};
  var p = {
    then: function then(fn1, fn2) {
      return p.done(fn1).fail(fn2);
    },
    catch: function _catch(fn) {
      return p.fail(fn);
    },
    always: function always(fn) {
      return p.done(fn).fail(fn);
    }
  };
  var statuses = ['done', 'fail'];
  statuses.forEach(function (name) {
    data[name] = [];
    p[name] = function (fn) {
      if (fn instanceof Function) data[name].push(fn);
      return p;
    };
  });
  p.done(JSON.parse);
  request.onreadystatechange = function () {
    if (request.readyState === 4) {
      var e = { status: request.status };
      if (request.status === 200) {
        var response = request.responseText;
        for (var i in data.done) {
          if (data.done.hasOwnProperty(i) && isFunction$1(data.done[i])) {
            var value = data.done[i](response);
            if (isExist(value)) {
              response = value;
            }
          }
        }
      } else {
        data.fail.forEach(function (fail) {
          return fail(e);
        });
      }
    }
  };
  request.open('GET', url);
  request.setRequestHeader('Accept', 'application/json');
  request.send();
  return p;
}

var Typeahead = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('dropdown', { ref: "dropdown", attrs: { "tag": "section", "append-to-body": _vm.appendToBody, "not-close-elements": _vm.elements, "position-element": _vm.inputEl }, model: { value: _vm.open, callback: function callback($$v) {
          _vm.open = $$v;
        }, expression: "open" } }, [_c('template', { slot: "dropdown" }, [_vm._t("item", _vm._l(_vm.items, function (item, index) {
      return _c('li', { class: { active: _vm.activeIndex === index } }, [_c('a', { attrs: { "href": "#" }, on: { "click": function click($event) {
            $event.preventDefault();_vm.selectItem(item);
          } } }, [_c('span', { domProps: { "innerHTML": _vm._s(_vm.highlight(item)) } })])]);
    }), { items: _vm.items, activeIndex: _vm.activeIndex, select: _vm.selectItem, highlight: _vm.highlight }), _vm._v(" "), !_vm.items || _vm.items.length === 0 ? _vm._t("empty") : _vm._e()], 2)], 2);
  }, staticRenderFns: [],
  components: { Dropdown: Dropdown },
  props: {
    value: {
      required: true
    },
    data: Array,
    itemKey: String,
    appendToBody: {
      type: Boolean,
      default: false
    },
    ignoreCase: {
      type: Boolean,
      default: true
    },
    matchStart: {
      type: Boolean,
      default: false
    },
    forceSelect: {
      type: Boolean,
      default: false
    },
    forceClear: {
      type: Boolean,
      default: false
    },
    limit: {
      type: Number,
      default: 10
    },
    asyncSrc: String,
    asyncKey: String,
    asyncFunction: Function,
    debounce: {
      type: Number,
      default: 200
    },
    openOnFocus: {
      type: Boolean,
      default: true
    },
    openOnEmpty: {
      type: Boolean,
      default: false
    },
    target: {
      required: true
    },
    preselect: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      inputEl: null,
      items: [],
      activeIndex: 0,
      timeoutID: 0,
      elements: [],
      open: false,
      dropdownMenuEl: null
    };
  },

  computed: {
    regexOptions: function regexOptions() {
      var options = '';
      if (this.ignoreCase) {
        options += 'i';
      }
      if (!this.matchStart) {
        options += 'g';
      }
      return options;
    }
  },
  mounted: function mounted() {
    var _this = this;

    ensureElementMatchesFunction();
    this.$nextTick(function () {
      _this.initInputElByTarget(_this.target);
      _this.initListeners();
      _this.dropdownMenuEl = _this.$refs.dropdown.$el.querySelector('.dropdown-menu');
      // set input text if v-model not empty
      if (_this.value) {
        _this.setInputTextByValue(_this.value);
      }
    });
  },
  beforeDestroy: function beforeDestroy() {
    this.removeListeners();
  },

  watch: {
    target: function target(el) {
      this.removeListeners();
      this.initInputElByTarget(el);
      this.initListeners();
    },
    value: function value(_value) {
      this.setInputTextByValue(_value);
    }
  },
  methods: {
    setInputTextByValue: function setInputTextByValue(value) {
      if (isString$1(value)) {
        // direct
        this.inputEl.value = value;
      } else if (value) {
        // is object
        this.inputEl.value = this.itemKey ? value[this.itemKey] : value;
      } else if (value === null) {
        // is null or undefined or something else not valid
        this.inputEl.value = '';
      }
    },
    hasEmptySlot: function hasEmptySlot() {
      return !!this.$slots['empty'] || !!this.$scopedSlots['empty'];
    },
    initInputElByTarget: function initInputElByTarget(target) {
      if (!target) {
        return;
      }
      if (isString$1(target)) {
        // is selector
        this.inputEl = document.querySelector(target);
      } else if (isElement(target)) {
        // is element
        this.inputEl = target;
      } else if (isElement(target.$el)) {
        // is component
        this.inputEl = target.$el;
      }
    },
    initListeners: function initListeners() {
      if (this.inputEl) {
        this.elements = [this.inputEl];
        on(this.inputEl, EVENTS.FOCUS, this.inputFocused);
        on(this.inputEl, EVENTS.BLUR, this.inputBlured);
        on(this.inputEl, EVENTS.INPUT, this.inputChanged);
        on(this.inputEl, EVENTS.KEY_DOWN, this.inputKeyPressed);
      }
    },
    removeListeners: function removeListeners() {
      this.elements = [];
      if (this.inputEl) {
        off(this.inputEl, EVENTS.FOCUS, this.inputFocused);
        off(this.inputEl, EVENTS.BLUR, this.inputBlured);
        off(this.inputEl, EVENTS.INPUT, this.inputChanged);
        off(this.inputEl, EVENTS.KEY_DOWN, this.inputKeyPressed);
      }
    },
    prepareItems: function prepareItems(data) {
      var disableFilters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (disableFilters) {
        this.items = data.slice(0, this.limit);
        return;
      }
      this.items = [];
      this.activeIndex = this.preselect ? 0 : -1;
      for (var i = 0, l = data.length; i < l; i++) {
        var item = data[i];
        var key = this.itemKey ? item[this.itemKey] : item;
        key = key.toString();
        var index = -1;
        if (this.ignoreCase) {
          index = key.toLowerCase().indexOf(this.inputEl.value.toLowerCase());
        } else {
          index = key.indexOf(this.inputEl.value);
        }
        if (this.matchStart ? index === 0 : index >= 0) {
          this.items.push(item);
        }
        if (this.items.length >= this.limit) {
          break;
        }
      }
    },
    fetchItems: function fetchItems(value, debounce) {
      var _this2 = this;

      clearTimeout(this.timeoutID);
      if (value === '' && !this.openOnEmpty) {
        this.open = false;
      } else if (this.data) {
        this.prepareItems(this.data);
        this.open = this.hasEmptySlot() || Boolean(this.items.length);
      } else if (this.asyncSrc) {
        this.timeoutID = setTimeout(function () {
          _this2.$emit('loading');
          getRequest(_this2.asyncSrc + encodeURIComponent(value)).then(function (data) {
            if (_this2.inputEl.matches(':focus')) {
              _this2.prepareItems(_this2.asyncKey ? data[_this2.asyncKey] : data, true);
              _this2.open = _this2.hasEmptySlot() || Boolean(_this2.items.length);
            }
            _this2.$emit('loaded');
          }).catch(function (err) {
            console.error(err);
            _this2.$emit('loaded-error');
          });
        }, debounce);
      } else if (this.asyncFunction) {
        var cb = function cb(data) {
          if (_this2.inputEl.matches(':focus')) {
            _this2.prepareItems(data, true);
            _this2.open = _this2.hasEmptySlot() || Boolean(_this2.items.length);
          }
          _this2.$emit('loaded');
        };
        this.timeoutID = setTimeout(function () {
          _this2.$emit('loading');
          _this2.asyncFunction(value, cb);
        }, debounce);
      }
    },
    inputChanged: function inputChanged() {
      var value = this.inputEl.value;
      this.fetchItems(value, this.debounce);
      this.$emit('input', this.forceSelect ? undefined : value);
    },
    inputFocused: function inputFocused() {
      if (this.openOnFocus) {
        var value = this.inputEl.value;
        this.fetchItems(value, 0);
      }
    },
    inputBlured: function inputBlured() {
      var _this3 = this;

      if (!this.dropdownMenuEl.matches(':hover')) {
        this.open = false;
      }
      if (this.inputEl && this.forceClear) {
        this.$nextTick(function () {
          if (typeof _this3.value === 'undefined') {
            _this3.inputEl.value = '';
          }
        });
      }
    },
    inputKeyPressed: function inputKeyPressed(event) {
      if (this.open) {
        switch (event.keyCode) {
          case 13:
            if (this.activeIndex >= 0) {
              this.selectItem(this.items[this.activeIndex]);
            } else {
              this.open = false;
            }
            break;
          case 27:
            this.open = false;
            break;
          case 38:
            this.activeIndex = this.activeIndex > 0 ? this.activeIndex - 1 : 0;
            break;
          case 40:
            var maxIndex = this.items.length - 1;
            this.activeIndex = this.activeIndex < maxIndex ? this.activeIndex + 1 : maxIndex;
            break;
        }
      }
    },
    selectItem: function selectItem(item) {
      this.$emit('input', item);
      this.open = false;
    },
    highlight: function highlight(item) {
      var value = this.itemKey ? item[this.itemKey] : item;
      var inputValue = this.inputEl.value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
      return value.replace(new RegExp('' + inputValue, this.regexOptions), '<b>$&</b>');
    }
  }
};

var ProgressBarStack = {
  functional: true,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data;

    return h('div', mergeData$1(data, {
      class: defineProperty$1({
        'progress-bar': true,
        'progress-bar-striped': props.striped,
        'active': props.striped && props.active
      }, 'progress-bar-' + props.type, Boolean(props.type)),
      style: {
        minWidth: props.minWidth ? '2em' : null,
        width: props.value + '%'
      },
      attrs: {
        role: 'progressbar',
        'aria-valuemin': 0,
        'aria-valuenow': props.value,
        'aria-valuemax': 100
      }
    }), props.label ? props.labelText ? props.labelText : props.value + '%' : null);
  },

  props: {
    value: {
      type: Number,
      required: true,
      validator: function validator(value) {
        return value >= 0 && value <= 100;
      }
    },
    labelText: String,
    type: String,
    label: {
      type: Boolean,
      default: false
    },
    minWidth: {
      type: Boolean,
      default: false
    },
    striped: {
      type: Boolean,
      default: false
    },
    active: {
      type: Boolean,
      default: false
    }
  }
};

var ProgressBar = {
  functional: true,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;

    return h('div', mergeData$1(data, { class: 'progress' }), children && children.length ? children : [h(ProgressBarStack, { props: props })]);
  }
};

var BreadcrumbItem = {
  functional: true,
  mixins: [linkMixin],
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;

    var slot = void 0;
    if (props.active) {
      slot = children;
    } else if (props.to) {
      slot = [h('router-link', {
        props: {
          to: props.to,
          replace: props.replace,
          append: props.append,
          exact: props.exact
        }
      }, children)];
    } else {
      slot = [h('a', {
        attrs: {
          href: props.href,
          target: props.target
        }
      }, children)];
    }
    return h('li', mergeData$1(data, { class: { active: props.active } }), slot);
  },

  props: {
    active: {
      type: Boolean,
      default: false
    }
  }
};

var Breadcrumbs = {
  functional: true,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;

    var slot = [];
    if (children && children.length) {
      slot = children;
    } else if (props.items) {
      slot = props.items.map(function (item, index) {
        return h(BreadcrumbItem, {
          key: item.hasOwnProperty('key') ? item.key : index,
          props: {
            active: item.hasOwnProperty('active') ? item.active : index === props.items.length - 1,
            href: item.href,
            target: item.target,
            to: item.to,
            replace: item.replace,
            append: item.append,
            exact: item.exact
          }
        }, item.text);
      });
    }
    return h('ol', mergeData$1(data, { class: 'breadcrumb' }), slot);
  },

  props: {
    items: Array
  }
};

var BtnToolbar = {
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children,
        data = _ref.data;

    return h('div', mergeData$1(data, {
      class: {
        'btn-toolbar': true
      },
      attrs: {
        role: 'toolbar'
      }
    }), children);
  }
};

var MultiSelect = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('dropdown', { ref: "dropdown", style: _vm.containerStyles, attrs: { "not-close-elements": _vm.els, "append-to-body": _vm.appendToBody, "disabled": _vm.disabled }, nativeOn: { "keydown": function keydown($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "esc", 27, $event.key)) {
            return null;
          }_vm.showDropdown = false;
        } }, model: { value: _vm.showDropdown, callback: function callback($$v) {
          _vm.showDropdown = $$v;
        }, expression: "showDropdown" } }, [_c('div', { staticClass: "form-control dropdown-toggle clearfix", class: _vm.selectClasses, attrs: { "disabled": _vm.disabled, "tabindex": "0" }, on: { "click": function click($event) {
          _vm.showDropdown = true;
        }, "focus": function focus($event) {
          _vm.$emit('focus', $event);
        }, "blur": function blur($event) {
          _vm.$emit('blur', $event);
        }, "keydown": [function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40, $event.key)) {
            return null;
          }$event.preventDefault();_vm.goNextOption($event);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "up", 38, $event.key)) {
            return null;
          }$event.preventDefault();_vm.goPrevOption($event);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key)) {
            return null;
          }$event.preventDefault();_vm.selectOption($event);
        }] } }, [_c('div', { class: _vm.selectTextClasses, staticStyle: { "display": "inline-block", "vertical-align": "middle" } }, [_vm._v(_vm._s(_vm.selectedText))]), _vm._v(" "), _c('div', { staticClass: "pull-right", staticStyle: { "display": "inline-block", "vertical-align": "middle" } }, [_c('span', [_vm._v(" ")]), _vm._v(" "), _c('span', { staticClass: "caret" })])]), _vm._v(" "), _c('template', { slot: "dropdown" }, [_vm.filterable ? _c('li', { staticStyle: { "padding": "4px 8px" } }, [_c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.filterInput, expression: "filterInput" }], ref: "filterInput", staticClass: "form-control input-sm", attrs: { "type": "text", "placeholder": _vm.filterPlaceholder || _vm.t('uiv.multiSelect.filterPlaceholder') }, domProps: { "value": _vm.filterInput }, on: { "keydown": [function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "down", 40, $event.key)) {
            return null;
          }$event.preventDefault();_vm.goNextOption($event);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "up", 38, $event.key)) {
            return null;
          }$event.preventDefault();_vm.goPrevOption($event);
        }, function ($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key)) {
            return null;
          }$event.preventDefault();_vm.selectOption($event);
        }], "input": function input($event) {
          if ($event.target.composing) {
            return;
          }_vm.filterInput = $event.target.value;
        } } })]) : _vm._e(), _vm._v(" "), _vm._l(_vm.groupedOptions, function (item) {
      return [item.$group ? _c('li', { staticClass: "dropdown-header", domProps: { "textContent": _vm._s(item.$group) } }) : _vm._e(), _vm._v(" "), _vm._l(item.options, function (_item) {
        return [_c('li', { class: _vm.itemClasses(_item), on: { "click": function click($event) {
              _vm.toggle(_item);
            }, "mouseenter": function mouseenter($event) {
              _vm.currentActive = -1;
            } } }, [_vm.isItemSelected(_item) ? _c('a', { attrs: { "role": "button" } }, [_c('b', [_vm._v(_vm._s(_item[_vm.labelKey]))]), _vm._v(" "), _vm.selectedIcon ? _c('span', { class: _vm.selectedIconClasses }) : _vm._e()]) : _c('a', { attrs: { "role": "button" } }, [_c('span', [_vm._v(_vm._s(_item[_vm.labelKey]))])])])];
      })];
    })], 2)], 2);
  }, staticRenderFns: [],
  mixins: [Local],
  components: { Dropdown: Dropdown },
  props: {
    value: {
      type: Array,
      required: true
    },
    options: {
      type: Array,
      required: true
    },
    labelKey: {
      type: String,
      default: 'label'
    },
    valueKey: {
      type: String,
      default: 'value'
    },
    limit: {
      type: Number,
      default: 0
    },
    size: String,
    placeholder: String,
    split: {
      type: String,
      default: ', '
    },
    disabled: {
      type: Boolean,
      default: false
    },
    appendToBody: {
      type: Boolean,
      default: false
    },
    block: {
      type: Boolean,
      default: false
    },
    collapseSelected: {
      type: Boolean,
      default: false
    },
    filterable: {
      type: Boolean,
      default: false
    },
    filterAutoFocus: {
      type: Boolean,
      default: true
    },
    filterFunction: Function,
    filterPlaceholder: String,
    selectedIcon: {
      type: String,
      default: 'glyphicon glyphicon-ok'
    },
    itemSelectedClass: String
  },
  data: function data() {
    return {
      showDropdown: false,
      els: [],
      filterInput: '',
      currentActive: -1
    };
  },

  computed: {
    containerStyles: function containerStyles() {
      return {
        width: this.block ? '100%' : ''
      };
    },
    filteredOptions: function filteredOptions() {
      var _this = this;

      if (this.filterable && this.filterInput) {
        if (this.filterFunction) {
          return this.filterFunction(this.filterInput);
        } else {
          var filterInput = this.filterInput.toLowerCase();
          return this.options.filter(function (v) {
            return v[_this.valueKey].toString().toLowerCase().indexOf(filterInput) >= 0 || v[_this.labelKey].toString().toLowerCase().indexOf(filterInput) >= 0;
          });
        }
      } else {
        return this.options;
      }
    },
    groupedOptions: function groupedOptions() {
      var _this2 = this;

      return this.filteredOptions.map(function (v) {
        return v.group;
      }).filter(onlyUnique).map(function (v) {
        return {
          options: _this2.filteredOptions.filter(function (option) {
            return option.group === v;
          }),
          $group: v
        };
      });
    },
    flatternGroupedOptions: function flatternGroupedOptions() {
      if (this.groupedOptions && this.groupedOptions.length) {
        var result = [];
        this.groupedOptions.forEach(function (v) {
          result = result.concat(v.options);
        });
        return result;
      } else {
        return [];
      }
    },
    selectClasses: function selectClasses() {
      return defineProperty$1({}, 'input-' + this.size, this.size);
    },
    selectedIconClasses: function selectedIconClasses() {
      var _ref2;

      return _ref2 = {}, defineProperty$1(_ref2, this.selectedIcon, true), defineProperty$1(_ref2, 'pull-right', true), _ref2;
    },
    selectTextClasses: function selectTextClasses() {
      return {
        'text-muted': this.value.length === 0
      };
    },
    labelValue: function labelValue() {
      var _this3 = this;

      var optionsByValue = this.options.map(function (v) {
        return v[_this3.valueKey];
      });
      return this.value.map(function (v) {
        var index = optionsByValue.indexOf(v);
        return index >= 0 ? _this3.options[index][_this3.labelKey] : v;
      });
    },
    selectedText: function selectedText() {
      if (this.value.length) {
        var labelValue = this.labelValue;
        if (this.collapseSelected) {
          var str = labelValue[0];
          str += labelValue.length > 1 ? this.split + '+' + (labelValue.length - 1) : '';
          return str;
        } else {
          return labelValue.join(this.split);
        }
      } else {
        return this.placeholder || this.t('uiv.multiSelect.placeholder');
      }
    }
  },
  watch: {
    showDropdown: function showDropdown(v) {
      var _this4 = this;

      // clear filter input when dropdown toggles
      this.filterInput = '';
      this.currentActive = -1;
      this.$emit('visible-change', v);
      if (v && this.filterable && this.filterAutoFocus) {
        this.$nextTick(function () {
          _this4.$refs.filterInput.focus();
        });
      }
    }
  },
  mounted: function mounted() {
    this.els = [this.$el];
  },

  methods: {
    goPrevOption: function goPrevOption() {
      if (!this.showDropdown) {
        return;
      }
      this.currentActive > 0 ? this.currentActive-- : this.currentActive = this.flatternGroupedOptions.length - 1;
    },
    goNextOption: function goNextOption() {
      if (!this.showDropdown) {
        return;
      }
      this.currentActive < this.flatternGroupedOptions.length - 1 ? this.currentActive++ : this.currentActive = 0;
    },
    selectOption: function selectOption() {
      var index = this.currentActive;
      var options = this.flatternGroupedOptions;
      if (!this.showDropdown) {
        this.showDropdown = true;
      } else if (index >= 0 && index < options.length) {
        this.toggle(options[index]);
      }
    },
    itemClasses: function itemClasses(item) {
      var result = {
        disabled: item.disabled,
        active: this.currentActive === this.flatternGroupedOptions.indexOf(item)
      };
      if (this.itemSelectedClass) {
        result[this.itemSelectedClass] = this.isItemSelected(item);
      }
      return result;
    },
    isItemSelected: function isItemSelected(item) {
      return this.value.indexOf(item[this.valueKey]) >= 0;
    },
    toggle: function toggle(item) {
      if (item.disabled) {
        return;
      }
      var value = item[this.valueKey];
      var index = this.value.indexOf(value);
      if (this.limit === 1) {
        var newValue = index >= 0 ? [] : [value];
        this.$emit('input', newValue);
        this.$emit('change', newValue);
      } else {
        if (index >= 0) {
          this.value.splice(index, 1);
          this.$emit('change', this.value);
        } else if (this.limit === 0 || this.value.length < this.limit) {
          this.value.push(value);
          this.$emit('change', this.value);
        } else {
          this.$emit('limit-exceed');
        }
      }
    }
  }
};

var Navbar = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('nav', { class: _vm.navClasses }, [_c('div', { class: _vm.fluid ? 'container-fluid' : 'container' }, [_c('div', { staticClass: "navbar-header" }, [_vm._t("collapse-btn", [_c('button', { staticClass: "navbar-toggle collapsed", attrs: { "type": "button" }, on: { "click": _vm.toggle } }, [_c('span', { staticClass: "sr-only" }, [_vm._v("Toggle navigation")]), _vm._v(" "), _c('span', { staticClass: "icon-bar" }), _vm._v(" "), _c('span', { staticClass: "icon-bar" }), _vm._v(" "), _c('span', { staticClass: "icon-bar" })])]), _vm._v(" "), _vm._t("brand")], 2), _vm._v(" "), _vm._t("default"), _vm._v(" "), _c('collapse', { staticClass: "navbar-collapse", model: { value: _vm.show, callback: function callback($$v) {
          _vm.show = $$v;
        }, expression: "show" } }, [_vm._t("collapse")], 2)], 2)]);
  }, staticRenderFns: [],
  components: { Collapse: Collapse },
  props: {
    value: Boolean,
    fluid: {
      type: Boolean,
      default: true
    },
    fixedTop: Boolean,
    fixedBottom: Boolean,
    staticTop: Boolean,
    inverse: Boolean
  },
  data: function data() {
    return {
      show: false
    };
  },

  computed: {
    navClasses: function navClasses() {
      return {
        navbar: true,
        'navbar-default': !this.inverse,
        'navbar-inverse': this.inverse,
        'navbar-static-top': this.staticTop,
        'navbar-fixed-bottom': this.fixedBottom,
        'navbar-fixed-top': this.fixedTop
      };
    }
  },
  mounted: function mounted() {
    this.show = !!this.value;
  },

  watch: {
    value: function value(v) {
      this.show = v;
    }
  },
  methods: {
    toggle: function toggle() {
      this.show = !this.show;
      this.$emit('input', this.show);
    }
  }
};

var NavbarNav = {
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children,
        data = _ref.data,
        props = _ref.props;

    return h('ul', mergeData$1(data, {
      class: {
        nav: true,
        'navbar-nav': true,
        'navbar-left': props.left,
        'navbar-right': props.right
      }
    }), children);
  },

  props: {
    left: Boolean,
    right: Boolean
  }
};

var NavbarForm = {
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children,
        data = _ref.data,
        props = _ref.props;

    return h('form', mergeData$1(data, {
      class: {
        'navbar-form': true,
        'navbar-left': props.left,
        'navbar-right': props.right
      }
    }), children);
  },

  props: {
    left: Boolean,
    right: Boolean
  }
};

var NavbarText = {
  functional: true,
  render: function render(h, _ref) {
    var children = _ref.children,
        data = _ref.data,
        props = _ref.props;

    return h('p', mergeData$1(data, {
      class: {
        'navbar-text': true,
        'navbar-left': props.left,
        'navbar-right': props.right
      }
    }), children);
  },

  props: {
    left: Boolean,
    right: Boolean
  }
};



var components$1 = Object.freeze({
	Carousel: Carousel,
	Slide: Slide,
	Collapse: Collapse,
	Dropdown: Dropdown,
	Modal: Modal,
	Tab: Tab,
	Tabs: Tabs,
	DatePicker: DatePicker,
	Affix: Affix,
	Alert: Alert,
	Pagination: Pagination,
	Tooltip: Tooltip,
	Popover: Popover,
	TimePicker: TimePicker,
	Typeahead: Typeahead,
	ProgressBar: ProgressBar,
	ProgressBarStack: ProgressBarStack,
	Breadcrumbs: Breadcrumbs,
	BreadcrumbItem: BreadcrumbItem,
	Btn: Btn,
	BtnGroup: BtnGroup,
	BtnToolbar: BtnToolbar,
	MultiSelect: MultiSelect,
	Navbar: Navbar,
	NavbarNav: NavbarNav,
	NavbarForm: NavbarForm,
	NavbarText: NavbarText
});

var INSTANCE = '_uiv_tooltip_instance';

var bind$1$1 = function bind(el, binding) {
  // console.log('bind')
  unbind$1(el);
  var Constructor = Vue.extend(Tooltip);
  var vm = new Constructor({
    propsData: {
      target: el,
      appendTo: binding.arg && '#' + binding.arg,
      text: binding.value && binding.value.toString()
    }
  });
  var options = [];
  for (var key in binding.modifiers) {
    if (binding.modifiers.hasOwnProperty(key) && binding.modifiers[key]) {
      options.push(key);
    }
  }
  options.forEach(function (option) {
    if (/(top)|(left)|(right)|(bottom)/.test(option)) {
      vm.placement = option;
    } else if (/(hover)|(focus)|(click)/.test(option)) {
      vm.trigger = option;
    } else if (/unenterable/.test(option)) {
      vm.enterable = false;
    }
  });
  vm.$mount();
  el[INSTANCE] = vm;
};

var unbind$1 = function unbind(el) {
  // console.log('unbind')
  var vm = el[INSTANCE];
  if (vm) {
    vm.$destroy();
  }
  delete el[INSTANCE];
};

var update$1 = function update(el, binding) {
  // console.log('update')
  if (binding.value !== binding.oldValue) {
    bind$1$1(el, binding);
  }
};

var tooltip = { bind: bind$1$1, unbind: unbind$1, update: update$1 };

var INSTANCE$1 = '_uiv_popover_instance';

var bind$2 = function bind(el, binding) {
  // console.log('bind')
  unbind$2(el);
  var Constructor = Vue.extend(Popover);
  var vm = new Constructor({
    propsData: {
      target: el,
      appendTo: binding.arg && '#' + binding.arg,
      title: binding.value && binding.value.title && binding.value.title.toString(),
      content: binding.value && binding.value.content && binding.value.content.toString()
    }
  });
  var options = [];
  for (var key in binding.modifiers) {
    if (binding.modifiers.hasOwnProperty(key) && binding.modifiers[key]) {
      options.push(key);
    }
  }
  options.forEach(function (option) {
    if (/(top)|(left)|(right)|(bottom)/.test(option)) {
      vm.placement = option;
    } else if (/(hover)|(focus)|(click)/.test(option)) {
      vm.trigger = option;
    } else if (/unenterable/.test(option)) {
      vm.enterable = false;
    }
  });
  vm.$mount();
  el[INSTANCE$1] = vm;
};

var unbind$2 = function unbind(el) {
  // console.log('unbind')
  var vm = el[INSTANCE$1];
  if (vm) {
    vm.$destroy();
  }
  delete el[INSTANCE$1];
};

var update$2 = function update(el, binding) {
  // console.log('update')
  if (binding.value !== binding.oldValue) {
    bind$2(el, binding);
  }
};

var popover = { bind: bind$2, unbind: unbind$2, update: update$2 };

function ScrollSpy(element) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'body';
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  this.el = element;
  this.opts = _extends$1({}, ScrollSpy.DEFAULTS, options);
  this.opts.target = target;
  if (target === 'body') {
    this.scrollElement = window;
  } else {
    this.scrollElement = document.querySelector('[id=' + target + ']');
  }
  this.selector = 'li > a';
  this.offsets = [];
  this.targets = [];
  this.activeTarget = null;
  this.scrollHeight = 0;
  if (this.scrollElement) {
    this.refresh();
    this.process();
  }
}

ScrollSpy.DEFAULTS = {
  offset: 10,
  callback: function callback(ele) {
    return 0;
  }
};

ScrollSpy.prototype.getScrollHeight = function () {
  return this.scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
};

ScrollSpy.prototype.refresh = function () {
  var _this = this;

  this.offsets = [];
  this.targets = [];
  this.scrollHeight = this.getScrollHeight();
  var list = nodeListToArray(this.el.querySelectorAll(this.selector));
  var isWindow = this.scrollElement === window;
  list.map(function (ele) {
    var href = ele.getAttribute('href');
    if (/^#./.test(href)) {
      var doc = document.documentElement;
      var rootEl = isWindow ? document : _this.scrollElement;
      var hrefEl = rootEl.querySelector('[id=\'' + href.slice(1) + '\']');
      var windowScrollTop = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
      var offset = isWindow ? hrefEl.getBoundingClientRect().top + windowScrollTop : hrefEl.offsetTop + _this.scrollElement.scrollTop;
      return [offset, href];
    } else {
      return null;
    }
  }).filter(function (item) {
    return item;
  }).sort(function (a, b) {
    return a[0] - b[0];
  }).forEach(function (item) {
    _this.offsets.push(item[0]);
    _this.targets.push(item[1]);
  });
  // console.log(this.offsets, this.targets)
};

ScrollSpy.prototype.process = function () {
  var isWindow = this.scrollElement === window;
  var scrollTop = (isWindow ? window.pageYOffset : this.scrollElement.scrollTop) + this.opts.offset;
  var scrollHeight = this.getScrollHeight();
  var scrollElementHeight = isWindow ? getViewportSize().height : this.scrollElement.getBoundingClientRect().height;
  var maxScroll = this.opts.offset + scrollHeight - scrollElementHeight;
  var offsets = this.offsets;
  var targets = this.targets;
  var activeTarget = this.activeTarget;
  var i = void 0;
  if (this.scrollHeight !== scrollHeight) {
    this.refresh();
  }
  if (scrollTop >= maxScroll) {
    return activeTarget !== (i = targets[targets.length - 1]) && this.activate(i);
  }
  if (activeTarget && scrollTop < offsets[0]) {
    this.activeTarget = null;
    return this.clear();
  }
  for (i = offsets.length; i--;) {
    activeTarget !== targets[i] && scrollTop >= offsets[i] && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1]) && this.activate(targets[i]);
  }
};

ScrollSpy.prototype.activate = function (target) {
  this.activeTarget = target;
  this.clear();
  var selector = this.selector + '[data-target="' + target + '"],' + this.selector + '[href="' + target + '"]';
  var activeCallback = this.opts.callback;
  var active = nodeListToArray(this.el.querySelectorAll(selector));
  active.forEach(function (ele) {
    getParents(ele, 'li').forEach(function (item) {
      addClass$2(item, 'active');
      activeCallback(item);
    });
    if (getParents(ele, '.dropdown-menu').length) {
      addClass$2(getClosest(ele, 'li.dropdown'), 'active');
    }
  });
};

ScrollSpy.prototype.clear = function () {
  var _this2 = this;

  var list = nodeListToArray(this.el.querySelectorAll(this.selector));
  list.forEach(function (ele) {
    getParents(ele, '.active', _this2.opts.target).forEach(function (item) {
      removeClass$2(item, 'active');
    });
  });
};

var INSTANCE$2 = '_uiv_scrollspy_instance';
var events$1$1 = [EVENTS.RESIZE, EVENTS.SCROLL];

var bind$3 = function bind(el, binding) {
  // console.log('bind')
  unbind$3(el);
};

var inserted = function inserted(el, binding) {
  var scrollSpy = new ScrollSpy(el, binding.arg, binding.value);
  if (scrollSpy.scrollElement) {
    scrollSpy.handler = function () {
      scrollSpy.process();
    };
    events$1$1.forEach(function (event) {
      on(scrollSpy.scrollElement, event, scrollSpy.handler);
    });
  }
  el[INSTANCE$2] = scrollSpy;
};

var unbind$3 = function unbind(el) {
  // console.log('unbind')
  var instance = el[INSTANCE$2];
  if (instance && instance.scrollElement) {
    events$1$1.forEach(function (event) {
      off(instance.scrollElement, event, instance.handler);
    });
    delete el[INSTANCE$2];
  }
};

var update$3 = function update(el, binding) {
  // console.log('update')
  if (binding.value !== binding.oldValue) {
    bind$3(el, binding);
    inserted(el, binding);
  }
};

var scrollspy = { bind: bind$3, unbind: unbind$3, update: update$3, inserted: inserted };



var directives$1 = Object.freeze({
	tooltip: tooltip,
	popover: popover,
	scrollspy: scrollspy
});

var TYPES = {
  ALERT: 0,
  CONFIRM: 1,
  PROMPT: 2
};

var MessageBox = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('modal', { ref: "modal", class: _vm.customClass, attrs: { "auto-focus": "", "size": _vm.size, "title": _vm.title, "header": !!_vm.title, "backdrop": _vm.closeOnBackdropClick, "cancel-text": _vm.cancelText, "ok-text": _vm.okText }, on: { "hide": _vm.cb }, model: { value: _vm.show, callback: function callback($$v) {
          _vm.show = $$v;
        }, expression: "show" } }, [_vm.html ? _c('div', { domProps: { "innerHTML": _vm._s(_vm.content) } }) : _c('p', [_vm._v(_vm._s(_vm.content))]), _vm._v(" "), _vm.type === _vm.TYPES.PROMPT ? _c('div', [_c('div', { staticClass: "form-group", class: { 'has-error': _vm.inputNotValid } }, [_vm.inputType === 'checkbox' ? _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.input, expression: "input" }], ref: "input", staticClass: "form-control", attrs: { "required": "", "data-action": "auto-focus", "type": "checkbox" }, domProps: { "checked": Array.isArray(_vm.input) ? _vm._i(_vm.input, null) > -1 : _vm.input }, on: { "change": [function ($event) {
          var $$a = _vm.input,
              $$el = $event.target,
              $$c = $$el.checked ? true : false;if (Array.isArray($$a)) {
            var $$v = null,
                $$i = _vm._i($$a, $$v);if ($$el.checked) {
              $$i < 0 && (_vm.input = $$a.concat([$$v]));
            } else {
              $$i > -1 && (_vm.input = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
            }
          } else {
            _vm.input = $$c;
          }
        }, function ($event) {
          _vm.dirty = true;
        }], "keyup": function keyup($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key)) {
            return null;
          }_vm.validate($event);
        } } }) : _vm.inputType === 'radio' ? _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.input, expression: "input" }], ref: "input", staticClass: "form-control", attrs: { "required": "", "data-action": "auto-focus", "type": "radio" }, domProps: { "checked": _vm._q(_vm.input, null) }, on: { "change": [function ($event) {
          _vm.input = null;
        }, function ($event) {
          _vm.dirty = true;
        }], "keyup": function keyup($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key)) {
            return null;
          }_vm.validate($event);
        } } }) : _c('input', { directives: [{ name: "model", rawName: "v-model", value: _vm.input, expression: "input" }], ref: "input", staticClass: "form-control", attrs: { "required": "", "data-action": "auto-focus", "type": _vm.inputType }, domProps: { "value": _vm.input }, on: { "change": function change($event) {
          _vm.dirty = true;
        }, "keyup": function keyup($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key)) {
            return null;
          }_vm.validate($event);
        }, "input": function input($event) {
          if ($event.target.composing) {
            return;
          }_vm.input = $event.target.value;
        } } }), _vm._v(" "), _c('span', { directives: [{ name: "show", rawName: "v-show", value: _vm.inputNotValid, expression: "inputNotValid" }], staticClass: "help-block" }, [_vm._v(_vm._s(_vm.inputError))])])]) : _vm._e(), _vm._v(" "), _vm.type === _vm.TYPES.ALERT ? _c('template', { slot: "footer" }, [_c('btn', { attrs: { "type": _vm.okType, "data-action": "auto-focus" }, on: { "click": function click($event) {
          _vm.toggle(false, 'ok');
        } } }, [_vm._v(_vm._s(_vm.okBtnText))])], 1) : _c('template', { slot: "footer" }, [_c('btn', { attrs: { "type": _vm.cancelType }, on: { "click": function click($event) {
          _vm.toggle(false, 'cancel');
        } } }, [_vm._v(_vm._s(_vm.cancelBtnText))]), _vm._v(" "), _vm.type === _vm.TYPES.CONFIRM ? _c('btn', { attrs: { "type": _vm.okType, "data-action": "auto-focus" }, on: { "click": function click($event) {
          _vm.toggle(false, 'ok');
        } } }, [[_vm._v(_vm._s(_vm.okBtnText))]], 2) : _c('btn', { attrs: { "type": _vm.okType }, on: { "click": _vm.validate } }, [_vm._v(_vm._s(_vm.okBtnText))])], 1)], 2);
  }, staticRenderFns: [],
  mixins: [Local],
  components: { Modal: Modal, Btn: Btn },
  props: {
    backdrop: null,
    title: String,
    content: String,
    html: {
      type: Boolean,
      default: false
    },
    okText: String,
    okType: {
      type: String,
      default: 'primary'
    },
    cancelText: String,
    cancelType: {
      type: String,
      default: 'default'
    },
    type: {
      type: Number,
      default: TYPES.ALERT
    },
    size: {
      type: String,
      default: 'sm'
    },
    cb: {
      type: Function,
      required: true
    },
    validator: {
      type: Function,
      default: function _default() {
        return null;
      }
    },
    customClass: null,
    defaultValue: String,
    inputType: {
      type: String,
      default: 'text'
    }
  },
  data: function data() {
    return {
      TYPES: TYPES,
      show: false,
      input: '',
      dirty: false
    };
  },
  mounted: function mounted() {
    if (this.defaultValue) {
      this.input = this.defaultValue;
    }
  },

  computed: {
    closeOnBackdropClick: function closeOnBackdropClick() {
      // use backdrop prop if exist
      // otherwise, only not available if render as alert
      return isExist(this.backdrop) ? Boolean(this.backdrop) : this.type !== TYPES.ALERT;
    },
    inputError: function inputError() {
      return this.validator(this.input);
    },
    inputNotValid: function inputNotValid() {
      return this.dirty && this.inputError;
    },
    okBtnText: function okBtnText() {
      return this.okText || this.t('uiv.modal.ok');
    },
    cancelBtnText: function cancelBtnText() {
      return this.cancelText || this.t('uiv.modal.cancel');
    }
  },
  methods: {
    toggle: function toggle(show, msg) {
      this.$refs.modal.toggle(show, msg);
    },
    validate: function validate() {
      this.dirty = true;
      if (!isExist(this.inputError)) {
        this.toggle(false, { value: this.input });
      }
    }
  }
};

var queue$1 = [];

var destroy = function destroy(instance) {
  // console.log('destroyModal')
  removeFromDom(instance.$el);
  instance.$destroy();
  spliceIfExist(queue$1, instance);
};

// handel cancel or ok for confirm & prompt
var shallResolve = function shallResolve(type, msg) {
  if (type === TYPES.CONFIRM) {
    // is confirm
    return msg === 'ok';
  } else {
    // is prompt
    return isExist(msg) && isString$1(msg.value);
  }
};

var init = function init(type, options, _cb) {
  var resolve = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var reject = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

  var i18n = this.$i18n;
  var instance = new Vue({
    extends: MessageBox,
    i18n: i18n,
    propsData: _extends$1({
      type: type
    }, options, {
      cb: function cb(msg) {
        destroy(instance);
        if (isFunction$1(_cb)) {
          if (type === TYPES.CONFIRM) {
            shallResolve(type, msg) ? _cb(null, msg) : _cb(msg);
          } else if (type === TYPES.PROMPT) {
            shallResolve(type, msg) ? _cb(null, msg.value) : _cb(msg);
          } else {
            _cb(msg);
          }
        } else if (resolve && reject) {
          if (type === TYPES.CONFIRM) {
            shallResolve(type, msg) ? resolve(msg) : reject(msg);
          } else if (type === TYPES.PROMPT) {
            shallResolve(type, msg) ? resolve(msg.value) : reject(msg);
          } else {
            resolve(msg);
          }
        }
      }
    })
  });
  instance.$mount();
  document.body.appendChild(instance.$el);
  instance.show = true;
  queue$1.push(instance);
};

var initModal = function initModal(type) {
  var _this = this;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var cb = arguments[2];

  if (isPromiseSupported()) {
    return new Promise(function (resolve, reject) {
      init.apply(_this, [type, options, cb, resolve, reject]);
    });
  } else {
    init.apply(this, [type, options, cb]);
  }
};

var alert$1 = function alert(options, cb) {
  return initModal.apply(this, [TYPES.ALERT, options, cb]);
};

var confirm = function confirm(options, cb) {
  return initModal.apply(this, [TYPES.CONFIRM, options, cb]);
};

var prompt = function prompt(options, cb) {
  return initModal.apply(this, [TYPES.PROMPT, options, cb]);
};

var messageBox = { alert: alert$1, confirm: confirm, prompt: prompt };

var TYPES$1 = {
  SUCCESS: 'success',
  INFO: 'info',
  DANGER: 'danger',
  WARNING: 'warning'
};

var PLACEMENTS$1 = {
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right'
};

var IN_CLASS$1 = 'in';
var ICON = 'glyphicon';
var WIDTH = 300;
var TRANSITION_DURATION = 300;

var Notification = { render: function render() {
    var _vm = this;var _h = _vm.$createElement;var _c = _vm._self._c || _h;return _c('alert', { staticClass: "fade", class: _vm.customClass, style: _vm.styles, attrs: { "type": _vm.type, "duration": _vm.duration, "dismissible": _vm.dismissible }, on: { "dismissed": _vm.onDismissed } }, [_c('div', { staticClass: "media", staticStyle: { "margin": "0" } }, [_vm.icons ? _c('div', { staticClass: "media-left" }, [_c('span', { class: _vm.icons, staticStyle: { "font-size": "1.5em" } })]) : _vm._e(), _vm._v(" "), _c('div', { staticClass: "media-body" }, [_vm.title ? _c('div', { staticClass: "media-heading" }, [_c('b', [_vm._v(_vm._s(_vm.title))])]) : _vm._e(), _vm._v(" "), _vm.html ? _c('div', { domProps: { "innerHTML": _vm._s(_vm.content) } }) : _c('div', [_vm._v(_vm._s(_vm.content))])])])]);
  }, staticRenderFns: [],
  components: { Alert: Alert },
  props: {
    title: String,
    content: String,
    html: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 5000
    },
    dismissible: {
      type: Boolean,
      default: true
    },
    type: String,
    placement: String,
    icon: String,
    customClass: null,
    cb: {
      type: Function,
      required: true
    },
    queue: {
      type: Array,
      required: true
    },
    offsetY: {
      type: Number,
      default: 15
    },
    offsetX: {
      type: Number,
      default: 15
    },
    offset: {
      type: Number,
      default: 15
    }
  },
  data: function data() {
    return {
      height: 0,
      top: 0,
      horizontal: this.placement === PLACEMENTS$1.TOP_LEFT || this.placement === PLACEMENTS$1.BOTTOM_LEFT ? 'left' : 'right',
      vertical: this.placement === PLACEMENTS$1.TOP_LEFT || this.placement === PLACEMENTS$1.TOP_RIGHT ? 'top' : 'bottom'
    };
  },
  created: function created() {
    // get prev notifications total height in the queue
    this.top = this.getTotalHeightOfQueue(this.queue);
  },
  mounted: function mounted() {
    var _this = this;

    var el = this.$el;
    el.style[this.vertical] = this.top + 'px';
    this.$nextTick(function () {
      el.style[_this.horizontal] = '-' + WIDTH + 'px';
      _this.height = el.offsetHeight;
      el.style[_this.horizontal] = _this.offsetX + 'px';
      addClass$2(el, IN_CLASS$1);
    });
  },

  computed: {
    styles: function styles() {
      var _ref;

      var queue = this.queue;
      var thisIndex = queue.indexOf(this);
      return _ref = {
        position: 'fixed'
      }, defineProperty$1(_ref, this.vertical, this.getTotalHeightOfQueue(queue, thisIndex) + 'px'), defineProperty$1(_ref, 'width', WIDTH + 'px'), defineProperty$1(_ref, 'transition', 'all ' + TRANSITION_DURATION / 1000 + 's ease-in-out'), _ref;
    },
    icons: function icons() {
      if (isString$1(this.icon)) {
        return this.icon;
      }
      switch (this.type) {
        case TYPES$1.INFO:
        case TYPES$1.WARNING:
          return ICON + ' ' + ICON + '-info-sign';
        case TYPES$1.SUCCESS:
          return ICON + ' ' + ICON + '-ok-sign';
        case TYPES$1.DANGER:
          return ICON + ' ' + ICON + '-remove-sign';
        default:
          return null;
      }
    }
  },
  methods: {
    getTotalHeightOfQueue: function getTotalHeightOfQueue(queue) {
      var lastIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : queue.length;

      var totalHeight = this.offsetY;
      for (var i = 0; i < lastIndex; i++) {
        totalHeight += queue[i].height + this.offset;
      }
      return totalHeight;
    },
    onDismissed: function onDismissed() {
      removeClass$2(this.$el, IN_CLASS$1);
      setTimeout(this.cb, TRANSITION_DURATION);
    }
  }
};

var _queues;

var queues = (_queues = {}, defineProperty$1(_queues, PLACEMENTS$1.TOP_LEFT, []), defineProperty$1(_queues, PLACEMENTS$1.TOP_RIGHT, []), defineProperty$1(_queues, PLACEMENTS$1.BOTTOM_LEFT, []), defineProperty$1(_queues, PLACEMENTS$1.BOTTOM_RIGHT, []), _queues);

var destroy$1 = function destroy(queue, instance) {
  // console.log('destroyNotification')
  removeFromDom(instance.$el);
  instance.$destroy();
  spliceIfExist(queue, instance);
};

var init$1 = function init(options, _cb) {
  var resolve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var reject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var placement = options.placement;
  var queue = queues[placement];
  // check if placement is valid
  if (!isExist(queue)) {
    return;
  }
  var instance = new Vue({
    extends: Notification,
    propsData: _extends$1({
      queue: queue,
      placement: placement
    }, options, {
      cb: function cb(msg) {
        destroy$1(queue, instance);
        if (isFunction$1(_cb)) {
          _cb(msg);
        } else if (resolve && reject) {
          resolve(msg);
        }
      }
    })
  });
  instance.$mount();
  document.body.appendChild(instance.$el);
  queue.push(instance);
};

var notify = function notify() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var cb = arguments[1];

  // simplify usage: pass string as option.content
  if (isString$1(options)) {
    options = {
      content: options
    };
  }
  // set default placement as top-right
  if (!isExist(options.placement)) {
    options.placement = PLACEMENTS$1.TOP_RIGHT;
  }
  if (isPromiseSupported()) {
    return new Promise(function (resolve, reject) {
      init$1(options, cb, resolve, reject);
    });
  } else {
    init$1(options, cb);
  }
};

var notification = { notify: notify };



var services = Object.freeze({
	MessageBox: messageBox,
	Notification: notification
});

var install$1 = function install(Vue$$1) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  // Setup language, en-US for default
  locale$1$1.use(options.locale);
  locale$1$1.i18n(options.i18n);
  // Register components
  Object.keys(components$1).forEach(function (key) {
    var _key = options.prefix ? options.prefix + key : key;
    Vue$$1.component(_key, components$1[key]);
  });
  // Register directives
  Object.keys(directives$1).forEach(function (key) {
    var _key = options.prefix ? options.prefix + '-' + key : key;
    Vue$$1.directive(_key, directives$1[key]);
  });
  // Register services
  Object.keys(services).forEach(function (key) {
    var service = services[key];
    Object.keys(service).forEach(function (serviceKey) {
      var _key = options.prefix ? options.prefix + '_' + serviceKey : serviceKey;
      Vue$$1.prototype['$' + _key] = service[serviceKey];
    });
  });
};





var uiv = Object.freeze({
	Carousel: Carousel,
	Slide: Slide,
	Collapse: Collapse,
	Dropdown: Dropdown,
	Modal: Modal,
	Tab: Tab,
	Tabs: Tabs,
	DatePicker: DatePicker,
	Affix: Affix,
	Alert: Alert,
	Pagination: Pagination,
	Tooltip: Tooltip,
	Popover: Popover,
	TimePicker: TimePicker,
	Typeahead: Typeahead,
	ProgressBar: ProgressBar,
	ProgressBarStack: ProgressBarStack,
	Breadcrumbs: Breadcrumbs,
	BreadcrumbItem: BreadcrumbItem,
	Btn: Btn,
	BtnGroup: BtnGroup,
	BtnToolbar: BtnToolbar,
	MultiSelect: MultiSelect,
	Navbar: Navbar,
	NavbarNav: NavbarNav,
	NavbarForm: NavbarForm,
	NavbarText: NavbarText,
	tooltip: tooltip,
	popover: popover,
	scrollspy: scrollspy,
	MessageBox: messageBox,
	Notification: notification,
	install: install$1
});

var locale$2 = {
  uiv: {
    datePicker: {
      clear: '清空',
      today: '今天',
      month: '月',
      month1: '一月',
      month2: '二月',
      month3: '三月',
      month4: '四月',
      month5: '五月',
      month6: '六月',
      month7: '七月',
      month8: '八月',
      month9: '九月',
      month10: '十月',
      month11: '十一月',
      month12: '十二月',
      year: '年',
      week1: '一',
      week2: '二',
      week3: '三',
      week4: '四',
      week5: '五',
      week6: '六',
      week7: '日'
    },
    timePicker: {
      am: '上午',
      pm: '下午'
    },
    modal: {
      cancel: '取消',
      ok: '确认'
    },
    multiSelect: {
      placeholder: '选择...',
      filterPlaceholder: '搜索...'
    }
  }
};

var components$2 = [{
	name: "date",
	fn: function fn(value, fmt) {

		var fmt = typeof fmt !== "string" ? "yyyy-MM-dd HH:mm:ss" : fmt;
		var txts = value.toString().replace("/Date(", "").replace(")/", "");
		var times = Number(txts);
		times = isNaN(times) ? new Date(value).getTime() : times;
		var dt = new Date(Number(times.toString()));
		var o = {
			"M+": dt.getMonth() + 1, //月份 
			"d+": dt.getDate(), //日 
			"H+": dt.getHours(), //小时 
			"m+": dt.getMinutes(), //分 
			"s+": dt.getSeconds(), //秒 
			"q+": Math.floor((dt.getMonth() + 3) / 3), //季度 
			"S": dt.getMilliseconds() //毫秒 
		};

		if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (dt.getFullYear() + "").substr(4 - RegExp.$1.length));
		for (var k in o) {
			if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
		}return fmt;
	}
}];

var filter = function (Vue) {
	components$2.forEach(function (item) {
		Vue.filter(item.name, item.fn);
	});
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$10 = {
  data: function data() {
    return {
      name: ""
    };
  },

  methods: {
    logout: function logout() {
      var _this = this;

      this.$confirm({
        title: "退出登录",
        content: "确认退出登录？"
      }).then(function () {
        _this.$http.post("logout/data").then(function (data) {
          data = data.body;
          if (data.code == 1) {
            window.location.href = "/login";
          } else {}
        }).catch();
      }).catch(function () {});
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.$http.get("admin/index/data").then(function (data) {
      data = data.body;
      if (data.code == 1) {
        _this2.name = data.data.name;
      } else {}
    });
  }
};

/* script */
var __vue_script__$10 = script$10;

/* template */
var __vue_render__$10 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", [_c("span", { staticClass: "text-white" }, [_vm._v(_vm._s(_vm.name))]), _vm._v(" "), _c("span", {
    staticClass: "iconfont icon-tuichu",
    attrs: {
      "data-toggle": "tooltip",
      "data-placement": "left",
      title: "退出登录"
    },
    on: { click: _vm.logout }
  })]);
};
var __vue_staticRenderFns__$10 = [];
__vue_render__$10._withStripped = true;

/* style */
var __vue_inject_styles__$10 = undefined;
/* scoped */
var __vue_scope_id__$10 = undefined;
/* module identifier */
var __vue_module_identifier__$10 = undefined;
/* functional template */
var __vue_is_functional_template__$10 = false;
/* component normalizer */
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$10 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$10, staticRenderFns: __vue_staticRenderFns__$10 }, __vue_inject_styles__$10, __vue_script__$10, __vue_scope_id__$10, __vue_is_functional_template__$10, __vue_module_identifier__$10, false, undefined, undefined, undefined);

var index$1 = {
    init: function init() {
        new Vue({
            render: function render(h) {
                return h(__vue_component__$10);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$12 = {};

/* script */
var __vue_script__$12 = script$12;

/* template */
var __vue_render__$12 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("header", [_c("navbar", {
    staticClass: "rd-no2 container-fuild",
    attrs: { inverse: "", fluid: "" }
  }, [_c("a", {
    staticClass: "navbar-brand rd-no2",
    attrs: { slot: "brand", href: "#" },
    slot: "brand"
  }, [_vm._v("网站登录")]), _vm._v(" "), _c("template", { slot: "collapse" }, [_c("navbar-nav", { attrs: { right: "" } }, [_c("li")])], 1)], 2)], 1);
};
var __vue_staticRenderFns__$12 = [];
__vue_render__$12._withStripped = true;

/* style */
var __vue_inject_styles__$12 = undefined;
/* scoped */
var __vue_scope_id__$12 = undefined;
/* module identifier */
var __vue_module_identifier__$12 = undefined;
/* functional template */
var __vue_is_functional_template__$12 = false;
/* component normalizer */
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$12 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$12, staticRenderFns: __vue_staticRenderFns__$12 }, __vue_inject_styles__$12, __vue_script__$12, __vue_scope_id__$12, __vue_is_functional_template__$12, __vue_module_identifier__$12, false, undefined, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$13 = {
  data: function data() {
    return {
      user: {
        user: "",
        pwd: "",
        isAuto: false
      },
      show: false,
      errText: "用户与密码不对！",
      only: true
    };
  },


  methods: {
    submit: function submit() {
      var _this = this;

      this.$validator.validateAll().then(function (res) {
        if (res) {
          if (!_this.only) {
            return;
          }

          _this.$refs.submit.innerText = "登录中...";
          _this.$http.post("login/data", _this.user).then(function (data) {
            _this.$refs.submit.innerText = "登录";
            _this.only = true;
            data = data.body;
            if (data.code === 1) {
              window.location.href = "/admin/index";
            } else {
              _this.show = true;
              _this.errText = data.data;
              _this.only = true;
            }
          }, function (err) {
            _this.$refs.submit.innerText = "登录";
            _this.only = true;
            _this.$notify({
              type: "danger",
              title: "网络连接失败",
              content: "网络连接失败"
            });
          });
        }
      });
    }
  }
};

/* script */
var __vue_script__$13 = script$13;

/* template */
var __vue_render__$13 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("section", [_c("div", {
    staticClass: "login-cont",
    on: {
      keydown: function keydown($event) {
        if (!$event.type.indexOf("key") && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
          return null;
        }
        $event.preventDefault();
        return _vm.submit.apply(null, arguments);
      }
    }
  }, [_c("form", {
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.submit.apply(null, arguments);
      }
    }
  }, [_c("div", {
    staticClass: "form-group",
    class: { "has-error": _vm.errors.has("user") }
  }, [_c("label", { staticClass: "control-label", attrs: { for: "user" } }, [_vm._v("用户名:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.user.user,
      expression: "user.user"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      id: "user",
      name: "user",
      placeholder: "输入用户名"
    },
    domProps: { value: _vm.user.user },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.user, "user", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("user:required"),
      expression: "errors.has('user:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不能为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: { "has-error": _vm.errors.has("pwd") }
  }, [_c("label", { staticClass: "control-label", attrs: { for: "pwd" } }, [_vm._v("密码:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.user.pwd,
      expression: "user.pwd"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }],
    staticClass: "form-control",
    attrs: {
      type: "password",
      name: "pwd",
      id: "pwd",
      placeholder: "输入密码"
    },
    domProps: { value: _vm.user.pwd },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.user, "pwd", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("pwd:required"),
      expression: "errors.has('pwd:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("密码不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "pull-left" }, [_c("vue-checkbox", [_vm._v("记住密码")])], 1), _vm._v(" "), _vm._m(0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_vm.show ? _c("alert", {
    attrs: { type: "danger", dismissible: "" },
    on: {
      dismissed: function dismissed($event) {
        _vm.show = false;
      }
    }
  }, [_vm._v(_vm._s(_vm.errText))]) : _vm._e()], 1), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    ref: "submit",
    staticClass: "btn btn-primary btn-block",
    attrs: {
      type: "submit",
      disabled: _vm.errors.items.length > 0
    }
  }, [_vm._v("登录")])])])])]);
};
var __vue_staticRenderFns__$13 = [function () {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "pull-right" }, [_c("a", { attrs: { href: "javascript:;" } }, [_vm._v("忘记密码？")])]);
}];
__vue_render__$13._withStripped = true;

/* style */
var __vue_inject_styles__$13 = undefined;
/* scoped */
var __vue_scope_id__$13 = undefined;
/* module identifier */
var __vue_module_identifier__$13 = undefined;
/* functional template */
var __vue_is_functional_template__$13 = false;
/* component normalizer */
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$13 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$13, staticRenderFns: __vue_staticRenderFns__$13 }, __vue_inject_styles__$13, __vue_script__$13, __vue_scope_id__$13, __vue_is_functional_template__$13, __vue_module_identifier__$13, false, undefined, undefined, undefined);

//
//
//
//
//
//
//

var script$11 = {
  data: function data() {
    return {};
  },

  components: {
    bsHeader: __vue_component__$12,
    bsContent: __vue_component__$13
  }
};

/* script */
var __vue_script__$11 = script$11;

/* template */
var __vue_render__$11 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", {}, [_c("bs-header"), _vm._v(" "), _c("bs-content")], 1);
};
var __vue_staticRenderFns__$11 = [];
__vue_render__$11._withStripped = true;

/* style */
var __vue_inject_styles__$11 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-16625d8b_0", { source: ".login-cont {\n  width: 350px;\n  min-height: 300px;\n  padding: 30px 30px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  box-shadow: 2px 2px 5px #ddd -2px -2px 5px #ddd;\n  margin: 0 auto;\n  margin-top: 60px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\login\\app.vue", "app.vue"], "names": [], "mappings": "AAsBA;EACA,YAAA;EACA,iBAAA;EACA,kBAAA;EAEA,kBAAA;EACA,sBAAA;EACA,+CAAA;EACA,cAAA;EACA,gBAAA;ACtBA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"\">\r\n    <bs-header></bs-header>\r\n    <bs-content></bs-content>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport bsHeader from \"./header.vue\";\r\nimport bsContent from \"./content.vue\";\r\nexport default {\r\n  data() {\r\n    return {};\r\n  },\r\n  components: {\r\n    bsHeader,\r\n    bsContent\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.login-cont{\r\n     width: 350px;\r\n     min-height: 300px;\r\n     padding: 30px 30px;\r\n    \r\n     border-radius: 5px;\r\n     border: 1px  solid #ddd;\r\n     box-shadow:  2px 2px 5px #ddd -2px -2px 5px #ddd;\r\n     margin: 0 auto;\r\n     margin-top: 60px;\r\n}\r\n\r\n</style>\r\n\r\n\r\n\r\n\r\n", ".login-cont {\n  width: 350px;\n  min-height: 300px;\n  padding: 30px 30px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n  box-shadow: 2px 2px 5px #ddd -2px -2px 5px #ddd;\n  margin: 0 auto;\n  margin-top: 60px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$11 = undefined;
/* module identifier */
var __vue_module_identifier__$11 = undefined;
/* functional template */
var __vue_is_functional_template__$11 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$11 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$11, staticRenderFns: __vue_staticRenderFns__$11 }, __vue_inject_styles__$11, __vue_script__$11, __vue_scope_id__$11, __vue_is_functional_template__$11, __vue_module_identifier__$11, false, createInjector, undefined, undefined);

var login = {
    init: function init() {
        new Vue({
            render: function render(h) {
                return h(__vue_component__$11);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//

var script$15 = {
  props: {
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    url: {
      type: String,
      default: ""
    }
  },

  data: function data() {
    return {
      list: this.value,
      allcheckBtn: {
        ck: false
      },
      // 分页
      pageObj: {
        index: 1, //	当前页
        pageItem: 10, //  每页条数
        allItem: 1, //  总条数
        showCount: 5, //  显示的页码数目
        isShowSkip: true, // 是否显示跳转页
        isShowCount: true, // 是否显示总页数
        isShowAllItems: true, // 是否显示总条目
        selector: ".paging"
      }
    };
  },

  watch: {
    value: {
      deep: true,
      handler: function handler(v) {
        this.list = v;
      }
    }
  },
  created: function created() {
    var _this = this;

    eventBus.$on("pageList", function () {
      _this.getUsers(_this.pageObj.index || 1);
    });
  },
  mounted: function mounted() {
    // get users
    this.getUsers(1);
  },

  methods: {
    getUsers: function getUsers(i) {
      var _this2 = this;

      // 分页
      this.$loading();
      this.$http.get(this.url + "/" + i + "/" + this.pageObj.pageItem, {}).then(function (ok) {
        _this2.$loading(false);
        var body = ok.body;
        if (body.code) {
          _this2.list = body.data;
          // this.users =body.data.map((item)=>{
          //   item.bl=false;
          //   return item;
          // });
          _this2.list.forEach(function (item) {
            _this2.$set(item, "bl", false);
          });

          _this2.pageObj.index = Number(body.index);
          _this2.pageObj.pageItem = Number(body.pageItem);
          _this2.pageObj.allItem = Number(body.allItem);
          _this2.$emit("input", _this2.list);
          eventBus.$emit("initPage", _this2.pageObj);
          _this2.allcheckBtn.ck = false;
        } else {
          _this2.$notify({
            type: "danger",
            content: body.data
          });
        }
      }).catch(function (err) {
        _this2.$loading(false);
        _this2.$info("danger", "数据链接失败！");
      });
    },
    pageClick: function pageClick(id, end) {
      this.getUsers(id, end);
    },
    allChcek: function allChcek(bl) {

      if (bl) {
        this.list.forEach(function (element) {
          element.bl = true;
        });
      } else {
        this.list.forEach(function (element) {
          element.bl = false;
        });
      }
    }
  }
};

/* script */
var __vue_script__$15 = script$15;

/* template */
var __vue_render__$15 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-list" }, [_vm._t("default", null, {
    list: _vm.list,
    allcheckBtn: _vm.allcheckBtn,
    allChcek: _vm.allChcek
  }), _vm._v(" "), _c("vue-paging", {
    attrs: { "page-click": _vm.pageClick, "text-class": "text-center" }
  })], 2);
};
var __vue_staticRenderFns__$15 = [];
__vue_render__$15._withStripped = true;

/* style */
var __vue_inject_styles__$15 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-58b32d7e_0", { source: ".template-share {\n  padding: 0 10px;\n}\n.template-share .btn-toolbar {\n  margin-top: 15px;\n  margin-bottom: 10px;\n  padding-right: 10px;\n}\n.template-list {\n  padding-top: 10px;\n}\n.template-list .table th,\n.template-list .table td {\n  text-align: center;\n}\n.template-list table th, .template-list table td {\n  text-align: center;\n}\n.template-list form h4 {\n  font-size: 16px;\n  margin-bottom: 10px;\n}\n.template-list form h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=list.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\template-share\\list.vue", "list.vue"], "names": [], "mappings": "AAoHA;EAEA,eAAA;ACpHA;ADqHA;EACA,gBAAA;EACA,mBAAA;EACA,mBAAA;ACnHA;ADsHA;EACA,iBAAA;ACnHA;ADqHA;;EAEA,kBAAA;ACnHA;ADwHA;EACA,kBAAA;ACtHA;AD0HA;EACA,eAAA;EACA,mBAAA;ACxHA;ADyHA;EACA,iBAAA;ACvHA;;AAEA,mCAAmC", "file": "list.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-list\">\r\n    <slot :list=\"list\" :allcheckBtn=\"allcheckBtn\" :allChcek=\"allChcek\"></slot>\r\n    <!--分页-->\r\n    <vue-paging :page-click=\"pageClick\" text-class=\"text-center\"></vue-paging>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { eventBus } from \"../../components/eventBus.js\";\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: Array,\r\n      default(){\r\n        return [];\r\n      }\r\n    },\r\n    url: {\r\n      type: String,\r\n      default:\"\"\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      list: this.value,\r\n      allcheckBtn:{\r\n        ck:false\r\n      },\r\n      // 分页\r\n      pageObj: {\r\n        index: 1, //\t当前页\r\n        pageItem: 10, //  每页条数\r\n        allItem: 1, //  总条数\r\n        showCount: 5, //  显示的页码数目\r\n        isShowSkip: true, // 是否显示跳转页\r\n        isShowCount: true, // 是否显示总页数\r\n        isShowAllItems: true, // 是否显示总条目\r\n        selector: \".paging\"\r\n      }\r\n    };\r\n  },\r\n  watch: {\r\n    value: {\r\n      deep: true,\r\n      handler: function(v) {\r\n        this.list = v;\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    eventBus.$on(\"pageList\",()=>{\r\n        this.getUsers(this.pageObj.index||1);\r\n    })\r\n  },\r\n  mounted() {\r\n    // get users\r\n    this.getUsers(1);\r\n  },\r\n  methods: {\r\n    getUsers(i) {\r\n      // 分页\r\n      this.$loading();\r\n      this.$http.get(`${this.url}/${i}/${this.pageObj.pageItem}`, {}).then(\r\n        ok => {\r\n          this.$loading(false);\r\n          var body = ok.body;\r\n            if (body.code) {\r\n            this.list = body.data;\r\n            // this.users =body.data.map((item)=>{\r\n            //   item.bl=false;\r\n            //   return item;\r\n            // });\r\n            this.list.forEach(item => {\r\n              this.$set(item, \"bl\", false);\r\n            });\r\n\r\n            this.pageObj.index = Number(body.index);\r\n            this.pageObj.pageItem = Number(body.pageItem);\r\n            this.pageObj.allItem = Number(body.allItem);\r\n            this.$emit(\"input\", this.list);\r\n            eventBus.$emit(\"initPage\", this.pageObj);\r\n            this.allcheckBtn.ck = false;\r\n          } else {\r\n            this.$notify({\r\n              type: \"danger\",\r\n              content: body.data\r\n            });\r\n          }\r\n        }\r\n      ).catch(err=>{\r\n         this.$loading(false);\r\n          this.$info(\"danger\",\"数据链接失败！\");\r\n      });\r\n    },\r\n    pageClick(id, end) {\r\n      this.getUsers(id, end);\r\n    },\r\n     \r\n    allChcek(bl) {\r\n    \r\n      if (bl) {\r\n        this.list.forEach(element => {\r\n          element.bl = true;\r\n        });\r\n      } else {\r\n        this.list.forEach(element => {\r\n          element.bl = false;\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\nstyle:<style lang=\"scss\">\r\n.template-share{\r\n \r\n padding: 0 10px;\r\n .btn-toolbar {\r\n    margin-top: 15px;\r\n    margin-bottom: 10px;\r\n    padding-right: 10px;\r\n  }\r\n}\r\n.template-list{\r\n  padding-top: 10px;\r\n  .table {\r\n    th,\r\n    td {\r\n      text-align: center;\r\n    }\r\n  }\r\n\r\n  table{\r\n    th,td{\r\n  text-align: center;\r\n    }\r\n  }\r\n  form{\r\n    h4{\r\n      font-size: 16px;\r\n      margin-bottom: 10px;\r\n      em{\r\n        margin-left: 20px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n", ".template-share {\n  padding: 0 10px;\n}\n.template-share .btn-toolbar {\n  margin-top: 15px;\n  margin-bottom: 10px;\n  padding-right: 10px;\n}\n\n.template-list {\n  padding-top: 10px;\n}\n.template-list .table th,\n.template-list .table td {\n  text-align: center;\n}\n.template-list table th, .template-list table td {\n  text-align: center;\n}\n.template-list form h4 {\n  font-size: 16px;\n  margin-bottom: 10px;\n}\n.template-list form h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=list.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$15 = undefined;
/* module identifier */
var __vue_module_identifier__$15 = undefined;
/* functional template */
var __vue_is_functional_template__$15 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$15 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$15, staticRenderFns: __vue_staticRenderFns__$15 }, __vue_inject_styles__$15, __vue_script__$15, __vue_scope_id__$15, __vue_is_functional_template__$15, __vue_module_identifier__$15, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$16 = {
  props: {
    url: {
      type: String,
      default: ""
    },
    cancel: {
      type: Function,
      default: function _default() {}
    }
  },
  data: function data() {
    return {};
  },

  methods: {
    cancelBtn: function cancelBtn() {
      this.cancel();
    }
  }
};

/* script */
var __vue_script__$16 = script$16;

/* template */
var __vue_render__$16 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-edit" }, [_c("h4", { staticClass: "text-muted" }, [_c("a", {
    staticClass: "btn-link",
    attrs: { href: "javascript:;", title: "返回上一级" }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-circle-arrow-left",
    on: { click: _vm.cancelBtn }
  })]), _vm._v(" "), _c("em", [_vm._t("title", function () {
    return [_vm._v("修改用户信息")];
  })], 2), _vm._v(" "), _c("span", { staticClass: "close", on: { click: _vm.cancelBtn } }, [_vm._v("×")])]), _vm._v(" "), _c("hr"), _vm._v(" "), _vm._t("default")], 2);
};
var __vue_staticRenderFns__$16 = [];
__vue_render__$16._withStripped = true;

/* style */
var __vue_inject_styles__$16 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-50e80a24_0", { source: ".template-edit {\n  width: 500px;\n  margin: 0 auto;\n  padding: 10px 20px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n.template-edit .form-group .btn + .btn {\n  margin-left: 30px;\n}\n.template-edit hr {\n  margin: 10px 0 10px 0;\n}\n.template-edit h4 {\n  font-size: 15px;\n}\n.template-edit h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=edit.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\template-share\\edit.vue", "edit.vue"], "names": [], "mappings": "AAwCA;EACA,YAAA;EACA,cAAA;EACA,kBAAA;EACA,gBAAA;EACA,mBAAA;EACA,sBAAA;EACA,kBAAA;ACvCA;ADyCA;EACA,iBAAA;ACvCA;AD0CA;EACA,qBAAA;ACxCA;AD2CA;EACA,eAAA;ACzCA;AD2CA;EACA,iBAAA;ACzCA;;AAEA,mCAAmC", "file": "edit.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-edit\">\r\n    <h4 class=\"text-muted\">\r\n      <a href=\"javascript:;\" class=\"btn-link\" title=\"返回上一级\">\r\n        <span @click=\"cancelBtn\" class=\"glyphicon glyphicon-circle-arrow-left\"></span>\r\n      </a>\r\n      <em>\r\n        <slot name=\"title\">修改用户信息</slot>\r\n      </em>\r\n      <span @click=\"cancelBtn\" class=\"close\">&times;</span>\r\n    </h4>\r\n    <hr>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    url: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    cancel: {\r\n      type: Function,\r\n      default: function() {}\r\n    }\r\n  },\r\n  data() {\r\n    return {};\r\n  },\r\n  methods: {\r\n    cancelBtn() {\r\n      this.cancel();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\nstyle:<style lang=\"scss\">\r\n.template-edit {\r\n  width: 500px;\r\n  margin: 0 auto;\r\n  padding: 10px 20px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  .form-group {\r\n    .btn + .btn {\r\n      margin-left: 30px;\r\n    }\r\n  }\r\n  hr {\r\n      margin: 10px 0 10px 0;\r\n  }\r\n\r\n    h4 {\r\n      font-size: 15px;\r\n     \r\n      em {\r\n        margin-left: 20px;\r\n      }\r\n    \r\n  }\r\n}\r\n</style>\r\n\r\n", ".template-edit {\n  width: 500px;\n  margin: 0 auto;\n  padding: 10px 20px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n.template-edit .form-group .btn + .btn {\n  margin-left: 30px;\n}\n.template-edit hr {\n  margin: 10px 0 10px 0;\n}\n.template-edit h4 {\n  font-size: 15px;\n}\n.template-edit h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=edit.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$16 = undefined;
/* module identifier */
var __vue_module_identifier__$16 = undefined;
/* functional template */
var __vue_is_functional_template__$16 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$16 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$16, staticRenderFns: __vue_staticRenderFns__$16 }, __vue_inject_styles__$16, __vue_script__$16, __vue_scope_id__$16, __vue_is_functional_template__$16, __vue_module_identifier__$16, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var script$17 = {
  props: {
    value: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    url: {
      type: String,
      default: ""
    },
    cancel: {
      type: Function,
      default: function _default() {}
    }
  },
  data: function data() {
    return {
      obj: this.value
    };
  },

  methods: {
    cancelBtn: function cancelBtn() {
      this.cancel();
    }
  }
};

/* script */
var __vue_script__$17 = script$17;

/* template */
var __vue_render__$17 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-add" }, [_c("h4", { staticClass: "text-muted" }, [_c("a", {
    staticClass: "btn-link",
    attrs: { href: "javascript:;", title: "返回上一级" }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-circle-arrow-left",
    on: { click: _vm.cancelBtn }
  })]), _vm._v(" "), _c("em", [_vm._t("title", function () {
    return [_vm._v("添加用户信息")];
  })], 2), _vm._v(" "), _c("span", { staticClass: "close", on: { click: _vm.cancelBtn } }, [_vm._v("×")])]), _vm._v(" "), _c("hr"), _vm._v(" "), _vm._t("default")], 2);
};
var __vue_staticRenderFns__$17 = [];
__vue_render__$17._withStripped = true;

/* style */
var __vue_inject_styles__$17 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-bc1ca162_0", { source: ".template-add {\n  width: 600px;\n  margin: 0 auto;\n  padding: 10px 20px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n.template-add hr {\n  margin: 10px 0 10px 0;\n}\n.template-add h4 {\n  font-size: 15px;\n}\n.template-add h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=add.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\template-share\\add.vue", "add.vue"], "names": [], "mappings": "AAiDA;EACA,YAAA;EACA,cAAA;EACA,kBAAA;EACA,gBAAA;EACA,mBAAA;EACA,sBAAA;EACA,kBAAA;AChDA;ADiDA;EACA,qBAAA;AC/CA;ADkDA;EACA,eAAA;AChDA;ADkDA;EACA,iBAAA;AChDA;;AAEA,kCAAkC", "file": "add.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-add\">\r\n    <h4 class=\"text-muted\">\r\n      <a href=\"javascript:;\" class=\"btn-link\" title=\"返回上一级\">\r\n        <span @click=\"cancelBtn\" class=\"glyphicon glyphicon-circle-arrow-left\"></span>\r\n      </a>\r\n      <em>\r\n        <slot name=\"title\">添加用户信息</slot>\r\n      </em>\r\n      <span @click=\"cancelBtn\" class=\"close\">&times;</span>\r\n    </h4>\r\n    <hr>\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  props: {\r\n    value: {\r\n      type: Object,\r\n      default() {\r\n        return {};\r\n      }\r\n    },\r\n    url: {\r\n      type: String,\r\n      default: \"\"\r\n    },\r\n    cancel: {\r\n      type: Function,\r\n      default: function() {}\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      obj: this.value\r\n    };\r\n  },\r\n  methods: {\r\n    cancelBtn() {\r\n      this.cancel();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\nstyle:<style lang=\"scss\">\r\n.template-add {\r\n  width: 600px;\r\n  margin: 0 auto;\r\n  padding: 10px 20px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 5px;\r\n  hr {\r\n    margin: 10px 0 10px 0;\r\n  }\r\n\r\n  h4 {\r\n    font-size: 15px;\r\n\r\n    em {\r\n      margin-left: 20px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n", ".template-add {\n  width: 600px;\n  margin: 0 auto;\n  padding: 10px 20px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n}\n.template-add hr {\n  margin: 10px 0 10px 0;\n}\n.template-add h4 {\n  font-size: 15px;\n}\n.template-add h4 em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=add.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$17 = undefined;
/* module identifier */
var __vue_module_identifier__$17 = undefined;
/* functional template */
var __vue_is_functional_template__$17 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$17 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$17, staticRenderFns: __vue_staticRenderFns__$17 }, __vue_inject_styles__$17, __vue_script__$17, __vue_scope_id__$17, __vue_is_functional_template__$17, __vue_module_identifier__$17, false, createInjector, undefined, undefined);

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$18 = {
  props: {
    cancel: {
      type: Function,
      default: function _default() {}
    },
    url: {
      type: String,
      default: ""
    }
  },
  data: function data() {
    return {
      list: []
    };
  },
  created: function created() {
    var _this = this;

    eventBus.$on("dtlList", function (ids, tab) {
      _this.readList(ids, tab);
    });
  },

  methods: {
    cancelBtn: function cancelBtn() {
      this.cancel();
    },
    readList: function readList(ids, tab) {
      var _this2 = this;

      this.$loading("正在加载数据中...");
      this.$http.get(this.url + "/" + ids.join(",")).then(function (ok) {
        var body = ok.body;
        tab.set("dtl");
        _this2.list = body.data;
        _this2.$loading(false);
      }).catch(function (err) {
        _this2.$loading(false);
        _this2.$info("danger", "数据链接失败！");
      });
    }
  }
};

/* script */
var __vue_script__$18 = script$18;

/* template */
var __vue_render__$18 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-dtl" }, [_c("h4", { staticClass: "text-muted" }, [_c("a", {
    staticClass: "btn-link",
    attrs: { href: "javascript:;", title: "返回上一级" }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-circle-arrow-left",
    on: { click: _vm.cancelBtn }
  })]), _vm._v(" "), _c("em", [_vm._t("title", function () {
    return [_vm._v("参考详细用户信息")];
  })], 2), _vm._v(" "), _c("span", { staticClass: "close", on: { click: _vm.cancelBtn } }, [_vm._v("×")])]), _vm._v(" "), _c("hr"), _vm._v(" "), _vm._t("default", null, { list: _vm.list }), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default",
    attrs: { type: "button" },
    on: { click: _vm.cancelBtn }
  }, [_c("span", { staticClass: "glyphicon glyphicon-circle-arrow-left" }), _vm._v(" 返回\n  ")])], 2);
};
var __vue_staticRenderFns__$18 = [];
__vue_render__$18._withStripped = true;

/* style */
var __vue_inject_styles__$18 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-933eccca_0", { source: ".template-dtl {\n  margin-bottom: 15px;\n}\n.template-dtl hr {\n  margin: 10px 0 10px 0;\n}\n.template-dtl h4.text-muted {\n  font-size: 15px;\n}\n.template-dtl h4.text-muted em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=dtl.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\template-share\\dtl.vue", "dtl.vue"], "names": [], "mappings": "AAoEA;EACA,mBAAA;ACnEA;ADoEA;EACA,qBAAA;AClEA;ADoEA;EACA,eAAA;AClEA;ADmEA;EACA,iBAAA;ACjEA;;AAEA,kCAAkC", "file": "dtl.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-dtl\">\r\n    <h4 class=\"text-muted\">\r\n      <a href=\"javascript:;\" class=\"btn-link\" title=\"返回上一级\">\r\n        <span @click=\"cancelBtn\" class=\"glyphicon glyphicon-circle-arrow-left\"></span>\r\n      </a>\r\n      <em>\r\n        <slot name=\"title\">参考详细用户信息</slot>\r\n      </em>\r\n      <span @click=\"cancelBtn\" class=\"close\">&times;</span>\r\n    </h4>\r\n    <hr>\r\n\r\n    <slot :list=\"list\"></slot>\r\n\r\n    <button type=\"button\" @click=\"cancelBtn\" class=\"btn btn-default\">\r\n      <span class=\"glyphicon glyphicon-circle-arrow-left\"></span> 返回\r\n    </button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { eventBus } from \"../../components/eventBus.js\";\r\nexport default {\r\n  props: {\r\n    cancel: {\r\n      type: Function,\r\n      default: function() {}\r\n    },\r\n    url: {\r\n      type: String,\r\n      default: \"\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      list: []\r\n    };\r\n  },\r\n  created() {\r\n    eventBus.$on(\"dtlList\", (ids, tab) => {\r\n      this.readList(ids, tab);\r\n    });\r\n  },\r\n  methods: {\r\n    cancelBtn() {\r\n      this.cancel();\r\n    },\r\n\r\n    readList(ids, tab) {\r\n      this.$loading(\"正在加载数据中...\");\r\n      this.$http\r\n        .get(`${this.url}/${ids.join(\",\")}`)\r\n        .then(ok => {\r\n          let body = ok.body;\r\n          tab.set(\"dtl\");\r\n          this.list = body.data;\r\n          this.$loading(false);\r\n        })\r\n        .catch(err => {\r\n          this.$loading(false);\r\n          this.$info(\"danger\", \"数据链接失败！\");\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\nstyle:<style lang=\"scss\">\r\n.template-dtl {\r\n  margin-bottom: 15px;\r\n  hr {\r\n  margin: 10px 0 10px 0;\r\n  }\r\n  h4.text-muted {\r\n    font-size: 15px;\r\n    em {\r\n      margin-left: 20px;\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n", ".template-dtl {\n  margin-bottom: 15px;\n}\n.template-dtl hr {\n  margin: 10px 0 10px 0;\n}\n.template-dtl h4.text-muted {\n  font-size: 15px;\n}\n.template-dtl h4.text-muted em {\n  margin-left: 20px;\n}\n\n/*# sourceMappingURL=dtl.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$18 = undefined;
/* module identifier */
var __vue_module_identifier__$18 = undefined;
/* functional template */
var __vue_is_functional_template__$18 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$18 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$18, staticRenderFns: __vue_staticRenderFns__$18 }, __vue_inject_styles__$18, __vue_script__$18, __vue_scope_id__$18, __vue_is_functional_template__$18, __vue_module_identifier__$18, false, createInjector, undefined, undefined);

var mixin$1 = {
  data: function data() {
    var _this = this;

    return {
      tab: {
        index: true,
        edit: false,
        add: false,
        dtl: false,
        set: function set(v) {
          v = typeof v !== "string" ? "index" : v;

          for (name in _this.tab) {
            if (typeof _this.tab[name] === "boolean") {
              if (name == v) {
                _this.tab[name] = true;
              } else {
                _this.tab[name] = false;
              }
            }
          }
        }
      },
      tempEdit: {}, // 恢复默认对象
      tempAdd: {}, // 恢复默认对象

      //  dtl查看列表ids
      dtlIds: []
    };
  },

  methods: {

    // del
    delBtn: function delBtn() {
      var _this2 = this;

      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.$confirm({
        content: "确认删除数据？"
      }).then(function (ok) {
        var listId = _this2.list.filter(function (item) {
          return item.bl === true;
        }).map(function (item) {
          return item._id;
        });

        _this2.$loading("正在删除数据中...");
        _this2.$http.delete(_this2.httpUlr.del + "/" + listId.join(","), { name: 123 }).then(function (ok) {
          _this2.$loading(false);
          var body = ok.body;
          if (body.code) {

            eventBus.$emit("pageList"); // 更新分页
            _this2.$info("success", "删除数据成功！");
          } else {

            _this2.$info("danger", "删除数据失败！");
          }
        }, function (err) {
          _this2.$loading(false);
          _this2.$info("danger", "数据链接失败！");
        });
      }).catch(function (err) {});
    },


    // edit
    editCancel: function editCancel() {
      this.tab.set();
    },
    edit: function edit(scope) {
      var _this3 = this;

      this.$validator.validateAll(scope).then(function (result) {
        _this3.$loading("正在保存中...");

        _this3.$http.put("" + _this3.httpUlr.edit, _this3.editObj).then(function (ok) {
          _this3.$loading(false);
          _this3.tab.set(); //  back index

          _this3.resetEditObj(); // 恢复默认值
          var body = ok.body;
          if (body.code) {
            _this3.$info("success", "修改数据成功！");
            eventBus.$emit("pageList"); // 更新分页
          } else {
            _this3.$info("danger", "修改数据失败！");
          }
        }).catch(function (err) {
          _this3.$loading(false);
          _this3.$info("danger", "数据链接失败！");
        });
      });
    },


    // add
    add: function add(scope) {
      var _this4 = this;

      this.$validator.validateAll(scope).then(function (result) {
        if (result) {
          _this4.$loading("正在添加中...");

          _this4.$http.post("" + _this4.httpUlr.add, _this4.addObj).then(function (ok) {
            _this4.$loading(false);
            _this4.tab.set(); //  back index

            _this4.resetAddObj(); // 恢复默认值
            var body = ok.body;
            if (body.code) {
              _this4.$info("success", "添加数据成功！");
              eventBus.$emit("pageList"); // 更新分页
            } else {
              _this4.$info("danger", "添加数据失败！");
            }
          }).catch(function (err) {
            _this4.$loading(false);
            _this4.$info("danger", "数据链接失败！");
          });
        }
      });
    },

    // add
    addCancel: function addCancel() {
      this.tab.set();
    },


    // dtl
    dtlBtn: function dtlBtn() {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }

      this.dtlIds = fo.map(function (item) {
        return item._id;
      });
      eventBus.$emit("dtlList", this.dtlIds, this.tab);
      //this.tab.set("dtl");
    },
    dtlCancel: function dtlCancel() {
      this.tab.set();
    },
    reseAddObj: function reseAddObj() {
      for (name in this.tempAdd) {
        this.addObj[name] = this.tempAdd[name];
      }
    },
    resetAddObj: function resetAddObj() {
      for (name in this.tempAdd) {
        this.addObj[name] = this.tempAdd[name];
      }
    },
    resetEditObj: function resetEditObj() {
      for (name in this.tempEdit) {
        this.editObj[name] = this.tempEdit[name];
      }
    }
  },
  mounted: function mounted() {

    // 复制给临时的对象，验证成功之后重置默认值
    for (name in this.editObj) {
      this.tempEdit[name] = this.editObj[name];
    }
    for (name in this.addObj) {
      this.tempAdd[name] = this.addObj[name];
    }
  },

  computed: {
    editError: function editError(errors) {
      return this.errors.items.filter(function (e) {
        return e.scope == "edit";
      }).length > 0;
    },
    addError: function addError(errors) {
      return this.errors.items.filter(function (e) {
        return e.scope == "add";
      }).length > 0;
    }
  }

};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$14 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/user/data",
        add: "admin/user/data",
        edit: "admin/user/data",
        del: "admin/user/data",
        dtl: "admin/user/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        roleId: ""
      },

      // add 添加的对象
      addObj: {
        name: "",
        pwd: "",
        pwd2: "",
        email: "",
        roleId: ""
      },

      // 自定义
      roles: []
    };
  },
  mounted: function mounted() {
    var _this = this;

    // get roles
    this.$http.get("admin/userRole/data", {}).then(function (ok) {
      var body = ok.body;
      if (body.code) {
        _this.roles = body.data || [];
      }
    }, function (err) {
      _this.$info("danger", "数据链接失败！");
    });
  },

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear("add");
      // 修改内容
    },

    // edit
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.roleId = o.roleId && o.roleId._id || "";
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$14 = script$14;

/* template */
var __vue_render__$14 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share user" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("用户名")]), _vm._v(" "), _c("th", [_vm._v("类型")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.roleId && item.roleId.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createDate)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("用户Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("用户名:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("用户类型:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.roleId && item.roleId.name))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("创建时间:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm._f("date")(item.createDate)))])])])]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看详细用户信息")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改用户信息")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("label", { attrs: { for: "exampleInputEmail1" } }, [_vm._v("用户名:" + _vm._s(_vm.editObj.name))])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("label", { attrs: { for: "exampleInputEmail1" } }, [_vm._v("用户类型")]), _vm._v(" "), _c("select", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.roleId,
      expression: "editObj.roleId"
    }],
    staticClass: "form-control",
    attrs: { name: "", id: "", placeholder: "Email" },
    on: {
      change: function change($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.$set(_vm.editObj, "roleId", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);
      }
    }
  }, _vm._l(_vm.roles, function (item, index) {
    return _c("option", {
      key: index,
      domProps: {
        selected: _vm.editObj.roleId === item._id,
        value: item._id
      }
    }, [_vm._v(_vm._s(item.name))]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加用户信息")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("用户名:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        min: 4,
        unique: "admin/user/data-unique"
      },
      expression: "{required:true,min:4,unique:'admin/user/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入用户名"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为4位！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:unique"),
      expression: "errors.has('add.name:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { "has-error": _vm.errors.has("add.pwd") }
  }, [_c("label", { staticClass: "control-label", attrs: { for: "pwd" } }, [_vm._v("密码:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.pwd,
      expression: "addObj.pwd"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 8 },
      expression: "{ required:true,min:8}"
    }],
    ref: "add.pwd",
    staticClass: "form-control",
    attrs: {
      type: "password",
      id: "pwd",
      name: "add.pwd",
      placeholder: "输入密码"
    },
    domProps: { value: _vm.addObj.pwd },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "pwd", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.pwd:required"),
      expression: "errors.has('add.pwd:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("密码不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.pwd:min"),
      expression: "errors.has('add.pwd:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("密码最小长度为8位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { "has-error": _vm.errors.has("add.pwd2") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "pwd2" }
  }, [_vm._v("确认密码:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.pwd2,
      expression: "addObj.pwd2"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true, confirmed: "add.pwd" },
      expression: "{ required:true,confirmed:'add.pwd'}"
    }],
    staticClass: "form-control",
    attrs: {
      type: "password",
      name: "add.pwd2",
      id: "pwd2",
      "data-vv-as": "pwd",
      placeholder: "输入确认密码"
    },
    domProps: { value: _vm.addObj.pwd2 },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "pwd2", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.pwd2:required"),
      expression: "errors.has('add.pwd2:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("密码不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.pwd2:confirmed"),
      expression: "errors.has('add.pwd2:confirmed')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("两次密码不相同！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { "has-error": _vm.errors.has("add.roleId") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "roleId" }
  }, [_vm._v("用户类型:")]), _vm._v(" "), _c("select", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.roleId,
      expression: "addObj.roleId"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: "required",
      expression: "'required'"
    }],
    staticClass: "form-control",
    attrs: { name: "add.roleId", id: "roleId" },
    on: {
      change: function change($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.$set(_vm.addObj, "roleId", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);
      }
    }
  }, [_c("option", { attrs: { value: "" } }, [_vm._v("==选择类型==")]), _vm._v(" "), _vm._l(_vm.roles, function (item, index) {
    return _c("option", { key: index, domProps: { value: item._id } }, [_vm._v(_vm._s(item.name))]);
  })], 2), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.roleId:required"),
      expression: "errors.has('add.roleId:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户类型不为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { "has-error": _vm.errors.has("add.email") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "email" }
  }, [_vm._v("邮箱:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.email,
      expression: "addObj.email"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: "required|email",
      expression: "'required|email'"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.email",
      id: "email",
      placeholder: "输入邮箱"
    },
    domProps: { value: _vm.addObj.email },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "email", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.eamil:required"),
      expression: "errors.has('add.eamil:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("邮箱不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.email:email"),
      expression: "errors.has('add.email:email')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("邮箱格式不对！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$14 = [];
__vue_render__$14._withStripped = true;

/* style */
var __vue_inject_styles__$14 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-28edf36d_0", { source: "\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["app.vue"], "names": [], "mappings": ";;AAEA,kCAAkC", "file": "app.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$14 = undefined;
/* module identifier */
var __vue_module_identifier__$14 = undefined;
/* functional template */
var __vue_is_functional_template__$14 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$14 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$14, staticRenderFns: __vue_staticRenderFns__$14 }, __vue_inject_styles__$14, __vue_script__$14, __vue_scope_id__$14, __vue_is_functional_template__$14, __vue_module_identifier__$14, false, createInjector, undefined, undefined);

var user = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$14);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$19 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/userRole/data",
        add: "admin/userRole/data",
        edit: "admin/userRole/data",
        del: "admin/userRole/data",
        dtl: "admin/userRole/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        order: 1
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: ""

        // 自定义
      } };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear("add");
      // 修改内容
    },

    // edit
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.order = o.order;
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$19 = script$19;

/* template */
var __vue_render__$19 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share userrole" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("用户类型")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("创建时间")]), _vm._v(" "), _c("th", [_vm._v("排序")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item) {
          return _c("tr", { key: item._id }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createDate)))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.order))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("用户Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("用户名:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("创建时间:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm._f("date")(item.createDate)))])])])]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看详细用户信息")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改用户信息")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("label", [_vm._v("编号：" + _vm._s(_vm.editObj._id))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "name" }
  }, [_vm._v("用户名")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }],
    staticClass: "form-control",
    attrs: { type: "text", name: "name", id: "name" },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("名称不为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "name" }
  }, [_vm._v("排序")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }],
    staticClass: "form-control",
    attrs: { type: "text", name: "order", id: "name" },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("最小值不能为小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加用户类型")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入用户名"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        min_value: 0,
        unique: "admin/userrole/data-unique"
      },
      expression: "{required:true,min_value:0,unique:'admin/userrole/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:min_value"),
      expression: "errors.has('add.code:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识最小值0！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$19 = [];
__vue_render__$19._withStripped = true;

/* style */
var __vue_inject_styles__$19 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-1db6a6fa_0", { source: "\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["app.vue"], "names": [], "mappings": ";;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$19 = undefined;
/* module identifier */
var __vue_module_identifier__$19 = undefined;
/* functional template */
var __vue_is_functional_template__$19 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$19 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$19, staticRenderFns: __vue_staticRenderFns__$19 }, __vue_inject_styles__$19, __vue_script__$19, __vue_scope_id__$19, __vue_is_functional_template__$19, __vue_module_identifier__$19, false, createInjector, undefined, undefined);

var userrole = {
    init: function init() {
        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$19);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$20 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/rotation/data",
        add: "admin/rotation/data",
        edit: "admin/rotation/data",
        del: "admin/rotation/data",
        dtl: "admin/rotation/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        code: "",
        order: "",
        imgs: []
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: "",
        imgs: []

        // 自定义
      } };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear('add');
      // 修改内容
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.imgs = Array.prototype.slice.call(o.imgs);
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      return this.addObj.imgs.map(function (e) {
        return e.src;
      });
    },
    editdFileUpload: function editdFileUpload() {
      return this.editObj.imgs.map(function (e) {
        return e.src;
      });
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$20 = script$20;

/* template */
var __vue_render__$20 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("图片")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.imgs.length > 0 ? item.imgs.length + "张图片" : "没有图片"))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, _vm._l(item.imgs, function (item2, index2) {
            return _c("div", {
              key: index2,
              staticClass: "col-xs-3",
              staticStyle: { "margin-bottom": "10px" }
            }, [_c("div", { staticClass: "img-thumbnail" }, [_c("img", {
              staticClass: " img-rounded",
              attrs: { src: item2.src, alt: "" }
            }), _vm._v(" "), _c("div", { staticClass: "caption" }, [_c("h5", [_vm._v("url:" + _vm._s(item2.url))])])])]);
          }), 0)]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看详细轮播图信息")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加轮播图")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/rotation/data-unique"
      },
      expression: "{required:true,unique:'admin/rotation/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入唯一标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addFileUpload,
      expression: "addFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.addFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.addFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-add",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.addFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.addObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.addFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改轮播图信息")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.name",
      id: "edit.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:min"),
      expression: "errors.has('edit.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editdFileUpload,
      expression: "editdFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.editdFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.editdFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-edit",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.editFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.editObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.editFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$20 = [];
__vue_render__$20._withStripped = true;

/* style */
var __vue_inject_styles__$20 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-95932ca4_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\rotation\\app.vue", "app.vue"], "names": [], "mappings": "AA6bA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AC5bA;AD6bA;EACA,UAAA;EACA,eAAA;AC3bA;AD6bA;EACA,WAAA;EACA,aAAA;AC3bA;AD8bA;EACA,gBAAA;AC5bA;ADmcA;EACA,WAAA;EACA,aAAA;AChcA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>名称</th>\r\n                <th>标识</th>\r\n                <th>图片</th>\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.name}}</td>\r\n                <td>{{ item.code}}</td>\r\n                  <td>{{ item.imgs.length>0?`${item.imgs.length}张图片`:`没有图片`}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看详细轮播图信息</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.name}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n\r\n             <div class=\"list-group-item clearfix\">\r\n               <div class=\"col-xs-3\" style=\"margin-bottom:10px;\" v-for=\"(item2 ,index2) in item.imgs\" :key=\"index2\">\r\n                 <div class=\"img-thumbnail\">\r\n                       <img class=\" img-rounded\" :src=\"item2.src\" alt=\"\">\r\n                       <div class=\"caption\">\r\n                           <h5>url:{{item2.url}}</h5>\r\n                       </div>\r\n                      \r\n                 </div>\r\n              \r\n               </div>\r\n            </div>\r\n           \r\n\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加轮播图</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.name')}\">\r\n              <label class=\"control-label\" for=\"add.name\">名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.name\"\r\n                id=\"add.name\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"addObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:required')\">用户名不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:min')\">用户名最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/rotation/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">标识不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">标识值已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"add.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"addFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                name=\"vue-file-add\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"addFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in addObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"addFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  \r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改轮播图信息</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.name')}\">\r\n              <label class=\"control-label\" for=\"edit.name\">名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.name\"\r\n                id=\"edit.name\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"editObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:required')\">用户名不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:min')\">用户名最小长度为4位！</p>\r\n            </div>\r\n\r\n            <!-- <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.code')}\">\r\n              <label class=\"control-label\" for=\"edit.code\">code:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.code\"\r\n                id=\"edit.code\"\r\n                v-validate=\"{required:true,unique:'admin/rotation/data-unique'}\"\r\n                v-model=\"editObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.code:required')\">code不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.code:unique')\">code值已存在！</p>\r\n            </div>-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"edit.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"editdFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                  name=\"vue-file-edit\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"editFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in editObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"editFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/rotation/data\",\r\n        add: \"admin/rotation/data\",\r\n        edit: \"admin/rotation/data\",\r\n        del: \"admin/rotation/data\",\r\n        dtl: \"admin/rotation/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        imgs: []\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        imgs: []\r\n      }\r\n\r\n      // 自定义\r\n    };\r\n  },\r\n\r\n  mounted() {},\r\n  methods: {\r\n      // add btn\r\n      addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear('add');\r\n      // 修改内容\r\n     \r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.name = o.name;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.imgs =Array.prototype.slice.call(o.imgs);\r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation{\r\n  .list-group{\r\n    .img-thumbnail{\r\n      img{\r\n        width: 100%;\r\n        height:  200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$20 = undefined;
/* module identifier */
var __vue_module_identifier__$20 = undefined;
/* functional template */
var __vue_is_functional_template__$20 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$20 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$20, staticRenderFns: __vue_staticRenderFns__$20 }, __vue_inject_styles__$20, __vue_script__$20, __vue_scope_id__$20, __vue_is_functional_template__$20, __vue_module_identifier__$20, false, createInjector, undefined, undefined);

var rotation = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$20);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$21 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/banner/data",
        add: "admin/banner/data",
        edit: "admin/banner/data",
        del: "admin/banner/data",
        dtl: "admin/banner/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        code: "",
        order: "",
        imgs: []
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: "",
        imgs: []

        // 自定义
      } };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear('add');
      // 修改内容
      this.addObj.imgs = [];
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.imgs = Array.prototype.slice.call(o.imgs);
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      return this.addObj.imgs.map(function (e) {
        return e.src;
      });
    },
    editdFileUpload: function editdFileUpload() {
      return this.editObj.imgs.map(function (e) {
        return e.src;
      });
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$21 = script$21;

/* template */
var __vue_render__$21 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("图片")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.imgs.length > 0 ? item.imgs.length + "张图片" : "没有图片"))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, _vm._l(item.imgs, function (item2, index2) {
            return _c("div", {
              key: index2,
              staticClass: "col-xs-3",
              staticStyle: { "margin-bottom": "10px" }
            }, [_c("div", { staticClass: "img-thumbnail" }, [_c("img", {
              staticClass: " img-rounded",
              attrs: { src: item2.src, alt: "" }
            }), _vm._v(" "), _c("div", { staticClass: "caption" }, [_c("h5", [_vm._v("url:" + _vm._s(item2.url))])])])]);
          }), 0)]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看页面Banner大图")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加页面Banner大图")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/banner/data-unique"
      },
      expression: "{required:true,unique:'admin/banner/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入唯一标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("code不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("code值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addFileUpload,
      expression: "addFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.addFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.addFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-add",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.addFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.addObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.addFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改页面Banner大图")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.name",
      id: "edit.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:min"),
      expression: "errors.has('edit.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("用户名最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editdFileUpload,
      expression: "editdFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.editdFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.editdFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-edit",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.editFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.editObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.editFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$21 = [];
__vue_render__$21._withStripped = true;

/* style */
var __vue_inject_styles__$21 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-d8ee2352_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\banner\\app.vue", "app.vue"], "names": [], "mappings": "AAicA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AChcA;ADicA;EACA,UAAA;EACA,eAAA;AC/bA;ADicA;EACA,WAAA;EACA,aAAA;AC/bA;ADkcA;EACA,gBAAA;AChcA;ADucA;EACA,WAAA;EACA,aAAA;ACpcA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>名称</th>\r\n                <th>标识</th>\r\n                <th>图片</th>\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.name}}</td>\r\n                <td>{{ item.code}}</td>\r\n                  <td>{{ item.imgs.length>0?`${item.imgs.length}张图片`:`没有图片`}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看页面Banner大图</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.name}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n\r\n             <div class=\"list-group-item clearfix\">\r\n               <div class=\"col-xs-3\" style=\"margin-bottom:10px;\" v-for=\"(item2 ,index2) in item.imgs\" :key=\"index2\">\r\n                 <div class=\"img-thumbnail\">\r\n                       <img class=\" img-rounded\" :src=\"item2.src\" alt=\"\">\r\n                       <div class=\"caption\">\r\n                           <h5>url:{{item2.url}}</h5>\r\n                       </div>\r\n                      \r\n                 </div>\r\n              \r\n               </div>\r\n            </div>\r\n           \r\n\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加页面Banner大图</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.name')}\">\r\n              <label class=\"control-label\" for=\"add.name\">名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.name\"\r\n                id=\"add.name\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"addObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:required')\">用户名不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:min')\">用户名最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/banner/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">code不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">code值已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"add.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"addFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                name=\"vue-file-add\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"addFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in addObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"addFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  \r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改页面Banner大图</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.name')}\">\r\n              <label class=\"control-label\" for=\"edit.name\">名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.name\"\r\n                id=\"edit.name\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"editObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:required')\">用户名不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:min')\">用户名最小长度为4位！</p>\r\n            </div>\r\n\r\n            <!-- <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.code')}\">\r\n              <label class=\"control-label\" for=\"edit.code\">code:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.code\"\r\n                id=\"edit.code\"\r\n                v-validate=\"{required:true,unique:'admin/rotation/data-unique'}\"\r\n                v-model=\"editObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.code:required')\">code不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.code:unique')\">code值已存在！</p>\r\n            </div>-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"edit.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"editdFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                  name=\"vue-file-edit\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"editFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in editObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"editFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\nimport { eventBus } from \"../../../components/eventBus.js\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/banner/data\",\r\n        add: \"admin/banner/data\",\r\n        edit: \"admin/banner/data\",\r\n        del: \"admin/banner/data\",\r\n        dtl: \"admin/banner/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        imgs: []\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        imgs: []\r\n      }\r\n\r\n      // 自定义\r\n    };\r\n  },\r\n\r\n  mounted() {},\r\n  methods: {\r\n      // add btn\r\n      addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear('add');\r\n      // 修改内容\r\n     this.addObj.imgs=[];\r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.name = o.name;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.imgs =Array.prototype.slice.call(o.imgs);\r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n.template-add {\r\n}\r\n.template-edit {\r\n}\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation{\r\n  .list-group{\r\n    .img-thumbnail{\r\n      img{\r\n        width: 100%;\r\n        height:  200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$21 = undefined;
/* module identifier */
var __vue_module_identifier__$21 = undefined;
/* functional template */
var __vue_is_functional_template__$21 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$21 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$21, staticRenderFns: __vue_staticRenderFns__$21 }, __vue_inject_styles__$21, __vue_script__$21, __vue_scope_id__$21, __vue_is_functional_template__$21, __vue_module_identifier__$21, false, createInjector, undefined, undefined);

var banner = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$21);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$22 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/seriestype/data",
        add: "admin/seriestype/data",
        edit: "admin/seriestype/data",
        del: "admin/seriestype/data",
        dtl: "admin/seriestype/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        order: 1
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: ""

        // 自定义
      } };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear("add");
      // 修改内容
    },

    // edit
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.order = o.order;
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$22 = script$22;

/* template */
var __vue_render__$22 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share userrole" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("系列类型名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("创建时间")]), _vm._v(" "), _c("th", [_vm._v("排序")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item) {
          return _c("tr", { key: item._id }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.order))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("系列类型Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("系列类型名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("创建时间:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])])])]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看详细系列类型")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改系列类型")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("label", [_vm._v("编号：" + _vm._s(_vm.editObj._id))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "name" }
  }, [_vm._v("类型名称")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }],
    staticClass: "form-control",
    attrs: { type: "text", name: "name", id: "name" },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("类型名称不为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "name" }
  }, [_vm._v("排序")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }, {
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }],
    staticClass: "form-control",
    attrs: { type: "text", name: "order", id: "name" },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("最小值不能为小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加系列类型")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入系列类型名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列类型名称不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列类型名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/seriestype/data-unique"
      },
      expression: "{required:true,unique:'admin/seriestype/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$22 = [];
__vue_render__$22._withStripped = true;

/* style */
var __vue_inject_styles__$22 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-1676053f_0", { source: "\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["app.vue"], "names": [], "mappings": ";;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$22 = undefined;
/* module identifier */
var __vue_module_identifier__$22 = undefined;
/* functional template */
var __vue_is_functional_template__$22 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$22 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$22, staticRenderFns: __vue_staticRenderFns__$22 }, __vue_inject_styles__$22, __vue_script__$22, __vue_scope_id__$22, __vue_is_functional_template__$22, __vue_module_identifier__$22, false, createInjector, undefined, undefined);

var seriestype = {
    init: function init() {
        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$22);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$23 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/series/data",
        add: "admin/series/data",
        edit: "admin/series/data",
        del: "admin/series/data",
        dtl: "admin/series/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        order: "",
        seriestypeId: "",
        imgs: []
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: "",
        seriestypeId: "",
        imgs: []
      },

      // 自定义
      seriesTypes: []
    };
  },
  mounted: function mounted() {
    var _this = this;

    // get roles
    this.$http.get("admin/seriestype/data", {}).then(function (ok) {
      var body = ok.body;
      if (body.code) {
        _this.seriesTypes = body.data || [];
      }
    }, function (err) {
      _this.$info("danger", "数据链接失败！");
    });
  },

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear('add');
      // 修改内容
      this.addObj.imgs = [];
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.desc = o.desc;
      this.editObj.seriestypeId = o.seriestypeId;
      this.editObj.imgs = Array.prototype.slice.call(o.imgs);
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      return this.addObj.imgs.map(function (e) {
        return e.src;
      });
    },
    editdFileUpload: function editdFileUpload() {
      return this.editObj.imgs.map(function (e) {
        return e.src;
      });
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$23 = script$23;

/* template */
var __vue_render__$23 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("排序")]), _vm._v(" "), _c("th", [_vm._v("图片")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.order))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.imgs.length > 0 ? item.imgs.length + "张图片" : "没有图片"))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, _vm._l(item.imgs, function (item2, index2) {
            return _c("div", {
              key: index2,
              staticClass: "col-xs-3",
              staticStyle: { "margin-bottom": "10px" }
            }, [_c("div", { staticClass: "img-thumbnail" }, [_c("img", {
              staticClass: " img-rounded",
              attrs: { src: item2.src, alt: "" }
            }), _vm._v(" "), _c("div", { staticClass: "caption" }, [_c("h5", [_vm._v("url:" + _vm._s(item2.url))])])])]);
          }), 0)]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看页面Banner大图")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加产品系列")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("系列名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列名称不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: {
      " has-error": _vm.errors.has("add.seriestypeId")
    }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "exampleInputEmail1" }
  }, [_vm._v("系列类型")]), _vm._v(" "), _c("select", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.seriestypeId,
      expression: "addObj.seriestypeId"
    }],
    staticClass: "form-control",
    attrs: { name: "add.seriestypeId", id: "" },
    on: {
      change: function change($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.$set(_vm.addObj, "seriestypeId", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);
      }
    }
  }, [_c("option", { attrs: { value: "", selected: "selected" } }, [_vm._v("==用户类型==")]), _vm._v(" "), _vm._l(_vm.seriesTypes, function (item, index) {
    return _c("option", { key: index, domProps: { value: item._id } }, [_vm._v(_vm._s(item.name))]);
  })], 2), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.seriestypeId:required"),
      expression: "errors.has('add.seriestypeId:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列类型不为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/series/data-unique"
      },
      expression: "{required:true,unique:'admin/series/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入唯一标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addFileUpload,
      expression: "addFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.addFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.addFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-add",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.addFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.addObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.addFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改产品系列")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("h5", [_vm._v("标识:" + _vm._s(_vm.editObj.code))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.name" }
  }, [_vm._v("系列名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.name",
      id: "edit.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列名称不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:min"),
      expression: "errors.has('edit.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group",
    class: {
      " has-error": _vm.errors.has("edit.seriestypeId")
    }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "exampleInputEmail1" }
  }, [_vm._v("系列类型")]), _vm._v(" "), _c("select", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.seriestypeId,
      expression: "editObj.seriestypeId"
    }],
    staticClass: "form-control",
    attrs: { name: "edit.seriestypeId", id: "" },
    on: {
      change: function change($event) {
        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {
          return o.selected;
        }).map(function (o) {
          var val = "_value" in o ? o._value : o.value;
          return val;
        });
        _vm.$set(_vm.editObj, "seriestypeId", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);
      }
    }
  }, _vm._l(_vm.seriesTypes, function (item, index) {
    return _c("option", {
      key: index,
      domProps: {
        value: item._id,
        selected: item._id === _vm.editObj.seriestypeId
      }
    }, [_vm._v(_vm._s(item.name))]);
  }), 0), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.seriestypeId:required"),
      expression: "errors.has('edit.seriestypeId:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("系列类型不为空！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addFileUpload,
      expression: "addFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.addFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.addFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-edit",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.editFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.editObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.editFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$23 = [];
__vue_render__$23._withStripped = true;

/* style */
var __vue_inject_styles__$23 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-1ed3279c_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\series\\app.vue", "app.vue"], "names": [], "mappings": "AA4eA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AC3eA;AD4eA;EACA,UAAA;EACA,eAAA;AC1eA;AD4eA;EACA,WAAA;EACA,aAAA;AC1eA;AD6eA;EACA,gBAAA;AC3eA;ADkfA;EACA,WAAA;EACA,aAAA;AC/eA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>名称</th>\r\n                <th>标识</th>\r\n                <th>排序</th>\r\n                <th>图片</th>\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.name}}</td>\r\n                <td>{{ item.code}}</td>\r\n                <td>{{ item.order}}</td>\r\n                <td>{{ item.imgs.length>0?`${item.imgs.length}张图片`:`没有图片`}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看页面Banner大图</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.name}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n\r\n             <div class=\"list-group-item clearfix\">\r\n               <div class=\"col-xs-3\" style=\"margin-bottom:10px;\" v-for=\"(item2 ,index2) in item.imgs\" :key=\"index2\">\r\n                 <div class=\"img-thumbnail\">\r\n                       <img class=\" img-rounded\" :src=\"item2.src\" alt=\"\">\r\n                       <div class=\"caption\">\r\n                           <h5>url:{{item2.url}}</h5>\r\n                       </div>\r\n                      \r\n                 </div>\r\n              \r\n               </div>\r\n            </div>\r\n           \r\n\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加产品系列</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.name')}\">\r\n              <label class=\"control-label\" for=\"add.name\">系列名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.name\"\r\n                id=\"add.name\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"addObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:required')\">系列名称不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:min')\">系列名称最小长度为2位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group\" :class=\"{' has-error':errors.has('add.seriestypeId')}\">\r\n              <label for=\"exampleInputEmail1\" class=\"control-label\">系列类型</label>\r\n              <select name=\"add.seriestypeId\" \r\n              id class=\"form-control\" \r\n              v-validate=\"{required:true}\"\r\n              v-model=\"addObj.seriestypeId\"\r\n              >\r\n                <option value  selected=\"selected\">==用户类型==</option>\r\n                <option\r\n                  v-for=\"(item ,index) of seriesTypes\"\r\n                  :key=\"index\"\r\n                  :value=\"item._id\"\r\n                >{{item.name}}</option>\r\n              </select>\r\n               <p class=\"text-danger\" v-show=\"errors.has('add.seriestypeId:required')\">系列类型不为空！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/series/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">标识不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">标识已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"add.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"addFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                name=\"vue-file-add\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"addFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in addObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"addFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  \r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改产品系列</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n\r\n            <!-- content start-->\r\n             <div class=\"form-group\" >\r\n              <h5>标识:{{editObj.code}}</h5>\r\n             </div>\r\n             <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.name')}\">\r\n              <label class=\"control-label\" for=\"edit.name\">系列名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.name\"\r\n                id=\"edit.name\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"editObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:required')\">系列名称不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:min')\">系列名称最小长度为2位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group\" :class=\"{' has-error':errors.has('edit.seriestypeId')}\">\r\n              <label for=\"exampleInputEmail1\" class=\"control-label\">系列类型</label>\r\n              <select name=\"edit.seriestypeId\" \r\n              id class=\"form-control\" \r\n              v-validate=\"{required:true}\"\r\n              v-model=\"editObj.seriestypeId\"\r\n              >\r\n               \r\n                <option\r\n                  v-for=\"(item ,index) of seriesTypes\"\r\n                  :key=\"index\"\r\n                  :value=\"item._id\"\r\n                  :selected=\"item._id===editObj.seriestypeId\"\r\n                >{{item.name}}</option>\r\n              </select>\r\n               <p class=\"text-danger\" v-show=\"errors.has('edit.seriestypeId:required')\">系列类型不为空！</p>\r\n            </div>\r\n         \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"edit.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"addFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                name=\"vue-file-edit\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"editFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in editObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"editFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  \r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\nimport { eventBus } from \"../../../components/eventBus.js\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/series/data\",\r\n        add: \"admin/series/data\",\r\n        edit: \"admin/series/data\",\r\n        del: \"admin/series/data\",\r\n        dtl: \"admin/series/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n        name: \"\",\r\n        order: \"\",\r\n        seriestypeId:\"\",\r\n        imgs: []\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        seriestypeId:\"\",\r\n        imgs: []\r\n      },\r\n\r\n      // 自定义\r\n      seriesTypes:[],\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n     // get roles\r\n    this.$http.get(\"admin/seriestype/data\", {}).then(\r\n      ok => {\r\n        var body = ok.body;\r\n        if (body.code) {\r\n          this.seriesTypes = body.data || [];\r\n        }\r\n      },\r\n      err => {\r\n        this.$info(\"danger\", \"数据链接失败！\");\r\n      }\r\n    );\r\n  },\r\n  methods: {\r\n      // add btn\r\n      addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear('add');\r\n      // 修改内容\r\n     this.addObj.imgs=[];\r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.name = o.name;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.desc = o.desc;\r\n      this.editObj.seriestypeId = o.seriestypeId;\r\n      this.editObj.imgs =Array.prototype.slice.call(o.imgs);\r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n.template-add {\r\n}\r\n.template-edit {\r\n}\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation{\r\n  .list-group{\r\n    .img-thumbnail{\r\n      img{\r\n        width: 100%;\r\n        height:  200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$23 = undefined;
/* module identifier */
var __vue_module_identifier__$23 = undefined;
/* functional template */
var __vue_is_functional_template__$23 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$23 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$23, staticRenderFns: __vue_staticRenderFns__$23 }, __vue_inject_styles__$23, __vue_script__$23, __vue_scope_id__$23, __vue_is_functional_template__$23, __vue_module_identifier__$23, false, createInjector, undefined, undefined);

var series = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$23);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$24 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/contact/data",
        add: "admin/contact/data",
        edit: "admin/contact/data",
        del: "admin/contact/data",
        dtl: "admin/contact/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        code: "",
        order: "",
        addr: "",
        tel: "",
        x: "",
        y: ""
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: "",
        addr: "",
        tel: "",
        x: "",
        y: ""
      },

      // 自定义
      seriesTypes: []
    };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear("add");
      // 修改内容
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.x = o.x;
      this.editObj.y = o.y;
      this.editObj.tel = o.tel;
      this.editObj.addr = o.addr;
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      // return this.addObj.imgs.map(e => e.src);
    },
    editdFileUpload: function editdFileUpload() {
      //return this.editObj.imgs.map(e => e.src);
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$24 = script$24;

/* template */
var __vue_render__$24 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("公司名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("排序")]), _vm._v(" "), _c("th", [_vm._v("X坐标")]), _vm._v(" "), _c("th", [_vm._v("Y坐标")]), _vm._v(" "), _c("th", [_vm._v("地址")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.order))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.x))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.y))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.addr))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("X坐标:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.x))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Y坐标:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.y))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("地址:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.addr))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("联系电话:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.tel))])])])]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看页面Banner大图")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加联系我们")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("公司名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/contact/data-unique"
      },
      expression: "{required:true,unique:'admin/contact/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入唯一标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.x") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.x" }
  }, [_vm._v("X坐标:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, decimal: true },
      expression: "{required:true,decimal:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.x,
      expression: "addObj.x"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.x",
      id: "add.x",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.x },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "x", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.x:required"),
      expression: "errors.has('add.x:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("X坐标不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.x:decimal"),
      expression: "errors.has('add.x:decimal')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("不是有效的数值！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.y") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.y" }
  }, [_vm._v("Y坐标:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, decimal: true },
      expression: "{required:true,decimal:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.y,
      expression: "addObj.y"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.y",
      id: "add.y",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.y },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "y", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.y:required"),
      expression: "errors.has('add.y:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("Y坐标不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.y:decimal"),
      expression: "errors.has('add.y:decimal')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("不是有效的数值！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.tel") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.tel" }
  }, [_vm._v("联系电话:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, regex: /^\d[0-9-]{4,}$/ },
      expression: "{required:true,regex:/^\\d[0-9-]{4,}$/}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.tel,
      expression: "addObj.tel"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.tel",
      id: "add.tel",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.tel },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "tel", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.tel:required"),
      expression: "errors.has('add.tel:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.tel:regex"),
      expression: "errors.has('add.tel:regex')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话格式不对！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.addr") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.addr" }
  }, [_vm._v("地址:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.addr,
      expression: "addObj.addr"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.addr",
      id: "add.addr",
      placeholder: "输入地址"
    },
    domProps: { value: _vm.addObj.addr },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "addr", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.addr:required"),
      expression: "errors.has('add.addr:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("地址不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改联系我们")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: " form-group" }, [_c("h5", [_vm._v("标识：" + _vm._s(_vm.editObj.code))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.name" }
  }, [_vm._v("公司名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.name",
      id: "edit.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:min"),
      expression: "errors.has('edit.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.x") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.x" }
  }, [_vm._v("X坐标:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, decimal: true },
      expression: "{required:true,decimal:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.x,
      expression: "editObj.x"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.x",
      id: "edit.x",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.x },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "x", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.x:required"),
      expression: "errors.has('edit.x:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("X坐标不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.x:decimal"),
      expression: "errors.has('edit.x:decimal')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("不是有效的数值！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.y") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.y" }
  }, [_vm._v("Y坐标:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, decimal: true },
      expression: "{required:true,decimal:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.y,
      expression: "editObj.y"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.y",
      id: "edit.y",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.y },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "y", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.y:required"),
      expression: "errors.has('edit.y:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("Y坐标不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.y:decimal"),
      expression: "errors.has('edit.y:decimal')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("不是有效的数值！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.tel") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.tel" }
  }, [_vm._v("联系电话:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, regex: /^\d[0-9-]{4,}$/ },
      expression: "{required:true,regex:/^\\d[0-9-]{4,}$/}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.tel,
      expression: "editObj.tel"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.tel",
      id: "edit.tel",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.tel },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "tel", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.tel:required"),
      expression: "errors.has('edit.tel:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.tel:regex"),
      expression: "errors.has('edit.tel:regex')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话格式不对！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.addr") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.addr" }
  }, [_vm._v("地址:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.addr,
      expression: "editObj.addr"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.addr",
      id: "edit.addr",
      placeholder: "输入地址"
    },
    domProps: { value: _vm.editObj.addr },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "addr", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.addr:required"),
      expression: "errors.has('edit.addr:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("地址不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$24 = [];
__vue_render__$24._withStripped = true;

/* style */
var __vue_inject_styles__$24 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-10fe4fe0_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\contact\\app.vue", "app.vue"], "names": [], "mappings": "AAgeA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AC/dA;ADgeA;EACA,UAAA;EACA,eAAA;AC9dA;ADgeA;EACA,WAAA;EACA,aAAA;AC9dA;ADieA;EACA,gBAAA;AC/dA;ADseA;EACA,WAAA;EACA,aAAA;ACneA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>公司名称</th>\r\n                <th>标识</th>\r\n                <th>排序</th>\r\n                <th>X坐标</th>\r\n                <th>Y坐标</th>\r\n                <th>地址</th>\r\n\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.name}}</td>\r\n                <td>{{ item.code}}</td>\r\n                <td>{{ item.order}}</td>\r\n                <td>{{ item.x}}</td>\r\n                <td>{{ item.y}}</td>\r\n                <td>{{ item.addr}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看页面Banner大图</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.name}}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>X坐标:</label>\r\n                <span>{{item.x}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Y坐标:</label>\r\n                <span>{{item.y}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>地址:</label>\r\n                <span>{{item.addr}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>联系电话:</label>\r\n                <span>{{item.tel}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加联系我们</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.name')}\">\r\n              <label class=\"control-label\" for=\"add.name\">公司名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.name\"\r\n                id=\"add.name\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"addObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:required')\">公司名称不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:min')\">公司名称最小长度为2位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/contact/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入唯一标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">标识不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">标识已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.x')}\">\r\n              <label class=\"control-label\" for=\"add.x\">X坐标:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.x\"\r\n                id=\"add.x\"\r\n                v-validate=\"{required:true,decimal:true}\"\r\n                v-model=\"addObj.x\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.x:required')\">X坐标不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.x:decimal')\">不是有效的数值！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.y')}\">\r\n              <label class=\"control-label\" for=\"add.y\">Y坐标:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.y\"\r\n                id=\"add.y\"\r\n                v-validate=\"{required:true,decimal:true}\"\r\n                v-model=\"addObj.y\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.y:required')\">Y坐标不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.y:decimal')\">不是有效的数值！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.tel')}\">\r\n              <label class=\"control-label\" for=\"add.tel\">联系电话:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.tel\"\r\n                id=\"add.tel\"\r\n                v-validate=\"{required:true,regex:/^\\d[0-9-]{4,}$/}\"\r\n                v-model=\"addObj.tel\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.tel:required')\">联系电话不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.tel:regex')\">联系电话格式不对！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.addr')}\">\r\n              <label class=\"control-label\" for=\"add.addr\">地址:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.addr\"\r\n                id=\"add.addr\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"addObj.addr\"\r\n                placeholder=\"输入地址\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.addr:required')\">地址不能为空！</p>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改联系我们</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n            <!-- content start-->\r\n            <div class=\" form-group\">\r\n                <h5>标识：{{editObj.code}}</h5>\r\n            </div>\r\n             \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.name')}\">\r\n              <label class=\"control-label\" for=\"edit.name\">公司名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.name\"\r\n                id=\"edit.name\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"editObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:required')\">公司名称不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:min')\">公司名称最小长度为2位！</p>\r\n            </div>\r\n\r\n    \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.x')}\">\r\n              <label class=\"control-label\" for=\"edit.x\">X坐标:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.x\"\r\n                id=\"edit.x\"\r\n                v-validate=\"{required:true,decimal:true}\"\r\n                v-model=\"editObj.x\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.x:required')\">X坐标不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.x:decimal')\">不是有效的数值！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.y')}\">\r\n              <label class=\"control-label\" for=\"edit.y\">Y坐标:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.y\"\r\n                id=\"edit.y\"\r\n                v-validate=\"{required:true,decimal:true}\"\r\n                v-model=\"editObj.y\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.y:required')\">Y坐标不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.y:decimal')\">不是有效的数值！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.tel')}\">\r\n              <label class=\"control-label\" for=\"edit.tel\">联系电话:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.tel\"\r\n                id=\"edit.tel\"\r\n                v-validate=\"{required:true,regex:/^\\d[0-9-]{4,}$/}\"\r\n                v-model=\"editObj.tel\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.tel:required')\">联系电话不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.tel:regex')\">联系电话格式不对！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.addr')}\">\r\n              <label class=\"control-label\" for=\"edit.addr\">地址:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.addr\"\r\n                id=\"edit.addr\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"editObj.addr\"\r\n                placeholder=\"输入地址\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.addr:required')\">地址不能为空！</p>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\nimport { eventBus } from \"../../../components/eventBus.js\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/contact/data\",\r\n        add: \"admin/contact/data\",\r\n        edit: \"admin/contact/data\",\r\n        del: \"admin/contact/data\",\r\n        dtl: \"admin/contact/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n         name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        addr: \"\",\r\n        tel: \"\",\r\n        x: \"\",\r\n        y: \"\"\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        addr: \"\",\r\n        tel: \"\",\r\n        x: \"\",\r\n        y: \"\"\r\n      },\r\n\r\n      // 自定义\r\n      seriesTypes: []\r\n    };\r\n  },\r\n\r\n  mounted() {},\r\n  methods: {\r\n    // add btn\r\n    addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear(\"add\");\r\n      // 修改内容\r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.name = o.name;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.x = o.x;\r\n      this.editObj.y = o.y;\r\n      this.editObj.tel = o.tel;\r\n      this.editObj.addr = o.addr;\r\n       \r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      // return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      //return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n.template-add {\r\n}\r\n.template-edit {\r\n}\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation {\r\n  .list-group {\r\n    .img-thumbnail {\r\n      img {\r\n        width: 100%;\r\n        height: 200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$24 = undefined;
/* module identifier */
var __vue_module_identifier__$24 = undefined;
/* functional template */
var __vue_is_functional_template__$24 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$24 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$24, staticRenderFns: __vue_staticRenderFns__$24 }, __vue_inject_styles__$24, __vue_script__$24, __vue_scope_id__$24, __vue_is_functional_template__$24, __vue_module_identifier__$24, false, createInjector, undefined, undefined);

var contact = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$24);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$25 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/svcnet/data",
        add: "admin/svcnet/data",
        edit: "admin/svcnet/data",
        del: "admin/svcnet/data",
        dtl: "admin/svcnet/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        code: "",
        order: "",
        tel: "",
        addr: "",
        imgs: []
      },

      // add 添加的对象
      addObj: {
        name: "",
        code: "",
        order: "",
        tel: "",
        addr: "",
        imgs: []

        // 自定义
      } };
  },
  mounted: function mounted() {},

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear('add');
      // 修改内容
      this.addObj.imgs = [];
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.name = o.name;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.tel = o.tel;
      this.editObj.addr = o.addr;
      this.editObj.imgs = Array.prototype.slice.call(o.imgs);
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      return this.addObj.imgs.map(function (e) {
        return e.src;
      });
    },
    editdFileUpload: function editdFileUpload() {
      return this.editObj.imgs.map(function (e) {
        return e.src;
      });
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$25 = script$25;

/* template */
var __vue_render__$25 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n        ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n        ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("图片")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.imgs.length > 0 ? item.imgs.length + "张图片" : "没有图片"))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.name))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("联系电话:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.tel))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-6 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("地址:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.addr))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, _vm._l(item.imgs, function (item2, index2) {
            return _c("div", {
              key: index2,
              staticClass: "col-xs-3",
              staticStyle: { "margin-bottom": "10px" }
            }, [_c("div", { staticClass: "img-thumbnail" }, [_c("img", {
              staticClass: " img-rounded",
              attrs: { src: item2.src, alt: "" }
            }), _vm._v(" "), _c("div", { staticClass: "caption" }, [_c("h5", [_vm._v("url:" + _vm._s(item2.url))])])])]);
          }), 0)]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看详细服务网点")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加服务网点")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("公司名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.name,
      expression: "addObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.name",
      id: "add.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:required"),
      expression: "errors.has('add.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.name:min"),
      expression: "errors.has('add.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/svcnet/data-unique"
      },
      expression: "{required:true,unique:'admin/svcnet/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("code不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("code值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.tel") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.tel" }
  }, [_vm._v("联系电话:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, regex: /^\d[0-9-]{4,}$/ },
      expression: "{required:true,regex:/^\\d[0-9-]{4,}$/}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.tel,
      expression: "addObj.tel"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.tel",
      id: "add.tel",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.tel },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "tel", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.tel:required"),
      expression: "errors.has('add.tel:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.tel:regex"),
      expression: "errors.has('add.tel:regex')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话格式不对！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.addr") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.addr" }
  }, [_vm._v("地址:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.addr,
      expression: "addObj.addr"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.addr",
      id: "add.addr",
      placeholder: "输入地址"
    },
    domProps: { value: _vm.addObj.addr },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "addr", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.addr:required"),
      expression: "errors.has('add.addr:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("地址不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.addFileUpload,
      expression: "addFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.addFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.addFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-add",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.addFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.addObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.addFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改服务网点")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("h5", [_vm._v("标识：" + _vm._s(_vm.editObj.code))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.name") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.name" }
  }, [_vm._v("公司名称:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.name,
      expression: "editObj.name"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.name",
      id: "edit.name",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.name },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "name", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:required"),
      expression: "errors.has('edit.name:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.name:min"),
      expression: "errors.has('edit.name:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("公司名称最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.tel") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.tel" }
  }, [_vm._v("联系电话:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, regex: /^\d[0-9-]{4,}$/ },
      expression: "{required:true,regex:/^\\d[0-9-]{4,}$/}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.tel,
      expression: "editObj.tel"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.tel",
      id: "edit.tel",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.tel },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "tel", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.tel:required"),
      expression: "errors.has('edit.tel:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.tel:regex"),
      expression: "errors.has('edit.tel:regex')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("联系电话格式不对！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.addr") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.addr" }
  }, [_vm._v("地址:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.addr,
      expression: "editObj.addr"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.addr",
      id: "edit.addr",
      placeholder: "输入地址"
    },
    domProps: { value: _vm.editObj.addr },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "addr", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.addr:required"),
      expression: "errors.has('edit.addr:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("地址不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-12 padding-lr-no" }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.code" }
  }, [_vm._v("上传图片:")])]), _vm._v(" "), _c("div", { staticClass: "col-sm-6 padding-lr-no" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.editdFileUpload,
      expression: "editdFileUpload"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      disabled: "",
      name: "",
      id: "",
      placeholder: "上传图片"
    },
    domProps: { value: _vm.editdFileUpload },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.editdFileUpload = $event.target.value;
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-edit",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.editFileOk,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group clearfix" }, [_c("div", { staticClass: "col-xs-6 clearfix" }, _vm._l(_vm.editObj.imgs, function (item, index) {
    return _c("div", { key: index, staticClass: "upload-img clearfix" }, [_c("span", {
      staticClass: "close",
      on: {
        click: function click($event) {
          return _vm.editFileDel(index);
        }
      }
    }, [_vm._v("×")]), _vm._v(" "), _c("img", { attrs: { src: item.src, alt: "" } }), _vm._v(" "), _c("input", {
      directives: [{
        name: "model",
        rawName: "v-model",
        value: item.url,
        expression: "item.url"
      }],
      staticClass: "form-control",
      attrs: {
        placeholder: "输入url链接",
        type: "text",
        name: "",
        id: ""
      },
      domProps: { value: item.url },
      on: {
        input: function input($event) {
          if ($event.target.composing) {
            return;
          }
          _vm.$set(item, "url", $event.target.value);
        }
      }
    })]);
  }), 0)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$25 = [];
__vue_render__$25._withStripped = true;

/* style */
var __vue_inject_styles__$25 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-0fae7005_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\svcnet\\app.vue", "app.vue"], "names": [], "mappings": "AAigBA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AChgBA;ADigBA;EACA,UAAA;EACA,eAAA;AC/fA;ADigBA;EACA,WAAA;EACA,aAAA;AC/fA;ADkgBA;EACA,gBAAA;AChgBA;ADugBA;EACA,WAAA;EACA,aAAA;ACpgBA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>名称</th>\r\n                <th>标识</th>\r\n                <th>图片</th>\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.name}}</td>\r\n                <td>{{ item.code}}</td>\r\n                  <td>{{ item.imgs.length>0?`${item.imgs.length}张图片`:`没有图片`}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看详细服务网点</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.name}}</span>\r\n              </div>\r\n            </div>\r\n             <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>联系电话:</label>\r\n                <span>{{item.tel}}</span>\r\n              </div>\r\n              <div class=\"col-xs-6 list-group-item-text\">\r\n                <label for>地址:</label>\r\n                <span>{{item.addr}}</span>\r\n              </div>\r\n            </div>\r\n\r\n             <div class=\"list-group-item clearfix\">\r\n               <div class=\"col-xs-3\" style=\"margin-bottom:10px;\" v-for=\"(item2 ,index2) in item.imgs\" :key=\"index2\">\r\n                 <div class=\"img-thumbnail\">\r\n                       <img class=\" img-rounded\" :src=\"item2.src\" alt=\"\">\r\n                       <div class=\"caption\">\r\n                           <h5>url:{{item2.url}}</h5>\r\n                       </div>\r\n                      \r\n                 </div>\r\n              \r\n               </div>\r\n            </div>\r\n           \r\n\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加服务网点</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.name')}\">\r\n              <label class=\"control-label\" for=\"add.name\">公司名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.name\"\r\n                id=\"add.name\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"addObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:required')\">公司名称不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.name:min')\">公司名称最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/svcnet/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">code不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">code值已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n            \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.tel')}\">\r\n              <label class=\"control-label\" for=\"add.tel\">联系电话:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.tel\"\r\n                id=\"add.tel\"\r\n                v-validate=\"{required:true,regex:/^\\d[0-9-]{4,}$/}\"\r\n                v-model=\"addObj.tel\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.tel:required')\">联系电话不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.tel:regex')\">联系电话格式不对！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.addr')}\">\r\n              <label class=\"control-label\" for=\"add.addr\">地址:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.addr\"\r\n                id=\"add.addr\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"addObj.addr\"\r\n                placeholder=\"输入地址\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.addr:required')\">地址不能为空！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"add.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"addFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                name=\"vue-file-add\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"addFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in addObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"addFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  \r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改服务网点</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n            <!-- content start-->\r\n            <div class=\"form-group\">\r\n              <h5>标识：{{editObj.code}}</h5>\r\n            </div>\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.name')}\">\r\n              <label class=\"control-label\" for=\"edit.name\">公司名称:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.name\"\r\n                id=\"edit.name\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"editObj.name\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:required')\">公司名称不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.name:min')\">公司名称最小长度为2位！</p>\r\n            </div>\r\n\r\n          \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n              <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.tel')}\">\r\n              <label class=\"control-label\" for=\"edit.tel\">联系电话:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.tel\"\r\n                id=\"edit.tel\"\r\n                v-validate=\"{required:true,regex:/^\\d[0-9-]{4,}$/}\"\r\n                v-model=\"editObj.tel\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.tel:required')\">联系电话不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.tel:regex')\">联系电话格式不对！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.addr')}\">\r\n              <label class=\"control-label\" for=\"edit.addr\">地址:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.addr\"\r\n                id=\"edit.addr\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"editObj.addr\"\r\n                placeholder=\"输入地址\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.addr:required')\">地址不能为空！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-12 padding-lr-no\">\r\n                <label class=\"control-label\" for=\"edit.code\">上传图片:</label>\r\n              </div>\r\n\r\n              <div class=\"col-sm-6 padding-lr-no\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  type=\"text\"\r\n                  disabled\r\n                  name\r\n                  id\r\n                  v-model=\"editdFileUpload\"\r\n                  placeholder=\"上传图片\"\r\n                >\r\n              </div>\r\n              <div class=\"col-sm-4\">\r\n                <!-- size=300 默认单位为M ; timeout=30 默认单位为秒-->\r\n                <vue-file\r\n                  name=\"vue-file-edit\"\r\n                  btn-class=\"btn-primary\"\r\n                  url=\"/file\"\r\n                  :ok=\"editFileOk\"\r\n                  file-type=\"image/*\"\r\n                  :size=\"300\"\r\n                  :timeout=\"30\"\r\n                  line-class=\"text-primary\"\r\n                  btn-text=\"上传图片\"\r\n                ></vue-file>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"form-group clearfix\">\r\n              <div class=\"col-xs-6 clearfix\">\r\n                <div class=\"upload-img clearfix\" v-for=\"(item,index) in editObj.imgs\" :key=\"index\">\r\n                  <span class=\"close\" @click=\"editFileDel(index)\">&times;</span>\r\n                  <img :src=\"item.src\" alt>\r\n                  <input\r\n                    class=\"form-control\"\r\n                    placeholder=\"输入url链接\"\r\n                    type=\"text\"\r\n                    name\r\n                    id\r\n                    v-model=\"item.url\"\r\n                  >\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\nimport { eventBus } from \"../../../components/eventBus.js\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/svcnet/data\",\r\n        add: \"admin/svcnet/data\",\r\n        edit: \"admin/svcnet/data\",\r\n        del: \"admin/svcnet/data\",\r\n        dtl: \"admin/svcnet/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n          tel:\"\",\r\n        addr:\"\",\r\n        imgs: []\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        tel:\"\",\r\n        addr:\"\",\r\n        imgs: []\r\n      }\r\n\r\n      // 自定义\r\n    };\r\n  },\r\n\r\n  mounted() {},\r\n  methods: {\r\n      // add btn\r\n      addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear('add');\r\n      // 修改内容\r\n     this.addObj.imgs=[];\r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.name = o.name;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.tel = o.tel;\r\n      this.editObj.addr = o.addr;\r\n      this.editObj.imgs =Array.prototype.slice.call(o.imgs);\r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n.template-add {\r\n}\r\n.template-edit {\r\n}\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation{\r\n  .list-group{\r\n    .img-thumbnail{\r\n      img{\r\n        width: 100%;\r\n        height:  200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$25 = undefined;
/* module identifier */
var __vue_module_identifier__$25 = undefined;
/* functional template */
var __vue_is_functional_template__$25 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$25 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$25, staticRenderFns: __vue_staticRenderFns__$25 }, __vue_inject_styles__$25, __vue_script__$25, __vue_scope_id__$25, __vue_is_functional_template__$25, __vue_module_identifier__$25, false, createInjector, undefined, undefined);

var svcnet = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$25);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script$26 = {
  mixins: [mixin$1],
  data: function data() {
    return {
      httpUlr: {
        list: "admin/article/data",
        add: "admin/article/data",
        edit: "admin/article/data",
        del: "admin/article/data",
        dtl: "admin/article/data-dtl"
      },
      // inde列表集合
      list: [],
      //  edit修改的对象
      editObj: {
        _id: "",
        name: "",
        code: "",
        order: "",
        desc: "",
        content: ""
      },

      // add 添加的对象
      addObj: {
        title: "",
        code: "",
        order: "",
        desc: "",
        content: ""

        // 自定义
      } };
  },
  mounted: function mounted() {
    var add = UE.getEditor('add-editor');
    var edit = UE.getEditor('edit-editor');
    var self = this;
    add.addListener('selectionchange', function (editor) {
      self.addObj.content = this.getContent();
    });

    edit.addListener('selectionchange', function (editor) {
      self.editObj.content = this.getContent();
    });
  },

  methods: {
    // add btn
    addBtn: function addBtn() {
      this.tab.set("add");
      this.errors.clear('add');
      UE.getEditor('add-editor').setContent("");
      // 修改内容
      // this.addObj.imgs=[];
    },

    // edit btn
    editBtn: function editBtn(item) {
      var fo = this.list.filter(function (item) {
        return item.bl === true;
      });
      if (fo.length <= 0) {
        this.$alert({
          title: "提示",
          content: "<strong class='text-danger'>没选择数据!</strong>",
          html: true
        }).catch(function (err) {});
        return;
      }
      this.tab.set("edit");
      this.errors.clear("edit");
      var o = fo[0];

      // 修改内容
      this.editObj._id = o._id;
      this.editObj.title = o.title;
      this.editObj.code = o.code;
      this.editObj.order = o.order;
      this.editObj.desc = o.desc;
      this.editObj.content = o.content;
      UE.getEditor('edit-editor').setContent(this.editObj.content);
    },

    // 图片上传成功
    addFileOk: function addFileOk(data, el) {
      var body = data;
      this.addObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    addFileDel: function addFileDel(index) {
      this.addObj.imgs.splice(index, 1);
    },

    // 图片上传成功
    editFileOk: function editFileOk(data, el) {
      var body = data;
      this.editObj.imgs.unshift({ url: "", src: body.data });
    },

    // 删除图片
    editFileDel: function editFileDel(index) {
      this.editObj.imgs.splice(index, 1);
    }
  },
  computed: {
    addFileUpload: function addFileUpload() {
      return this.addObj.imgs.map(function (e) {
        return e.src;
      });
    },
    editdFileUpload: function editdFileUpload() {
      return this.editObj.imgs.map(function (e) {
        return e.src;
      });
    }
  },

  components: {
    VueList: __vue_component__$15,
    VueEdit: __vue_component__$16,
    VueAdd: __vue_component__$17,
    VueDtl: __vue_component__$18
  }
};

/* script */
var __vue_script__$26 = script$26;

/* template */
var __vue_render__$26 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "template-share rotation" }, [_c("div", { staticClass: "tab-slide", class: { active: _vm.tab.index } }, [_c("div", { staticClass: "btn-toolbar clearfix" }, [_c("div", { staticClass: "btn-group pull-left" }), _vm._v(" "), _c("div", { staticClass: "btn-group pull-right" }, [_c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.addBtn }
  }, [_c("span", {
    staticClass: "text-primary glyphicon glyphicon-plus"
  }), _vm._v(" 添加\n          ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.dtlBtn }
  }, [_c("span", {
    staticClass: "text-info glyphicon glyphicon-list-alt"
  }), _vm._v(" 查看\n          ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: { click: _vm.editBtn }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-edit text-warning"
  }), _vm._v(" 修改\n          ")]), _vm._v(" "), _c("button", {
    staticClass: "btn btn-default btn-sm",
    on: {
      click: function click($event) {
        $event.preventDefault();
        return _vm.delBtn();
      }
    }
  }, [_c("span", {
    staticClass: "glyphicon glyphicon-trash text-danger"
  }), _vm._v(" 删除\n          ")])])]), _vm._v(" "), _c("vue-list", {
    attrs: { url: _vm.httpUlr.list },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return [_c("table", { staticClass: "table table-hover table-bordered" }, [_c("thead", [_c("tr", { staticClass: "text-center" }, [_c("th", [_c("vue-checkbox", {
          attrs: { callback: scope.allChcek },
          model: {
            value: scope.allcheckBtn.ck,
            callback: function callback($$v) {
              _vm.$set(scope.allcheckBtn, "ck", $$v);
            },
            expression: "scope.allcheckBtn.ck"
          }
        })], 1), _vm._v(" "), _c("th", [_vm._v("编号")]), _vm._v(" "), _c("th", [_vm._v("名称")]), _vm._v(" "), _c("th", [_vm._v("标识")]), _vm._v(" "), _c("th", [_vm._v("描述")]), _vm._v(" "), _c("th", [_vm._v("创建时间")])])]), _vm._v(" "), _c("tbody", _vm._l(scope.list, function (item, index) {
          return _c("tr", { key: index }, [_c("td", [_c("vue-checkbox", {
            model: {
              value: item.bl,
              callback: function callback($$v) {
                _vm.$set(item, "bl", $$v);
              },
              expression: "item.bl"
            }
          })], 1), _vm._v(" "), _c("td", [_vm._v(_vm._s(item._id))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.title))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.code))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(item.desc))]), _vm._v(" "), _c("td", [_vm._v(_vm._s(_vm._f("date")(item.createdt)))])]);
        }), 0)])];
      }
    }]),
    model: {
      value: _vm.list,
      callback: function callback($$v) {
        _vm.list = $$v;
      },
      expression: "list"
    }
  })], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.dtl } }, [_c("vue-dtl", {
    attrs: { cancel: _vm.dtlCancel, url: _vm.httpUlr.dtl },
    scopedSlots: _vm._u([{
      key: "default",
      fn: function fn(scope) {
        return _vm._l(scope.list, function (item, index) {
          return _c("div", { key: index, staticClass: "list-group" }, [_c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-4 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("Id:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item._id))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-4 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("标识:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.code))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-4 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("排序:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.order))])])]), _vm._v(" "), _c("div", { staticClass: "list-group-item clearfix" }, [_c("div", { staticClass: "col-xs-12 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("名称:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.title))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-12 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("描述:")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(item.desc))])]), _vm._v(" "), _c("div", { staticClass: "col-xs-12 list-group-item-text" }, [_c("label", { attrs: { for: "" } }, [_vm._v("文章内容:")]), _vm._v(" "), _c("div", {
            domProps: { innerHTML: _vm._s(item.content) }
          })])])]);
        });
      }
    }])
  }, [_c("template", { slot: "title" }, [_vm._v("查看文章详情")])], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.add } }, [_c("vue-add", { attrs: { cancel: _vm.addCancel, url: _vm.httpUlr.add } }, [_c("template", { slot: "title" }, [_vm._v("添加文章")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "add" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.add("add");
      }
    }
  }, [_c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.title") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.name" }
  }, [_vm._v("标题:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.title,
      expression: "addObj.title"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.title",
      id: "add.title",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.title },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "title", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.title:required"),
      expression: "errors.has('add.title:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标题不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.title:min"),
      expression: "errors.has('add.title:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标题最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.code") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.code" }
  }, [_vm._v("标识:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: {
        required: true,
        unique: "admin/article/data-unique"
      },
      expression: "{required:true,unique:'admin/article/data-unique'}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.code,
      expression: "addObj.code"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.code",
      id: "add.code",
      placeholder: "输入标识"
    },
    domProps: { value: _vm.addObj.code },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "code", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:required"),
      expression: "errors.has('add.code:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.code:unique"),
      expression: "errors.has('add.code:unique')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标识值已存在！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.order,
      expression: "addObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.order",
      id: "add.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:required"),
      expression: "errors.has('add.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.order:min_value"),
      expression: "errors.has('add.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.desc") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.desc" }
  }, [_vm._v("描述:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.desc,
      expression: "addObj.desc"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "add.desc",
      id: "add.desc",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.addObj.desc },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "desc", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.desc:required"),
      expression: "errors.has('add.desc:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("描述不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.desc:min"),
      expression: "errors.has('add.desc:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("描述最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("add.content") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "add.content" }
  }, [_vm._v("文章内容:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.addObj.content,
      expression: "addObj.content"
    }],
    staticClass: "form-control v-hide",
    attrs: {
      type: "text",
      name: "add.content",
      id: "add.content",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.addObj.content },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.addObj, "content", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("script", {
    staticStyle: { width: "100%", height: "200px" },
    attrs: { id: "add-editor", type: "text/plain" }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("add.content:required"),
      expression: "errors.has('add.content:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("文章内容不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.addError }
  }, [_vm._v("添加")])])])]], 2)], 1), _vm._v(" "), _c("div", { staticClass: "tab-slide", class: { active: _vm.tab.edit } }, [_c("vue-edit", { attrs: { cancel: _vm.editCancel, url: _vm.httpUlr.edit } }, [_c("template", { slot: "title" }, [_vm._v("修改文章")]), _vm._v(" "), [_c("form", {
    attrs: { "data-vv-scope": "edit" },
    on: {
      submit: function submit($event) {
        $event.preventDefault();
        return _vm.edit("edit");
      }
    }
  }, [_c("div", { staticClass: "form-group" }, [_c("h5", [_vm._v("标识：" + _vm._s(_vm.editObj.code))])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.title") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.title" }
  }, [_vm._v("标题:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 2 },
      expression: "{required:true,min:2}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.title,
      expression: "editObj.title"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.title",
      id: "edit.title",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.title },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "title", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.title:required"),
      expression: "errors.has('edit.title:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标题不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.title:min"),
      expression: "errors.has('edit.title:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("标题最小长度为2位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.order") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.order" }
  }, [_vm._v("排序:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min_value: 1 },
      expression: "{required:true,min_value:1}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.order,
      expression: "editObj.order"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.order",
      id: "edit.order",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.order },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "order", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:required"),
      expression: "errors.has('edit.order:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序不为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.order:min_value"),
      expression: "errors.has('edit.order:min_value')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("排序值不能小于1！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.desc") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.desc" }
  }, [_vm._v("描述:")]), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true, min: 4 },
      expression: "{required:true,min:4}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.desc,
      expression: "editObj.desc"
    }],
    staticClass: "form-control",
    attrs: {
      type: "text",
      name: "edit.desc",
      id: "edit.desc",
      placeholder: "输入名称"
    },
    domProps: { value: _vm.editObj.desc },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "desc", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.desc:required"),
      expression: "errors.has('edit.desc:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("描述不能为空！")]), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.desc:min"),
      expression: "errors.has('edit.desc:min')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("描述最小长度为4位！")])]), _vm._v(" "), _c("div", {
    staticClass: "form-group has-feedback",
    class: { " has-error": _vm.errors.has("edit.content") }
  }, [_c("label", {
    staticClass: "control-label",
    attrs: { for: "edit.content" }
  }, [_vm._v("文章内容:")]), _vm._v(" "), _c("script", {
    staticStyle: { width: "100%", height: "200px" },
    attrs: { id: "edit-editor", type: "text/plain" }
  }), _vm._v(" "), _c("input", {
    directives: [{
      name: "validate",
      rawName: "v-validate",
      value: { required: true },
      expression: "{required:true}"
    }, {
      name: "model",
      rawName: "v-model",
      value: _vm.editObj.content,
      expression: "editObj.content"
    }],
    staticClass: "form-control v-hide",
    attrs: {
      type: "text",
      name: "edit.content",
      id: "edit.content",
      placeholder: "输入数值"
    },
    domProps: { value: _vm.editObj.content },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.editObj, "content", $event.target.value);
      }
    }
  }), _vm._v(" "), _c("p", {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: _vm.errors.has("edit.content:required"),
      expression: "errors.has('edit.content:required')"
    }],
    staticClass: "text-danger"
  }, [_vm._v("文章内容不能为空！")])]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("button", {
    staticClass: "btn btn-primary",
    attrs: { type: "submit", disabled: _vm.editError }
  }, [_vm._v("保存")])])])]], 2)], 1)]);
};
var __vue_staticRenderFns__$26 = [];
__vue_render__$26._withStripped = true;

/* style */
var __vue_inject_styles__$26 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-06c4ddd6_0", { source: ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["D:\\dev\\express-admin\\html\\src\\modules\\admin\\article\\app.vue", "app.vue"], "names": [], "mappings": "AA8ZA;EACA,cAAA;EACA,WAAA;EACA,kBAAA;EACA,sBAAA;EACA,sBAAA;EACA,kBAAA;AC7ZA;AD8ZA;EACA,UAAA;EACA,eAAA;AC5ZA;AD8ZA;EACA,WAAA;EACA,aAAA;AC5ZA;AD+ZA;EACA,gBAAA;AC7ZA;ADoaA;EACA,WAAA;EACA,aAAA;ACjaA;;AAEA,kCAAkC", "file": "app.vue", "sourcesContent": ["<template>\r\n  <div class=\"template-share rotation\">\r\n\r\n    <!-- 主列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.index}\">\r\n      <!--操作按钮组-->\r\n      <div class=\"btn-toolbar clearfix\">\r\n        <div class=\"btn-group pull-left\"></div>\r\n        <div class=\"btn-group pull-right\">\r\n          <button class=\"btn btn-default btn-sm\" @click=\"addBtn\">\r\n            <span class=\"text-primary glyphicon glyphicon-plus\"></span> 添加\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"dtlBtn\">\r\n            <span class=\"text-info glyphicon glyphicon-list-alt\"></span> 查看\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click=\"editBtn\">\r\n            <span class=\"glyphicon glyphicon-edit text-warning\"></span> 修改\r\n          </button>\r\n          \r\n          <button class=\"btn btn-default btn-sm\" @click.prevent=\"delBtn()\">\r\n            <span class=\"glyphicon glyphicon-trash text-danger\"></span> 删除\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 组件-->\r\n      <vue-list v-model=\"list\" :url=\"httpUlr.list\">\r\n        <template slot-scope=\"scope\">\r\n          <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n              <tr class=\"text-center\">\r\n                <th>\r\n                  <vue-checkbox v-model=\"scope.allcheckBtn.ck\" :callback=\"scope.allChcek\"></vue-checkbox>\r\n                </th>\r\n                <th>编号</th>\r\n                <th>名称</th>\r\n                <th>标识</th>\r\n                <th>描述</th>\r\n                <th>创建时间</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(item, index)  of scope.list\" :key=\"index\">\r\n                <td>\r\n                  <vue-checkbox v-model=\"item.bl\"></vue-checkbox>\r\n                </td>\r\n                <td>{{item._id}}</td>\r\n                <td>{{ item.title}}</td>\r\n                <td>{{ item.code}}</td>\r\n                  <td>{{ item.desc}}</td>\r\n                <td>{{ item.createdt|date}}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </template>\r\n      </vue-list>\r\n    </div>\r\n\r\n    <!--详细列表模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.dtl}\">\r\n      <!--组件-->\r\n      <vue-dtl :cancel=\"dtlCancel\" :url=\"httpUlr.dtl\">\r\n        <template slot=\"title\">查看文章详情</template>\r\n        <template slot-scope=\"scope\">\r\n          <div class=\"list-group\" v-for=\"(item,index) of scope.list\" :key=\"index\">\r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-4 list-group-item-text\">\r\n                <label for>Id:</label>\r\n                <span>{{item._id}}</span>\r\n              </div>\r\n              <div class=\"col-xs-4 list-group-item-text\">\r\n                <label for>标识:</label>\r\n                <span>{{item.code}}</span>\r\n              </div>\r\n               <div class=\"col-xs-4 list-group-item-text\">\r\n                <label for>排序:</label>\r\n                <span>{{item.order}}</span>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"list-group-item clearfix\">\r\n              <div class=\"col-xs-12 list-group-item-text\">\r\n                <label for>名称:</label>\r\n                <span>{{item.title}}</span>\r\n              </div>\r\n              <div class=\"col-xs-12 list-group-item-text\">\r\n               <label for>描述:</label>\r\n                <span>{{item.desc}}</span>\r\n              </div>\r\n              <div class=\"col-xs-12 list-group-item-text\">\r\n                <label for>文章内容:</label>\r\n                <div v-html=\"item.content\"> </div>\r\n              </div>\r\n              </div>\r\n          </div>\r\n        </template>\r\n      </vue-dtl>\r\n    </div>\r\n\r\n    <!--添加模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.add}\">\r\n      <!--组件 -->\r\n      <vue-add :cancel=\"addCancel\" :url=\"httpUlr.add\">\r\n        <template slot=\"title\">添加文章</template>\r\n\r\n        <template>\r\n          <form @submit.prevent=\"add('add')\" data-vv-scope=\"add\">\r\n            <!-- content start-->\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.title')}\">\r\n              <label class=\"control-label\" for=\"add.name\">标题:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.title\"\r\n                id=\"add.title\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"addObj.title\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.title:required')\">标题不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.title:min')\">标题最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.code')}\">\r\n              <label class=\"control-label\" for=\"add.code\">标识:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.code\"\r\n                id=\"add.code\"\r\n                v-validate=\"{required:true,unique:'admin/article/data-unique'}\"\r\n                v-model=\"addObj.code\"\r\n                placeholder=\"输入标识\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:required')\">标识不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.code:unique')\">标识值已存在！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.order')}\">\r\n              <label class=\"control-label\" for=\"add.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.order\"\r\n                id=\"add.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"addObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:required')\">排序不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('add.desc')}\">\r\n              <label class=\"control-label\" for=\"add.desc\">描述:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"add.desc\"\r\n                id=\"add.desc\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"addObj.desc\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.desc:required')\">描述不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('add.desc:min')\">描述最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\"  :class=\"{' has-error':errors.has('add.content')}\">\r\n               <label class=\"control-label\" for=\"add.content\">文章内容:</label>\r\n               <input\r\n                class=\"form-control v-hide\"\r\n                type=\"text\"\r\n                name=\"add.content\"\r\n                id=\"add.content\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"addObj.content\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n        \r\n\t\t          <script id=\"add-editor\" type=\"text/plain\" style=\"width:100%;height:200px;\"></script>\r\n\r\n               <p class=\"text-danger\" v-show=\"errors.has('add.content:required')\">文章内容不能为空！</p>\r\n\t        </div>\r\n         \r\n       \r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"addError\">添加</button>\r\n            </div>\r\n        \r\n         \r\n         \r\n          </form>\r\n        </template>\r\n      </vue-add>\r\n    </div>\r\n\r\n    <!--编辑模块-->\r\n    <div class=\"tab-slide\" :class=\"{'active':tab.edit}\">\r\n      <!--组件-->\r\n      <vue-edit :cancel=\"editCancel\" :url=\"httpUlr.edit\">\r\n        <template slot=\"title\">修改文章</template>\r\n        <template>\r\n          <form @submit.prevent=\"edit('edit')\" data-vv-scope=\"edit\">\r\n            <!-- content start-->\r\n            <div class=\"form-group\">\r\n              <h5>标识：{{editObj.code}}</h5>\r\n            </div>\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.title')}\">\r\n              <label class=\"control-label\" for=\"edit.title\">标题:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.title\"\r\n                id=\"edit.title\"\r\n                v-validate=\"{required:true,min:2}\"\r\n                v-model=\"editObj.title\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.title:required')\">标题不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.title:min')\">标题最小长度为2位！</p>\r\n            </div>\r\n\r\n          \r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.order')}\">\r\n              <label class=\"control-label\" for=\"edit.order\">排序:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.order\"\r\n                id=\"edit.order\"\r\n                v-validate=\"{required:true,min_value:1}\"\r\n                v-model=\"editObj.order\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:required')\">排序不为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.order:min_value')\">排序值不能小于1！</p>\r\n            </div>\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.desc')}\">\r\n              <label class=\"control-label\" for=\"edit.desc\">描述:</label>\r\n              <input\r\n                class=\"form-control\"\r\n                type=\"text\"\r\n                name=\"edit.desc\"\r\n                id=\"edit.desc\"\r\n                v-validate=\"{required:true,min:4}\"\r\n                v-model=\"editObj.desc\"\r\n                placeholder=\"输入名称\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.desc:required')\">描述不能为空！</p>\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.desc:min')\">描述最小长度为4位！</p>\r\n            </div>\r\n\r\n            <div class=\"form-group has-feedback\" :class=\"{' has-error':errors.has('edit.content')}\">\r\n               <label class=\"control-label\" for=\"edit.content\">文章内容:</label>\r\n\t\t          <script id=\"edit-editor\" type=\"text/plain\" style=\"width:100%;height:200px;\"></script>\r\n           \r\n               <input\r\n                class=\"form-control v-hide\"\r\n                type=\"text\"\r\n                name=\"edit.content\"\r\n                id=\"edit.content\"\r\n                v-validate=\"{required:true}\"\r\n                v-model=\"editObj.content\"\r\n                placeholder=\"输入数值\"\r\n              >\r\n              <p class=\"text-danger\" v-show=\"errors.has('edit.content:required')\">文章内容不能为空！</p>\r\n\t        </div>\r\n\r\n            <!-- content end-->\r\n            <div class=\"form-group\">\r\n              <button type=\"submit\" class=\"btn btn-primary\" :disabled=\"editError\">保存</button>\r\n            </div>\r\n          </form>\r\n        </template>\r\n      </vue-edit>\r\n    </div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VueList from \"../../template-share/list.vue\";\r\nimport VueEdit from \"../../template-share/edit.vue\";\r\nimport VueAdd from \"../../template-share/add.vue\";\r\nimport VueDtl from \"../../template-share/dtl.vue\";\r\nimport { mixin } from \"../../template-share/mixin\";\r\n\r\nexport default {\r\n  mixins: [mixin],\r\n  data() {\r\n    return {\r\n      httpUlr: {\r\n        list: \"admin/article/data\",\r\n        add: \"admin/article/data\",\r\n        edit: \"admin/article/data\",\r\n        del: \"admin/article/data\",\r\n        dtl: \"admin/article/data-dtl\"\r\n      },\r\n      // inde列表集合\r\n      list: [],\r\n      //  edit修改的对象\r\n      editObj: {\r\n        _id: \"\",\r\n        name: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        desc:\"\",\r\n        content:\"\"\r\n      },\r\n\r\n      // add 添加的对象\r\n      addObj: {\r\n        title: \"\",\r\n        code: \"\",\r\n        order: \"\",\r\n        desc:\"\",\r\n        content:\"\"\r\n      }\r\n\r\n      // 自定义\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    let add=UE.getEditor('add-editor');\r\n    let edit=UE.getEditor('edit-editor');\r\n  var self= this;\r\n   add.addListener( 'selectionchange', function( editor ) {\r\n     self.addObj.content=this.getContent()\r\n  });\r\n\r\n   edit.addListener( 'selectionchange', function( editor ) {\r\n     self.editObj.content=this.getContent()\r\n  });\r\n\r\n  },\r\n  methods: {\r\n      // add btn\r\n      addBtn() {\r\n      this.tab.set(\"add\");\r\n      this.errors.clear('add');\r\n      UE.getEditor('add-editor').setContent(\"\");\r\n      // 修改内容\r\n    // this.addObj.imgs=[];\r\n    },\r\n    // edit btn\r\n    editBtn(item) {\r\n      let fo = this.list.filter(item => {\r\n        return item.bl === true;\r\n      });\r\n      if (fo.length <= 0) {\r\n        this.$alert({\r\n          title: \"提示\",\r\n          content: \"<strong class='text-danger'>没选择数据!</strong>\",\r\n          html: true\r\n        }).catch(err => {});\r\n        return;\r\n      }\r\n      this.tab.set(\"edit\");\r\n      this.errors.clear(\"edit\");\r\n      let o = fo[0];\r\n\r\n      // 修改内容\r\n      this.editObj._id = o._id;\r\n      this.editObj.title = o.title;\r\n      this.editObj.code = o.code;\r\n      this.editObj.order = o.order;\r\n      this.editObj.desc = o.desc;\r\n      this.editObj.content = o.content;\r\n      UE.getEditor('edit-editor').setContent( this.editObj.content);\r\n   \r\n    },\r\n    // 图片上传成功\r\n    addFileOk(data, el) {\r\n      var body = data;\r\n      this.addObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    addFileDel(index) {\r\n      this.addObj.imgs.splice(index, 1);\r\n    },\r\n    // 图片上传成功\r\n    editFileOk(data, el) {\r\n      var body = data;\r\n      this.editObj.imgs.unshift({ url: \"\", src: body.data });\r\n    },\r\n    // 删除图片\r\n    editFileDel(index) {\r\n      this.editObj.imgs.splice(index, 1);\r\n    }\r\n  },\r\n  computed: {\r\n    addFileUpload() {\r\n      return this.addObj.imgs.map(e => e.src);\r\n    },\r\n    editdFileUpload() {\r\n      return this.editObj.imgs.map(e => e.src);\r\n    }\r\n  },\r\n\r\n  components: {\r\n    VueList,\r\n    VueEdit,\r\n    VueAdd,\r\n    VueDtl\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\">\r\n\r\n.upload-img {\r\n  margin: 10px 0;\r\n  width: 100%;\r\n  position: relative;\r\n  border: 1px solid #ddd;\r\n  padding: 0 5px 5px 5px;\r\n  border-radius: 5px;\r\n  .close {\r\n    color: red;\r\n    font-size: 24px;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: 180px;\r\n  }\r\n\r\n  .form-control {\r\n    margin-top: 10px;\r\n  }\r\n}\r\n\r\n.rotation{\r\n  .list-group{\r\n    .img-thumbnail{\r\n      img{\r\n        width: 100%;\r\n        height:  200px;\r\n      }\r\n    }\r\n  }\r\n}\r\n</style>\r\n\r\n\r\n\r\n", ".upload-img {\n  margin: 10px 0;\n  width: 100%;\n  position: relative;\n  border: 1px solid #ddd;\n  padding: 0 5px 5px 5px;\n  border-radius: 5px;\n}\n.upload-img .close {\n  color: red;\n  font-size: 24px;\n}\n.upload-img img {\n  width: 100%;\n  height: 180px;\n}\n.upload-img .form-control {\n  margin-top: 10px;\n}\n\n.rotation .list-group .img-thumbnail img {\n  width: 100%;\n  height: 200px;\n}\n\n/*# sourceMappingURL=app.vue.map */"] }, media: undefined });
};
/* scoped */
var __vue_scope_id__$26 = undefined;
/* module identifier */
var __vue_module_identifier__$26 = undefined;
/* functional template */
var __vue_is_functional_template__$26 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$26 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$26, staticRenderFns: __vue_staticRenderFns__$26 }, __vue_inject_styles__$26, __vue_script__$26, __vue_scope_id__$26, __vue_is_functional_template__$26, __vue_module_identifier__$26, false, createInjector, undefined, undefined);

var article = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$26);
            }
        }).$mount("#app");
    }
};

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


var script$27 = {
  data: function data() {
    return {
      file: ""
    };
  },

  methods: {
    ok: function ok(data, el) {
      console.log(data);
    },
    err: function err(_err, el) {
      console.log(_err);
    }
  }

};

/* script */
var __vue_script__$27 = script$27;

/* template */
var __vue_render__$27 = function __vue_render__() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "file" }, [_c("hr"), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("div", { staticClass: "col-sm-6" }, [_c("input", {
    directives: [{
      name: "model",
      rawName: "v-model",
      value: _vm.file.data,
      expression: "file.data"
    }],
    staticClass: "form-control",
    attrs: { type: "text", name: "", id: "" },
    domProps: { value: _vm.file.data },
    on: {
      input: function input($event) {
        if ($event.target.composing) {
          return;
        }
        _vm.$set(_vm.file, "data", $event.target.value);
      }
    }
  })]), _vm._v(" "), _c("div", { staticClass: "col-sm-4" }, [_c("vue-file", {
    attrs: {
      name: "vue-file-up",
      "btn-class": "btn-primary",
      url: "/file",
      ok: _vm.ok,
      err: _vm.err,
      "file-type": "image/*",
      size: 300,
      timeout: 30,
      "line-class": "text-primary",
      "btn-text": "上传图片"
    },
    model: {
      value: _vm.file,
      callback: function callback($$v) {
        _vm.file = $$v;
      },
      expression: "file"
    }
  })], 1)]), _vm._v(" "), _c("div", { staticClass: "form-group" }, [_c("div", { staticClass: "col-xs-6" }, [_c("img", {
    staticStyle: {
      "max-width": "100%",
      "max-height": "100%",
      margin: "20px"
    },
    attrs: { src: _vm.file.data, alt: "" }
  })])])]);
};
var __vue_staticRenderFns__$27 = [];
__vue_render__$27._withStripped = true;

/* style */
var __vue_inject_styles__$27 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-0d06daa6_0", { source: "\n\n/*# sourceMappingURL=app.vue.map */", map: { "version": 3, "sources": ["app.vue"], "names": [], "mappings": ";;AAEA,kCAAkC", "file": "app.vue" }, media: undefined });
};
/* scoped */
var __vue_scope_id__$27 = undefined;
/* module identifier */
var __vue_module_identifier__$27 = undefined;
/* functional template */
var __vue_is_functional_template__$27 = false;
/* component normalizer */
/* style inject */
/* style inject SSR */

/* style inject shadow dom */

var __vue_component__$27 = /*#__PURE__*/normalizeComponent({ render: __vue_render__$27, staticRenderFns: __vue_staticRenderFns__$27 }, __vue_inject_styles__$27, __vue_script__$27, __vue_scope_id__$27, __vue_is_functional_template__$27, __vue_module_identifier__$27, false, createInjector, undefined, undefined);

var file$1 = {
    init: function init() {

        var vm = new Vue({
            render: function render(h) {
                return h(__vue_component__$27);
            }
        }).$mount("#app");
    }
};

Vue.use(VeeValidate$1);

// 自定义异步验证器
// remote 异步验证 例如： v-validate="{required:true,min:4,unique:'admin/user/data/unique'}"
Validator.extend('unique', function (value, _ref) {
  var _ref2 = slicedToArray(_ref, 1),
      httpUlr = _ref2[0];

  return new Promise(function (resolve, reject) {
    Vue.http.get(httpUlr + "/" + value).then(function (ok) {
      var body = ok.body;
      resolve(body);
    }).catch(function (err) {
      return false;
    });
  });
});

Vue.use(plugin);
Vue.http.options.root = '/';
Vue.http.options.emulateJSON = true;
Vue.use(VueComponent); // 全局注册组件

Vue.use(uiv, { locale: locale$2, prexfix: "uiv" });

// 过滤器
Vue.use(filter);

//import  './autoRun';
//import  './message';

// export {test}  from "./test";

exports.index = index$1;
exports.login = login;
exports.user = user;
exports.userrole = userrole;
exports.rotation = rotation;
exports.banner = banner;
exports.seriestype = seriestype;
exports.series = series;
exports.contact = contact;
exports.svcnet = svcnet;
exports.article = article;
exports.file = file$1;

Object.defineProperty(exports, '__esModule', { value: true });

})));
